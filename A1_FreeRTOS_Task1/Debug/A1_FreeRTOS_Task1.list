
A1_FreeRTOS_Task1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005128  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080052f8  080052f8  000152f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005390  08005390  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08005390  08005390  00015390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005398  08005398  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005398  08005398  00015398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800539c  0800539c  0001539c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080053a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b10  2000006c  0800540c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004b7c  0800540c  00024b7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001343e  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ed0  00000000  00000000  0003351d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001268  00000000  00000000  000363f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e23  00000000  00000000  00037658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004571  00000000  00000000  0003847b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014371  00000000  00000000  0003c9ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da288  00000000  00000000  00050d5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005334  00000000  00000000  0012afe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0013031c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080052e0 	.word	0x080052e0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	080052e0 	.word	0x080052e0

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f000 fac0 	bl	8000a94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f824 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 f890 	bl	800063c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800051c:	f001 fcd6 	bl	8001ecc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 8000520:	4a09      	ldr	r2, [pc, #36]	; (8000548 <main+0x3c>)
 8000522:	2100      	movs	r1, #0
 8000524:	4809      	ldr	r0, [pc, #36]	; (800054c <main+0x40>)
 8000526:	f001 fd1b 	bl	8001f60 <osThreadNew>
 800052a:	4603      	mov	r3, r0
 800052c:	4a08      	ldr	r2, [pc, #32]	; (8000550 <main+0x44>)
 800052e:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 8000530:	4a08      	ldr	r2, [pc, #32]	; (8000554 <main+0x48>)
 8000532:	2100      	movs	r1, #0
 8000534:	4808      	ldr	r0, [pc, #32]	; (8000558 <main+0x4c>)
 8000536:	f001 fd13 	bl	8001f60 <osThreadNew>
 800053a:	4603      	mov	r3, r0
 800053c:	4a07      	ldr	r2, [pc, #28]	; (800055c <main+0x50>)
 800053e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000540:	f001 fce8 	bl	8001f14 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000544:	e7fe      	b.n	8000544 <main+0x38>
 8000546:	bf00      	nop
 8000548:	08005330 	.word	0x08005330
 800054c:	0800068d 	.word	0x0800068d
 8000550:	20000088 	.word	0x20000088
 8000554:	08005354 	.word	0x08005354
 8000558:	080006a9 	.word	0x080006a9
 800055c:	2000008c 	.word	0x2000008c

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b094      	sub	sp, #80	; 0x50
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 031c 	add.w	r3, r7, #28
 800056a:	2234      	movs	r2, #52	; 0x34
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f004 fbf2 	bl	8004d58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	f107 0308 	add.w	r3, r7, #8
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000584:	2300      	movs	r3, #0
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	4b2a      	ldr	r3, [pc, #168]	; (8000634 <SystemClock_Config+0xd4>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058c:	4a29      	ldr	r2, [pc, #164]	; (8000634 <SystemClock_Config+0xd4>)
 800058e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000592:	6413      	str	r3, [r2, #64]	; 0x40
 8000594:	4b27      	ldr	r3, [pc, #156]	; (8000634 <SystemClock_Config+0xd4>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005a0:	2300      	movs	r3, #0
 80005a2:	603b      	str	r3, [r7, #0]
 80005a4:	4b24      	ldr	r3, [pc, #144]	; (8000638 <SystemClock_Config+0xd8>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005ac:	4a22      	ldr	r2, [pc, #136]	; (8000638 <SystemClock_Config+0xd8>)
 80005ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	4b20      	ldr	r3, [pc, #128]	; (8000638 <SystemClock_Config+0xd8>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005bc:	603b      	str	r3, [r7, #0]
 80005be:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c0:	2302      	movs	r3, #2
 80005c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c4:	2301      	movs	r3, #1
 80005c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c8:	2310      	movs	r3, #16
 80005ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005cc:	2302      	movs	r3, #2
 80005ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d0:	2300      	movs	r3, #0
 80005d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005d4:	2310      	movs	r3, #16
 80005d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005d8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005de:	2304      	movs	r3, #4
 80005e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005e2:	2302      	movs	r3, #2
 80005e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005e6:	2302      	movs	r3, #2
 80005e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	4618      	mov	r0, r3
 80005f0:	f000 fedc 	bl	80013ac <HAL_RCC_OscConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005fa:	f000 f875 	bl	80006e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fe:	230f      	movs	r3, #15
 8000600:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000602:	2302      	movs	r3, #2
 8000604:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800060a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000614:	f107 0308 	add.w	r3, r7, #8
 8000618:	2102      	movs	r1, #2
 800061a:	4618      	mov	r0, r3
 800061c:	f000 fb5e 	bl	8000cdc <HAL_RCC_ClockConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000626:	f000 f85f 	bl	80006e8 <Error_Handler>
  }
}
 800062a:	bf00      	nop
 800062c:	3750      	adds	r7, #80	; 0x50
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40023800 	.word	0x40023800
 8000638:	40007000 	.word	0x40007000

0800063c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	4b10      	ldr	r3, [pc, #64]	; (8000688 <MX_GPIO_Init+0x4c>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4a0f      	ldr	r2, [pc, #60]	; (8000688 <MX_GPIO_Init+0x4c>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <MX_GPIO_Init+0x4c>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	603b      	str	r3, [r7, #0]
 8000662:	4b09      	ldr	r3, [pc, #36]	; (8000688 <MX_GPIO_Init+0x4c>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	4a08      	ldr	r2, [pc, #32]	; (8000688 <MX_GPIO_Init+0x4c>)
 8000668:	f043 0302 	orr.w	r3, r3, #2
 800066c:	6313      	str	r3, [r2, #48]	; 0x30
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <MX_GPIO_Init+0x4c>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	f003 0302 	and.w	r3, r3, #2
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800067a:	bf00      	nop
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	40023800 	.word	0x40023800

0800068c <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	printf("Task1 \n");
 8000694:	4803      	ldr	r0, [pc, #12]	; (80006a4 <StartTask1+0x18>)
 8000696:	f004 fa7f 	bl	8004b98 <puts>
    osDelay(1000);
 800069a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800069e:	f001 fcf1 	bl	8002084 <osDelay>
	printf("Task1 \n");
 80006a2:	e7f7      	b.n	8000694 <StartTask1+0x8>
 80006a4:	08005308 	.word	0x08005308

080006a8 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
	printf("Task2 \n\n");
 80006b0:	4803      	ldr	r0, [pc, #12]	; (80006c0 <StartTask2+0x18>)
 80006b2:	f004 fa71 	bl	8004b98 <puts>
    osDelay(1000);
 80006b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006ba:	f001 fce3 	bl	8002084 <osDelay>
	printf("Task2 \n\n");
 80006be:	e7f7      	b.n	80006b0 <StartTask2+0x8>
 80006c0:	08005310 	.word	0x08005310

080006c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a04      	ldr	r2, [pc, #16]	; (80006e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d101      	bne.n	80006da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006d6:	f000 f9ff 	bl	8000ad8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40001000 	.word	0x40001000

080006e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ec:	b672      	cpsid	i
}
 80006ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f0:	e7fe      	b.n	80006f0 <Error_Handler+0x8>
	...

080006f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	4b12      	ldr	r3, [pc, #72]	; (8000748 <HAL_MspInit+0x54>)
 8000700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000702:	4a11      	ldr	r2, [pc, #68]	; (8000748 <HAL_MspInit+0x54>)
 8000704:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000708:	6453      	str	r3, [r2, #68]	; 0x44
 800070a:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <HAL_MspInit+0x54>)
 800070c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800070e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	603b      	str	r3, [r7, #0]
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <HAL_MspInit+0x54>)
 800071c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071e:	4a0a      	ldr	r2, [pc, #40]	; (8000748 <HAL_MspInit+0x54>)
 8000720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000724:	6413      	str	r3, [r2, #64]	; 0x40
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <HAL_MspInit+0x54>)
 8000728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072e:	603b      	str	r3, [r7, #0]
 8000730:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000732:	2200      	movs	r2, #0
 8000734:	210f      	movs	r1, #15
 8000736:	f06f 0001 	mvn.w	r0, #1
 800073a:	f000 faa5 	bl	8000c88 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800073e:	bf00      	nop
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800

0800074c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08e      	sub	sp, #56	; 0x38
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000754:	2300      	movs	r3, #0
 8000756:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000758:	2300      	movs	r3, #0
 800075a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800075c:	2300      	movs	r3, #0
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	4b33      	ldr	r3, [pc, #204]	; (8000830 <HAL_InitTick+0xe4>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000764:	4a32      	ldr	r2, [pc, #200]	; (8000830 <HAL_InitTick+0xe4>)
 8000766:	f043 0310 	orr.w	r3, r3, #16
 800076a:	6413      	str	r3, [r2, #64]	; 0x40
 800076c:	4b30      	ldr	r3, [pc, #192]	; (8000830 <HAL_InitTick+0xe4>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000770:	f003 0310 	and.w	r3, r3, #16
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000778:	f107 0210 	add.w	r2, r7, #16
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	4611      	mov	r1, r2
 8000782:	4618      	mov	r0, r3
 8000784:	f000 fbb0 	bl	8000ee8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000788:	6a3b      	ldr	r3, [r7, #32]
 800078a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800078c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800078e:	2b00      	cmp	r3, #0
 8000790:	d103      	bne.n	800079a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000792:	f000 fb95 	bl	8000ec0 <HAL_RCC_GetPCLK1Freq>
 8000796:	6378      	str	r0, [r7, #52]	; 0x34
 8000798:	e004      	b.n	80007a4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800079a:	f000 fb91 	bl	8000ec0 <HAL_RCC_GetPCLK1Freq>
 800079e:	4603      	mov	r3, r0
 80007a0:	005b      	lsls	r3, r3, #1
 80007a2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007a6:	4a23      	ldr	r2, [pc, #140]	; (8000834 <HAL_InitTick+0xe8>)
 80007a8:	fba2 2303 	umull	r2, r3, r2, r3
 80007ac:	0c9b      	lsrs	r3, r3, #18
 80007ae:	3b01      	subs	r3, #1
 80007b0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80007b2:	4b21      	ldr	r3, [pc, #132]	; (8000838 <HAL_InitTick+0xec>)
 80007b4:	4a21      	ldr	r2, [pc, #132]	; (800083c <HAL_InitTick+0xf0>)
 80007b6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80007b8:	4b1f      	ldr	r3, [pc, #124]	; (8000838 <HAL_InitTick+0xec>)
 80007ba:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007be:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80007c0:	4a1d      	ldr	r2, [pc, #116]	; (8000838 <HAL_InitTick+0xec>)
 80007c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007c4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80007c6:	4b1c      	ldr	r3, [pc, #112]	; (8000838 <HAL_InitTick+0xec>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007cc:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <HAL_InitTick+0xec>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d2:	4b19      	ldr	r3, [pc, #100]	; (8000838 <HAL_InitTick+0xec>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80007d8:	4817      	ldr	r0, [pc, #92]	; (8000838 <HAL_InitTick+0xec>)
 80007da:	f001 f885 	bl	80018e8 <HAL_TIM_Base_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80007e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d11b      	bne.n	8000824 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80007ec:	4812      	ldr	r0, [pc, #72]	; (8000838 <HAL_InitTick+0xec>)
 80007ee:	f001 f8d5 	bl	800199c <HAL_TIM_Base_Start_IT>
 80007f2:	4603      	mov	r3, r0
 80007f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80007f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d111      	bne.n	8000824 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000800:	2036      	movs	r0, #54	; 0x36
 8000802:	f000 fa5d 	bl	8000cc0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	2b0f      	cmp	r3, #15
 800080a:	d808      	bhi.n	800081e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800080c:	2200      	movs	r2, #0
 800080e:	6879      	ldr	r1, [r7, #4]
 8000810:	2036      	movs	r0, #54	; 0x36
 8000812:	f000 fa39 	bl	8000c88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000816:	4a0a      	ldr	r2, [pc, #40]	; (8000840 <HAL_InitTick+0xf4>)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	6013      	str	r3, [r2, #0]
 800081c:	e002      	b.n	8000824 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800081e:	2301      	movs	r3, #1
 8000820:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000824:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000828:	4618      	mov	r0, r3
 800082a:	3738      	adds	r7, #56	; 0x38
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40023800 	.word	0x40023800
 8000834:	431bde83 	.word	0x431bde83
 8000838:	20000090 	.word	0x20000090
 800083c:	40001000 	.word	0x40001000
 8000840:	20000004 	.word	0x20000004

08000844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000848:	e7fe      	b.n	8000848 <NMI_Handler+0x4>

0800084a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800084e:	e7fe      	b.n	800084e <HardFault_Handler+0x4>

08000850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000854:	e7fe      	b.n	8000854 <MemManage_Handler+0x4>

08000856 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800085a:	e7fe      	b.n	800085a <BusFault_Handler+0x4>

0800085c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000860:	e7fe      	b.n	8000860 <UsageFault_Handler+0x4>

08000862 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000874:	4802      	ldr	r0, [pc, #8]	; (8000880 <TIM6_DAC_IRQHandler+0x10>)
 8000876:	f001 f901 	bl	8001a7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000090 	.word	0x20000090

08000884 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800088e:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <ITM_SendChar+0x48>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a0e      	ldr	r2, [pc, #56]	; (80008cc <ITM_SendChar+0x48>)
 8000894:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000898:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800089a:	4b0d      	ldr	r3, [pc, #52]	; (80008d0 <ITM_SendChar+0x4c>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a0c      	ldr	r2, [pc, #48]	; (80008d0 <ITM_SendChar+0x4c>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80008a6:	bf00      	nop
 80008a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d0f8      	beq.n	80008a8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80008b6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	6013      	str	r3, [r2, #0]
}
 80008be:	bf00      	nop
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	e000edfc 	.word	0xe000edfc
 80008d0:	e0000e00 	.word	0xe0000e00

080008d4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af00      	add	r7, sp, #0
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	60b9      	str	r1, [r7, #8]
 80008de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008e0:	2300      	movs	r3, #0
 80008e2:	617b      	str	r3, [r7, #20]
 80008e4:	e00a      	b.n	80008fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008e6:	f3af 8000 	nop.w
 80008ea:	4601      	mov	r1, r0
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	1c5a      	adds	r2, r3, #1
 80008f0:	60ba      	str	r2, [r7, #8]
 80008f2:	b2ca      	uxtb	r2, r1
 80008f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	3301      	adds	r3, #1
 80008fa:	617b      	str	r3, [r7, #20]
 80008fc:	697a      	ldr	r2, [r7, #20]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	429a      	cmp	r2, r3
 8000902:	dbf0      	blt.n	80008e6 <_read+0x12>
  }

  return len;
 8000904:	687b      	ldr	r3, [r7, #4]
}
 8000906:	4618      	mov	r0, r3
 8000908:	3718      	adds	r7, #24
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	b086      	sub	sp, #24
 8000912:	af00      	add	r7, sp, #0
 8000914:	60f8      	str	r0, [r7, #12]
 8000916:	60b9      	str	r1, [r7, #8]
 8000918:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800091a:	2300      	movs	r3, #0
 800091c:	617b      	str	r3, [r7, #20]
 800091e:	e009      	b.n	8000934 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	1c5a      	adds	r2, r3, #1
 8000924:	60ba      	str	r2, [r7, #8]
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff ffab 	bl	8000884 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	3301      	adds	r3, #1
 8000932:	617b      	str	r3, [r7, #20]
 8000934:	697a      	ldr	r2, [r7, #20]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	429a      	cmp	r2, r3
 800093a:	dbf1      	blt.n	8000920 <_write+0x12>
  }
  return len;
 800093c:	687b      	ldr	r3, [r7, #4]
}
 800093e:	4618      	mov	r0, r3
 8000940:	3718      	adds	r7, #24
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <_close>:

int _close(int file)
{
 8000946:	b480      	push	{r7}
 8000948:	b083      	sub	sp, #12
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800094e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000952:	4618      	mov	r0, r3
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr

0800095e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800095e:	b480      	push	{r7}
 8000960:	b083      	sub	sp, #12
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
 8000966:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800096e:	605a      	str	r2, [r3, #4]
  return 0;
 8000970:	2300      	movs	r3, #0
}
 8000972:	4618      	mov	r0, r3
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr

0800097e <_isatty>:

int _isatty(int file)
{
 800097e:	b480      	push	{r7}
 8000980:	b083      	sub	sp, #12
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000986:	2301      	movs	r3, #1
}
 8000988:	4618      	mov	r0, r3
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3714      	adds	r7, #20
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
	...

080009b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009b8:	4a14      	ldr	r2, [pc, #80]	; (8000a0c <_sbrk+0x5c>)
 80009ba:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <_sbrk+0x60>)
 80009bc:	1ad3      	subs	r3, r2, r3
 80009be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009c4:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <_sbrk+0x64>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d102      	bne.n	80009d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009cc:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <_sbrk+0x64>)
 80009ce:	4a12      	ldr	r2, [pc, #72]	; (8000a18 <_sbrk+0x68>)
 80009d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009d2:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <_sbrk+0x64>)
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4413      	add	r3, r2
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	429a      	cmp	r2, r3
 80009de:	d207      	bcs.n	80009f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009e0:	f004 fa08 	bl	8004df4 <__errno>
 80009e4:	4603      	mov	r3, r0
 80009e6:	220c      	movs	r2, #12
 80009e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ea:	f04f 33ff 	mov.w	r3, #4294967295
 80009ee:	e009      	b.n	8000a04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009f0:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <_sbrk+0x64>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009f6:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <_sbrk+0x64>)
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4413      	add	r3, r2
 80009fe:	4a05      	ldr	r2, [pc, #20]	; (8000a14 <_sbrk+0x64>)
 8000a00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a02:	68fb      	ldr	r3, [r7, #12]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3718      	adds	r7, #24
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20020000 	.word	0x20020000
 8000a10:	00000400 	.word	0x00000400
 8000a14:	200000d8 	.word	0x200000d8
 8000a18:	20004b80 	.word	0x20004b80

08000a1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <SystemInit+0x20>)
 8000a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a26:	4a05      	ldr	r2, [pc, #20]	; (8000a3c <SystemInit+0x20>)
 8000a28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a44:	480d      	ldr	r0, [pc, #52]	; (8000a7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a46:	490e      	ldr	r1, [pc, #56]	; (8000a80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a48:	4a0e      	ldr	r2, [pc, #56]	; (8000a84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a4c:	e002      	b.n	8000a54 <LoopCopyDataInit>

08000a4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a52:	3304      	adds	r3, #4

08000a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a58:	d3f9      	bcc.n	8000a4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a5a:	4a0b      	ldr	r2, [pc, #44]	; (8000a88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a5c:	4c0b      	ldr	r4, [pc, #44]	; (8000a8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a60:	e001      	b.n	8000a66 <LoopFillZerobss>

08000a62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a64:	3204      	adds	r2, #4

08000a66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a68:	d3fb      	bcc.n	8000a62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a6a:	f7ff ffd7 	bl	8000a1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a6e:	f004 f9c7 	bl	8004e00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a72:	f7ff fd4b 	bl	800050c <main>
  bx  lr    
 8000a76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a80:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000a84:	080053a0 	.word	0x080053a0
  ldr r2, =_sbss
 8000a88:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000a8c:	20004b7c 	.word	0x20004b7c

08000a90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a90:	e7fe      	b.n	8000a90 <ADC_IRQHandler>
	...

08000a94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a98:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <HAL_Init+0x40>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a0d      	ldr	r2, [pc, #52]	; (8000ad4 <HAL_Init+0x40>)
 8000a9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aa2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000aa4:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <HAL_Init+0x40>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a0a      	ldr	r2, [pc, #40]	; (8000ad4 <HAL_Init+0x40>)
 8000aaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab0:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <HAL_Init+0x40>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a07      	ldr	r2, [pc, #28]	; (8000ad4 <HAL_Init+0x40>)
 8000ab6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000abc:	2003      	movs	r0, #3
 8000abe:	f000 f8d8 	bl	8000c72 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ac2:	200f      	movs	r0, #15
 8000ac4:	f7ff fe42 	bl	800074c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ac8:	f7ff fe14 	bl	80006f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000acc:	2300      	movs	r3, #0
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40023c00 	.word	0x40023c00

08000ad8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <HAL_IncTick+0x20>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <HAL_IncTick+0x24>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	4a04      	ldr	r2, [pc, #16]	; (8000afc <HAL_IncTick+0x24>)
 8000aea:	6013      	str	r3, [r2, #0]
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	20000008 	.word	0x20000008
 8000afc:	200000dc 	.word	0x200000dc

08000b00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  return uwTick;
 8000b04:	4b03      	ldr	r3, [pc, #12]	; (8000b14 <HAL_GetTick+0x14>)
 8000b06:	681b      	ldr	r3, [r3, #0]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	200000dc 	.word	0x200000dc

08000b18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f003 0307 	and.w	r3, r3, #7
 8000b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <__NVIC_SetPriorityGrouping+0x44>)
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b2e:	68ba      	ldr	r2, [r7, #8]
 8000b30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b34:	4013      	ands	r3, r2
 8000b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b4a:	4a04      	ldr	r2, [pc, #16]	; (8000b5c <__NVIC_SetPriorityGrouping+0x44>)
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	60d3      	str	r3, [r2, #12]
}
 8000b50:	bf00      	nop
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b64:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <__NVIC_GetPriorityGrouping+0x18>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	0a1b      	lsrs	r3, r3, #8
 8000b6a:	f003 0307 	and.w	r3, r3, #7
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	db0b      	blt.n	8000ba6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	f003 021f 	and.w	r2, r3, #31
 8000b94:	4907      	ldr	r1, [pc, #28]	; (8000bb4 <__NVIC_EnableIRQ+0x38>)
 8000b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9a:	095b      	lsrs	r3, r3, #5
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	e000e100 	.word	0xe000e100

08000bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	6039      	str	r1, [r7, #0]
 8000bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	db0a      	blt.n	8000be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	b2da      	uxtb	r2, r3
 8000bd0:	490c      	ldr	r1, [pc, #48]	; (8000c04 <__NVIC_SetPriority+0x4c>)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	0112      	lsls	r2, r2, #4
 8000bd8:	b2d2      	uxtb	r2, r2
 8000bda:	440b      	add	r3, r1
 8000bdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000be0:	e00a      	b.n	8000bf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	4908      	ldr	r1, [pc, #32]	; (8000c08 <__NVIC_SetPriority+0x50>)
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	f003 030f 	and.w	r3, r3, #15
 8000bee:	3b04      	subs	r3, #4
 8000bf0:	0112      	lsls	r2, r2, #4
 8000bf2:	b2d2      	uxtb	r2, r2
 8000bf4:	440b      	add	r3, r1
 8000bf6:	761a      	strb	r2, [r3, #24]
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	e000e100 	.word	0xe000e100
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b089      	sub	sp, #36	; 0x24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	f1c3 0307 	rsb	r3, r3, #7
 8000c26:	2b04      	cmp	r3, #4
 8000c28:	bf28      	it	cs
 8000c2a:	2304      	movcs	r3, #4
 8000c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	3304      	adds	r3, #4
 8000c32:	2b06      	cmp	r3, #6
 8000c34:	d902      	bls.n	8000c3c <NVIC_EncodePriority+0x30>
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	3b03      	subs	r3, #3
 8000c3a:	e000      	b.n	8000c3e <NVIC_EncodePriority+0x32>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c40:	f04f 32ff 	mov.w	r2, #4294967295
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	43da      	mvns	r2, r3
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	401a      	ands	r2, r3
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c54:	f04f 31ff 	mov.w	r1, #4294967295
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5e:	43d9      	mvns	r1, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c64:	4313      	orrs	r3, r2
         );
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3724      	adds	r7, #36	; 0x24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f7ff ff4c 	bl	8000b18 <__NVIC_SetPriorityGrouping>
}
 8000c80:	bf00      	nop
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
 8000c94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c9a:	f7ff ff61 	bl	8000b60 <__NVIC_GetPriorityGrouping>
 8000c9e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	68b9      	ldr	r1, [r7, #8]
 8000ca4:	6978      	ldr	r0, [r7, #20]
 8000ca6:	f7ff ffb1 	bl	8000c0c <NVIC_EncodePriority>
 8000caa:	4602      	mov	r2, r0
 8000cac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cb0:	4611      	mov	r1, r2
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff ff80 	bl	8000bb8 <__NVIC_SetPriority>
}
 8000cb8:	bf00      	nop
 8000cba:	3718      	adds	r7, #24
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff ff54 	bl	8000b7c <__NVIC_EnableIRQ>
}
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d101      	bne.n	8000cf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000cec:	2301      	movs	r3, #1
 8000cee:	e0cc      	b.n	8000e8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000cf0:	4b68      	ldr	r3, [pc, #416]	; (8000e94 <HAL_RCC_ClockConfig+0x1b8>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f003 030f 	and.w	r3, r3, #15
 8000cf8:	683a      	ldr	r2, [r7, #0]
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d90c      	bls.n	8000d18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cfe:	4b65      	ldr	r3, [pc, #404]	; (8000e94 <HAL_RCC_ClockConfig+0x1b8>)
 8000d00:	683a      	ldr	r2, [r7, #0]
 8000d02:	b2d2      	uxtb	r2, r2
 8000d04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d06:	4b63      	ldr	r3, [pc, #396]	; (8000e94 <HAL_RCC_ClockConfig+0x1b8>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f003 030f 	and.w	r3, r3, #15
 8000d0e:	683a      	ldr	r2, [r7, #0]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d001      	beq.n	8000d18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000d14:	2301      	movs	r3, #1
 8000d16:	e0b8      	b.n	8000e8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f003 0302 	and.w	r3, r3, #2
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d020      	beq.n	8000d66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f003 0304 	and.w	r3, r3, #4
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d005      	beq.n	8000d3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d30:	4b59      	ldr	r3, [pc, #356]	; (8000e98 <HAL_RCC_ClockConfig+0x1bc>)
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	4a58      	ldr	r2, [pc, #352]	; (8000e98 <HAL_RCC_ClockConfig+0x1bc>)
 8000d36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000d3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f003 0308 	and.w	r3, r3, #8
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d005      	beq.n	8000d54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d48:	4b53      	ldr	r3, [pc, #332]	; (8000e98 <HAL_RCC_ClockConfig+0x1bc>)
 8000d4a:	689b      	ldr	r3, [r3, #8]
 8000d4c:	4a52      	ldr	r2, [pc, #328]	; (8000e98 <HAL_RCC_ClockConfig+0x1bc>)
 8000d4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000d52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d54:	4b50      	ldr	r3, [pc, #320]	; (8000e98 <HAL_RCC_ClockConfig+0x1bc>)
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	494d      	ldr	r1, [pc, #308]	; (8000e98 <HAL_RCC_ClockConfig+0x1bc>)
 8000d62:	4313      	orrs	r3, r2
 8000d64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d044      	beq.n	8000dfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d107      	bne.n	8000d8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d7a:	4b47      	ldr	r3, [pc, #284]	; (8000e98 <HAL_RCC_ClockConfig+0x1bc>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d119      	bne.n	8000dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e07f      	b.n	8000e8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	2b02      	cmp	r3, #2
 8000d90:	d003      	beq.n	8000d9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d96:	2b03      	cmp	r3, #3
 8000d98:	d107      	bne.n	8000daa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d9a:	4b3f      	ldr	r3, [pc, #252]	; (8000e98 <HAL_RCC_ClockConfig+0x1bc>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d109      	bne.n	8000dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e06f      	b.n	8000e8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000daa:	4b3b      	ldr	r3, [pc, #236]	; (8000e98 <HAL_RCC_ClockConfig+0x1bc>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f003 0302 	and.w	r3, r3, #2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d101      	bne.n	8000dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e067      	b.n	8000e8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000dba:	4b37      	ldr	r3, [pc, #220]	; (8000e98 <HAL_RCC_ClockConfig+0x1bc>)
 8000dbc:	689b      	ldr	r3, [r3, #8]
 8000dbe:	f023 0203 	bic.w	r2, r3, #3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	4934      	ldr	r1, [pc, #208]	; (8000e98 <HAL_RCC_ClockConfig+0x1bc>)
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000dcc:	f7ff fe98 	bl	8000b00 <HAL_GetTick>
 8000dd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000dd2:	e00a      	b.n	8000dea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dd4:	f7ff fe94 	bl	8000b00 <HAL_GetTick>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d901      	bls.n	8000dea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000de6:	2303      	movs	r3, #3
 8000de8:	e04f      	b.n	8000e8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000dea:	4b2b      	ldr	r3, [pc, #172]	; (8000e98 <HAL_RCC_ClockConfig+0x1bc>)
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	f003 020c 	and.w	r2, r3, #12
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d1eb      	bne.n	8000dd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000dfc:	4b25      	ldr	r3, [pc, #148]	; (8000e94 <HAL_RCC_ClockConfig+0x1b8>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f003 030f 	and.w	r3, r3, #15
 8000e04:	683a      	ldr	r2, [r7, #0]
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d20c      	bcs.n	8000e24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e0a:	4b22      	ldr	r3, [pc, #136]	; (8000e94 <HAL_RCC_ClockConfig+0x1b8>)
 8000e0c:	683a      	ldr	r2, [r7, #0]
 8000e0e:	b2d2      	uxtb	r2, r2
 8000e10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e12:	4b20      	ldr	r3, [pc, #128]	; (8000e94 <HAL_RCC_ClockConfig+0x1b8>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f003 030f 	and.w	r3, r3, #15
 8000e1a:	683a      	ldr	r2, [r7, #0]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d001      	beq.n	8000e24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000e20:	2301      	movs	r3, #1
 8000e22:	e032      	b.n	8000e8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f003 0304 	and.w	r3, r3, #4
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d008      	beq.n	8000e42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e30:	4b19      	ldr	r3, [pc, #100]	; (8000e98 <HAL_RCC_ClockConfig+0x1bc>)
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	4916      	ldr	r1, [pc, #88]	; (8000e98 <HAL_RCC_ClockConfig+0x1bc>)
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f003 0308 	and.w	r3, r3, #8
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d009      	beq.n	8000e62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000e4e:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <HAL_RCC_ClockConfig+0x1bc>)
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	691b      	ldr	r3, [r3, #16]
 8000e5a:	00db      	lsls	r3, r3, #3
 8000e5c:	490e      	ldr	r1, [pc, #56]	; (8000e98 <HAL_RCC_ClockConfig+0x1bc>)
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000e62:	f000 f873 	bl	8000f4c <HAL_RCC_GetSysClockFreq>
 8000e66:	4602      	mov	r2, r0
 8000e68:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <HAL_RCC_ClockConfig+0x1bc>)
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	091b      	lsrs	r3, r3, #4
 8000e6e:	f003 030f 	and.w	r3, r3, #15
 8000e72:	490a      	ldr	r1, [pc, #40]	; (8000e9c <HAL_RCC_ClockConfig+0x1c0>)
 8000e74:	5ccb      	ldrb	r3, [r1, r3]
 8000e76:	fa22 f303 	lsr.w	r3, r2, r3
 8000e7a:	4a09      	ldr	r2, [pc, #36]	; (8000ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8000e7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8000e7e:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff fc62 	bl	800074c <HAL_InitTick>

  return HAL_OK;
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40023c00 	.word	0x40023c00
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	08005378 	.word	0x08005378
 8000ea0:	20000000 	.word	0x20000000
 8000ea4:	20000004 	.word	0x20000004

08000ea8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000eac:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <HAL_RCC_GetHCLKFreq+0x14>)
 8000eae:	681b      	ldr	r3, [r3, #0]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	20000000 	.word	0x20000000

08000ec0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000ec4:	f7ff fff0 	bl	8000ea8 <HAL_RCC_GetHCLKFreq>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	0a9b      	lsrs	r3, r3, #10
 8000ed0:	f003 0307 	and.w	r3, r3, #7
 8000ed4:	4903      	ldr	r1, [pc, #12]	; (8000ee4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000ed6:	5ccb      	ldrb	r3, [r1, r3]
 8000ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	08005388 	.word	0x08005388

08000ee8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	220f      	movs	r2, #15
 8000ef6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000ef8:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <HAL_RCC_GetClockConfig+0x5c>)
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	f003 0203 	and.w	r2, r3, #3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000f04:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <HAL_RCC_GetClockConfig+0x5c>)
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000f10:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <HAL_RCC_GetClockConfig+0x5c>)
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8000f1c:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <HAL_RCC_GetClockConfig+0x5c>)
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	08db      	lsrs	r3, r3, #3
 8000f22:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000f2a:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <HAL_RCC_GetClockConfig+0x60>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f003 020f 	and.w	r2, r3, #15
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	601a      	str	r2, [r3, #0]
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	40023800 	.word	0x40023800
 8000f48:	40023c00 	.word	0x40023c00

08000f4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000f4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f50:	b0ae      	sub	sp, #184	; 0xb8
 8000f52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8000f54:	2300      	movs	r3, #0
 8000f56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8000f60:	2300      	movs	r3, #0
 8000f62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8000f66:	2300      	movs	r3, #0
 8000f68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000f72:	4bcb      	ldr	r3, [pc, #812]	; (80012a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	f003 030c 	and.w	r3, r3, #12
 8000f7a:	2b0c      	cmp	r3, #12
 8000f7c:	f200 8206 	bhi.w	800138c <HAL_RCC_GetSysClockFreq+0x440>
 8000f80:	a201      	add	r2, pc, #4	; (adr r2, 8000f88 <HAL_RCC_GetSysClockFreq+0x3c>)
 8000f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f86:	bf00      	nop
 8000f88:	08000fbd 	.word	0x08000fbd
 8000f8c:	0800138d 	.word	0x0800138d
 8000f90:	0800138d 	.word	0x0800138d
 8000f94:	0800138d 	.word	0x0800138d
 8000f98:	08000fc5 	.word	0x08000fc5
 8000f9c:	0800138d 	.word	0x0800138d
 8000fa0:	0800138d 	.word	0x0800138d
 8000fa4:	0800138d 	.word	0x0800138d
 8000fa8:	08000fcd 	.word	0x08000fcd
 8000fac:	0800138d 	.word	0x0800138d
 8000fb0:	0800138d 	.word	0x0800138d
 8000fb4:	0800138d 	.word	0x0800138d
 8000fb8:	080011bd 	.word	0x080011bd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000fbc:	4bb9      	ldr	r3, [pc, #740]	; (80012a4 <HAL_RCC_GetSysClockFreq+0x358>)
 8000fbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8000fc2:	e1e7      	b.n	8001394 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000fc4:	4bb8      	ldr	r3, [pc, #736]	; (80012a8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8000fc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8000fca:	e1e3      	b.n	8001394 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000fcc:	4bb4      	ldr	r3, [pc, #720]	; (80012a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000fd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000fd8:	4bb1      	ldr	r3, [pc, #708]	; (80012a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d071      	beq.n	80010c8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fe4:	4bae      	ldr	r3, [pc, #696]	; (80012a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	099b      	lsrs	r3, r3, #6
 8000fea:	2200      	movs	r2, #0
 8000fec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000ff0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8000ff4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000ff8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000ffc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001000:	2300      	movs	r3, #0
 8001002:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001006:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800100a:	4622      	mov	r2, r4
 800100c:	462b      	mov	r3, r5
 800100e:	f04f 0000 	mov.w	r0, #0
 8001012:	f04f 0100 	mov.w	r1, #0
 8001016:	0159      	lsls	r1, r3, #5
 8001018:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800101c:	0150      	lsls	r0, r2, #5
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	4621      	mov	r1, r4
 8001024:	1a51      	subs	r1, r2, r1
 8001026:	6439      	str	r1, [r7, #64]	; 0x40
 8001028:	4629      	mov	r1, r5
 800102a:	eb63 0301 	sbc.w	r3, r3, r1
 800102e:	647b      	str	r3, [r7, #68]	; 0x44
 8001030:	f04f 0200 	mov.w	r2, #0
 8001034:	f04f 0300 	mov.w	r3, #0
 8001038:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800103c:	4649      	mov	r1, r9
 800103e:	018b      	lsls	r3, r1, #6
 8001040:	4641      	mov	r1, r8
 8001042:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001046:	4641      	mov	r1, r8
 8001048:	018a      	lsls	r2, r1, #6
 800104a:	4641      	mov	r1, r8
 800104c:	1a51      	subs	r1, r2, r1
 800104e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001050:	4649      	mov	r1, r9
 8001052:	eb63 0301 	sbc.w	r3, r3, r1
 8001056:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001058:	f04f 0200 	mov.w	r2, #0
 800105c:	f04f 0300 	mov.w	r3, #0
 8001060:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001064:	4649      	mov	r1, r9
 8001066:	00cb      	lsls	r3, r1, #3
 8001068:	4641      	mov	r1, r8
 800106a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800106e:	4641      	mov	r1, r8
 8001070:	00ca      	lsls	r2, r1, #3
 8001072:	4610      	mov	r0, r2
 8001074:	4619      	mov	r1, r3
 8001076:	4603      	mov	r3, r0
 8001078:	4622      	mov	r2, r4
 800107a:	189b      	adds	r3, r3, r2
 800107c:	633b      	str	r3, [r7, #48]	; 0x30
 800107e:	462b      	mov	r3, r5
 8001080:	460a      	mov	r2, r1
 8001082:	eb42 0303 	adc.w	r3, r2, r3
 8001086:	637b      	str	r3, [r7, #52]	; 0x34
 8001088:	f04f 0200 	mov.w	r2, #0
 800108c:	f04f 0300 	mov.w	r3, #0
 8001090:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001094:	4629      	mov	r1, r5
 8001096:	024b      	lsls	r3, r1, #9
 8001098:	4621      	mov	r1, r4
 800109a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800109e:	4621      	mov	r1, r4
 80010a0:	024a      	lsls	r2, r1, #9
 80010a2:	4610      	mov	r0, r2
 80010a4:	4619      	mov	r1, r3
 80010a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80010aa:	2200      	movs	r2, #0
 80010ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80010b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80010b4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80010b8:	f7ff f8aa 	bl	8000210 <__aeabi_uldivmod>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	4613      	mov	r3, r2
 80010c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80010c6:	e067      	b.n	8001198 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010c8:	4b75      	ldr	r3, [pc, #468]	; (80012a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	099b      	lsrs	r3, r3, #6
 80010ce:	2200      	movs	r2, #0
 80010d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80010d4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80010d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80010dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80010e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80010e2:	2300      	movs	r3, #0
 80010e4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80010e6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80010ea:	4622      	mov	r2, r4
 80010ec:	462b      	mov	r3, r5
 80010ee:	f04f 0000 	mov.w	r0, #0
 80010f2:	f04f 0100 	mov.w	r1, #0
 80010f6:	0159      	lsls	r1, r3, #5
 80010f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80010fc:	0150      	lsls	r0, r2, #5
 80010fe:	4602      	mov	r2, r0
 8001100:	460b      	mov	r3, r1
 8001102:	4621      	mov	r1, r4
 8001104:	1a51      	subs	r1, r2, r1
 8001106:	62b9      	str	r1, [r7, #40]	; 0x28
 8001108:	4629      	mov	r1, r5
 800110a:	eb63 0301 	sbc.w	r3, r3, r1
 800110e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001110:	f04f 0200 	mov.w	r2, #0
 8001114:	f04f 0300 	mov.w	r3, #0
 8001118:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800111c:	4649      	mov	r1, r9
 800111e:	018b      	lsls	r3, r1, #6
 8001120:	4641      	mov	r1, r8
 8001122:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001126:	4641      	mov	r1, r8
 8001128:	018a      	lsls	r2, r1, #6
 800112a:	4641      	mov	r1, r8
 800112c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001130:	4649      	mov	r1, r9
 8001132:	eb63 0b01 	sbc.w	fp, r3, r1
 8001136:	f04f 0200 	mov.w	r2, #0
 800113a:	f04f 0300 	mov.w	r3, #0
 800113e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001142:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001146:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800114a:	4692      	mov	sl, r2
 800114c:	469b      	mov	fp, r3
 800114e:	4623      	mov	r3, r4
 8001150:	eb1a 0303 	adds.w	r3, sl, r3
 8001154:	623b      	str	r3, [r7, #32]
 8001156:	462b      	mov	r3, r5
 8001158:	eb4b 0303 	adc.w	r3, fp, r3
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	f04f 0300 	mov.w	r3, #0
 8001166:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800116a:	4629      	mov	r1, r5
 800116c:	028b      	lsls	r3, r1, #10
 800116e:	4621      	mov	r1, r4
 8001170:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001174:	4621      	mov	r1, r4
 8001176:	028a      	lsls	r2, r1, #10
 8001178:	4610      	mov	r0, r2
 800117a:	4619      	mov	r1, r3
 800117c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001180:	2200      	movs	r2, #0
 8001182:	673b      	str	r3, [r7, #112]	; 0x70
 8001184:	677a      	str	r2, [r7, #116]	; 0x74
 8001186:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800118a:	f7ff f841 	bl	8000210 <__aeabi_uldivmod>
 800118e:	4602      	mov	r2, r0
 8001190:	460b      	mov	r3, r1
 8001192:	4613      	mov	r3, r2
 8001194:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001198:	4b41      	ldr	r3, [pc, #260]	; (80012a0 <HAL_RCC_GetSysClockFreq+0x354>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	0c1b      	lsrs	r3, r3, #16
 800119e:	f003 0303 	and.w	r3, r3, #3
 80011a2:	3301      	adds	r3, #1
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80011aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80011ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80011b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80011ba:	e0eb      	b.n	8001394 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011bc:	4b38      	ldr	r3, [pc, #224]	; (80012a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80011c8:	4b35      	ldr	r3, [pc, #212]	; (80012a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d06b      	beq.n	80012ac <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011d4:	4b32      	ldr	r3, [pc, #200]	; (80012a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	099b      	lsrs	r3, r3, #6
 80011da:	2200      	movs	r2, #0
 80011dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80011de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80011e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80011e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80011e6:	663b      	str	r3, [r7, #96]	; 0x60
 80011e8:	2300      	movs	r3, #0
 80011ea:	667b      	str	r3, [r7, #100]	; 0x64
 80011ec:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80011f0:	4622      	mov	r2, r4
 80011f2:	462b      	mov	r3, r5
 80011f4:	f04f 0000 	mov.w	r0, #0
 80011f8:	f04f 0100 	mov.w	r1, #0
 80011fc:	0159      	lsls	r1, r3, #5
 80011fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001202:	0150      	lsls	r0, r2, #5
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4621      	mov	r1, r4
 800120a:	1a51      	subs	r1, r2, r1
 800120c:	61b9      	str	r1, [r7, #24]
 800120e:	4629      	mov	r1, r5
 8001210:	eb63 0301 	sbc.w	r3, r3, r1
 8001214:	61fb      	str	r3, [r7, #28]
 8001216:	f04f 0200 	mov.w	r2, #0
 800121a:	f04f 0300 	mov.w	r3, #0
 800121e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001222:	4659      	mov	r1, fp
 8001224:	018b      	lsls	r3, r1, #6
 8001226:	4651      	mov	r1, sl
 8001228:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800122c:	4651      	mov	r1, sl
 800122e:	018a      	lsls	r2, r1, #6
 8001230:	4651      	mov	r1, sl
 8001232:	ebb2 0801 	subs.w	r8, r2, r1
 8001236:	4659      	mov	r1, fp
 8001238:	eb63 0901 	sbc.w	r9, r3, r1
 800123c:	f04f 0200 	mov.w	r2, #0
 8001240:	f04f 0300 	mov.w	r3, #0
 8001244:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001248:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800124c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001250:	4690      	mov	r8, r2
 8001252:	4699      	mov	r9, r3
 8001254:	4623      	mov	r3, r4
 8001256:	eb18 0303 	adds.w	r3, r8, r3
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	462b      	mov	r3, r5
 800125e:	eb49 0303 	adc.w	r3, r9, r3
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	f04f 0200 	mov.w	r2, #0
 8001268:	f04f 0300 	mov.w	r3, #0
 800126c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001270:	4629      	mov	r1, r5
 8001272:	024b      	lsls	r3, r1, #9
 8001274:	4621      	mov	r1, r4
 8001276:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800127a:	4621      	mov	r1, r4
 800127c:	024a      	lsls	r2, r1, #9
 800127e:	4610      	mov	r0, r2
 8001280:	4619      	mov	r1, r3
 8001282:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001286:	2200      	movs	r2, #0
 8001288:	65bb      	str	r3, [r7, #88]	; 0x58
 800128a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800128c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001290:	f7fe ffbe 	bl	8000210 <__aeabi_uldivmod>
 8001294:	4602      	mov	r2, r0
 8001296:	460b      	mov	r3, r1
 8001298:	4613      	mov	r3, r2
 800129a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800129e:	e065      	b.n	800136c <HAL_RCC_GetSysClockFreq+0x420>
 80012a0:	40023800 	.word	0x40023800
 80012a4:	00f42400 	.word	0x00f42400
 80012a8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012ac:	4b3d      	ldr	r3, [pc, #244]	; (80013a4 <HAL_RCC_GetSysClockFreq+0x458>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	099b      	lsrs	r3, r3, #6
 80012b2:	2200      	movs	r2, #0
 80012b4:	4618      	mov	r0, r3
 80012b6:	4611      	mov	r1, r2
 80012b8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80012bc:	653b      	str	r3, [r7, #80]	; 0x50
 80012be:	2300      	movs	r3, #0
 80012c0:	657b      	str	r3, [r7, #84]	; 0x54
 80012c2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80012c6:	4642      	mov	r2, r8
 80012c8:	464b      	mov	r3, r9
 80012ca:	f04f 0000 	mov.w	r0, #0
 80012ce:	f04f 0100 	mov.w	r1, #0
 80012d2:	0159      	lsls	r1, r3, #5
 80012d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80012d8:	0150      	lsls	r0, r2, #5
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	4641      	mov	r1, r8
 80012e0:	1a51      	subs	r1, r2, r1
 80012e2:	60b9      	str	r1, [r7, #8]
 80012e4:	4649      	mov	r1, r9
 80012e6:	eb63 0301 	sbc.w	r3, r3, r1
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	f04f 0200 	mov.w	r2, #0
 80012f0:	f04f 0300 	mov.w	r3, #0
 80012f4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80012f8:	4659      	mov	r1, fp
 80012fa:	018b      	lsls	r3, r1, #6
 80012fc:	4651      	mov	r1, sl
 80012fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001302:	4651      	mov	r1, sl
 8001304:	018a      	lsls	r2, r1, #6
 8001306:	4651      	mov	r1, sl
 8001308:	1a54      	subs	r4, r2, r1
 800130a:	4659      	mov	r1, fp
 800130c:	eb63 0501 	sbc.w	r5, r3, r1
 8001310:	f04f 0200 	mov.w	r2, #0
 8001314:	f04f 0300 	mov.w	r3, #0
 8001318:	00eb      	lsls	r3, r5, #3
 800131a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800131e:	00e2      	lsls	r2, r4, #3
 8001320:	4614      	mov	r4, r2
 8001322:	461d      	mov	r5, r3
 8001324:	4643      	mov	r3, r8
 8001326:	18e3      	adds	r3, r4, r3
 8001328:	603b      	str	r3, [r7, #0]
 800132a:	464b      	mov	r3, r9
 800132c:	eb45 0303 	adc.w	r3, r5, r3
 8001330:	607b      	str	r3, [r7, #4]
 8001332:	f04f 0200 	mov.w	r2, #0
 8001336:	f04f 0300 	mov.w	r3, #0
 800133a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800133e:	4629      	mov	r1, r5
 8001340:	028b      	lsls	r3, r1, #10
 8001342:	4621      	mov	r1, r4
 8001344:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001348:	4621      	mov	r1, r4
 800134a:	028a      	lsls	r2, r1, #10
 800134c:	4610      	mov	r0, r2
 800134e:	4619      	mov	r1, r3
 8001350:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001354:	2200      	movs	r2, #0
 8001356:	64bb      	str	r3, [r7, #72]	; 0x48
 8001358:	64fa      	str	r2, [r7, #76]	; 0x4c
 800135a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800135e:	f7fe ff57 	bl	8000210 <__aeabi_uldivmod>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	4613      	mov	r3, r2
 8001368:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800136c:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <HAL_RCC_GetSysClockFreq+0x458>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	0f1b      	lsrs	r3, r3, #28
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800137a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800137e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001382:	fbb2 f3f3 	udiv	r3, r2, r3
 8001386:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800138a:	e003      	b.n	8001394 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800138c:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <HAL_RCC_GetSysClockFreq+0x45c>)
 800138e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001392:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001394:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001398:	4618      	mov	r0, r3
 800139a:	37b8      	adds	r7, #184	; 0xb8
 800139c:	46bd      	mov	sp, r7
 800139e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80013a2:	bf00      	nop
 80013a4:	40023800 	.word	0x40023800
 80013a8:	00f42400 	.word	0x00f42400

080013ac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e28d      	b.n	80018da <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f000 8083 	beq.w	80014d2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80013cc:	4b94      	ldr	r3, [pc, #592]	; (8001620 <HAL_RCC_OscConfig+0x274>)
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f003 030c 	and.w	r3, r3, #12
 80013d4:	2b04      	cmp	r3, #4
 80013d6:	d019      	beq.n	800140c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80013d8:	4b91      	ldr	r3, [pc, #580]	; (8001620 <HAL_RCC_OscConfig+0x274>)
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80013e0:	2b08      	cmp	r3, #8
 80013e2:	d106      	bne.n	80013f2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80013e4:	4b8e      	ldr	r3, [pc, #568]	; (8001620 <HAL_RCC_OscConfig+0x274>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013f0:	d00c      	beq.n	800140c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013f2:	4b8b      	ldr	r3, [pc, #556]	; (8001620 <HAL_RCC_OscConfig+0x274>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80013fa:	2b0c      	cmp	r3, #12
 80013fc:	d112      	bne.n	8001424 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013fe:	4b88      	ldr	r3, [pc, #544]	; (8001620 <HAL_RCC_OscConfig+0x274>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001406:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800140a:	d10b      	bne.n	8001424 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800140c:	4b84      	ldr	r3, [pc, #528]	; (8001620 <HAL_RCC_OscConfig+0x274>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d05b      	beq.n	80014d0 <HAL_RCC_OscConfig+0x124>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d157      	bne.n	80014d0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e25a      	b.n	80018da <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800142c:	d106      	bne.n	800143c <HAL_RCC_OscConfig+0x90>
 800142e:	4b7c      	ldr	r3, [pc, #496]	; (8001620 <HAL_RCC_OscConfig+0x274>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a7b      	ldr	r2, [pc, #492]	; (8001620 <HAL_RCC_OscConfig+0x274>)
 8001434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001438:	6013      	str	r3, [r2, #0]
 800143a:	e01d      	b.n	8001478 <HAL_RCC_OscConfig+0xcc>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001444:	d10c      	bne.n	8001460 <HAL_RCC_OscConfig+0xb4>
 8001446:	4b76      	ldr	r3, [pc, #472]	; (8001620 <HAL_RCC_OscConfig+0x274>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a75      	ldr	r2, [pc, #468]	; (8001620 <HAL_RCC_OscConfig+0x274>)
 800144c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001450:	6013      	str	r3, [r2, #0]
 8001452:	4b73      	ldr	r3, [pc, #460]	; (8001620 <HAL_RCC_OscConfig+0x274>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a72      	ldr	r2, [pc, #456]	; (8001620 <HAL_RCC_OscConfig+0x274>)
 8001458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800145c:	6013      	str	r3, [r2, #0]
 800145e:	e00b      	b.n	8001478 <HAL_RCC_OscConfig+0xcc>
 8001460:	4b6f      	ldr	r3, [pc, #444]	; (8001620 <HAL_RCC_OscConfig+0x274>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a6e      	ldr	r2, [pc, #440]	; (8001620 <HAL_RCC_OscConfig+0x274>)
 8001466:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800146a:	6013      	str	r3, [r2, #0]
 800146c:	4b6c      	ldr	r3, [pc, #432]	; (8001620 <HAL_RCC_OscConfig+0x274>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a6b      	ldr	r2, [pc, #428]	; (8001620 <HAL_RCC_OscConfig+0x274>)
 8001472:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001476:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d013      	beq.n	80014a8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001480:	f7ff fb3e 	bl	8000b00 <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001488:	f7ff fb3a 	bl	8000b00 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b64      	cmp	r3, #100	; 0x64
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e21f      	b.n	80018da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800149a:	4b61      	ldr	r3, [pc, #388]	; (8001620 <HAL_RCC_OscConfig+0x274>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d0f0      	beq.n	8001488 <HAL_RCC_OscConfig+0xdc>
 80014a6:	e014      	b.n	80014d2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a8:	f7ff fb2a 	bl	8000b00 <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014b0:	f7ff fb26 	bl	8000b00 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b64      	cmp	r3, #100	; 0x64
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e20b      	b.n	80018da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014c2:	4b57      	ldr	r3, [pc, #348]	; (8001620 <HAL_RCC_OscConfig+0x274>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1f0      	bne.n	80014b0 <HAL_RCC_OscConfig+0x104>
 80014ce:	e000      	b.n	80014d2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d06f      	beq.n	80015be <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80014de:	4b50      	ldr	r3, [pc, #320]	; (8001620 <HAL_RCC_OscConfig+0x274>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f003 030c 	and.w	r3, r3, #12
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d017      	beq.n	800151a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80014ea:	4b4d      	ldr	r3, [pc, #308]	; (8001620 <HAL_RCC_OscConfig+0x274>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80014f2:	2b08      	cmp	r3, #8
 80014f4:	d105      	bne.n	8001502 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80014f6:	4b4a      	ldr	r3, [pc, #296]	; (8001620 <HAL_RCC_OscConfig+0x274>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d00b      	beq.n	800151a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001502:	4b47      	ldr	r3, [pc, #284]	; (8001620 <HAL_RCC_OscConfig+0x274>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800150a:	2b0c      	cmp	r3, #12
 800150c:	d11c      	bne.n	8001548 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800150e:	4b44      	ldr	r3, [pc, #272]	; (8001620 <HAL_RCC_OscConfig+0x274>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d116      	bne.n	8001548 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800151a:	4b41      	ldr	r3, [pc, #260]	; (8001620 <HAL_RCC_OscConfig+0x274>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d005      	beq.n	8001532 <HAL_RCC_OscConfig+0x186>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d001      	beq.n	8001532 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e1d3      	b.n	80018da <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001532:	4b3b      	ldr	r3, [pc, #236]	; (8001620 <HAL_RCC_OscConfig+0x274>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	00db      	lsls	r3, r3, #3
 8001540:	4937      	ldr	r1, [pc, #220]	; (8001620 <HAL_RCC_OscConfig+0x274>)
 8001542:	4313      	orrs	r3, r2
 8001544:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001546:	e03a      	b.n	80015be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d020      	beq.n	8001592 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001550:	4b34      	ldr	r3, [pc, #208]	; (8001624 <HAL_RCC_OscConfig+0x278>)
 8001552:	2201      	movs	r2, #1
 8001554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001556:	f7ff fad3 	bl	8000b00 <HAL_GetTick>
 800155a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800155c:	e008      	b.n	8001570 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800155e:	f7ff facf 	bl	8000b00 <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e1b4      	b.n	80018da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001570:	4b2b      	ldr	r3, [pc, #172]	; (8001620 <HAL_RCC_OscConfig+0x274>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0f0      	beq.n	800155e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800157c:	4b28      	ldr	r3, [pc, #160]	; (8001620 <HAL_RCC_OscConfig+0x274>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	691b      	ldr	r3, [r3, #16]
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	4925      	ldr	r1, [pc, #148]	; (8001620 <HAL_RCC_OscConfig+0x274>)
 800158c:	4313      	orrs	r3, r2
 800158e:	600b      	str	r3, [r1, #0]
 8001590:	e015      	b.n	80015be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001592:	4b24      	ldr	r3, [pc, #144]	; (8001624 <HAL_RCC_OscConfig+0x278>)
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001598:	f7ff fab2 	bl	8000b00 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015a0:	f7ff faae 	bl	8000b00 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e193      	b.n	80018da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015b2:	4b1b      	ldr	r3, [pc, #108]	; (8001620 <HAL_RCC_OscConfig+0x274>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f0      	bne.n	80015a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0308 	and.w	r3, r3, #8
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d036      	beq.n	8001638 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d016      	beq.n	8001600 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015d2:	4b15      	ldr	r3, [pc, #84]	; (8001628 <HAL_RCC_OscConfig+0x27c>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d8:	f7ff fa92 	bl	8000b00 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015e0:	f7ff fa8e 	bl	8000b00 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e173      	b.n	80018da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015f2:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <HAL_RCC_OscConfig+0x274>)
 80015f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d0f0      	beq.n	80015e0 <HAL_RCC_OscConfig+0x234>
 80015fe:	e01b      	b.n	8001638 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001600:	4b09      	ldr	r3, [pc, #36]	; (8001628 <HAL_RCC_OscConfig+0x27c>)
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001606:	f7ff fa7b 	bl	8000b00 <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800160c:	e00e      	b.n	800162c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800160e:	f7ff fa77 	bl	8000b00 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d907      	bls.n	800162c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e15c      	b.n	80018da <HAL_RCC_OscConfig+0x52e>
 8001620:	40023800 	.word	0x40023800
 8001624:	42470000 	.word	0x42470000
 8001628:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800162c:	4b8a      	ldr	r3, [pc, #552]	; (8001858 <HAL_RCC_OscConfig+0x4ac>)
 800162e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1ea      	bne.n	800160e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0304 	and.w	r3, r3, #4
 8001640:	2b00      	cmp	r3, #0
 8001642:	f000 8097 	beq.w	8001774 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001646:	2300      	movs	r3, #0
 8001648:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800164a:	4b83      	ldr	r3, [pc, #524]	; (8001858 <HAL_RCC_OscConfig+0x4ac>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d10f      	bne.n	8001676 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	60bb      	str	r3, [r7, #8]
 800165a:	4b7f      	ldr	r3, [pc, #508]	; (8001858 <HAL_RCC_OscConfig+0x4ac>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	4a7e      	ldr	r2, [pc, #504]	; (8001858 <HAL_RCC_OscConfig+0x4ac>)
 8001660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001664:	6413      	str	r3, [r2, #64]	; 0x40
 8001666:	4b7c      	ldr	r3, [pc, #496]	; (8001858 <HAL_RCC_OscConfig+0x4ac>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166e:	60bb      	str	r3, [r7, #8]
 8001670:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001672:	2301      	movs	r3, #1
 8001674:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001676:	4b79      	ldr	r3, [pc, #484]	; (800185c <HAL_RCC_OscConfig+0x4b0>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800167e:	2b00      	cmp	r3, #0
 8001680:	d118      	bne.n	80016b4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001682:	4b76      	ldr	r3, [pc, #472]	; (800185c <HAL_RCC_OscConfig+0x4b0>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a75      	ldr	r2, [pc, #468]	; (800185c <HAL_RCC_OscConfig+0x4b0>)
 8001688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800168c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800168e:	f7ff fa37 	bl	8000b00 <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001696:	f7ff fa33 	bl	8000b00 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e118      	b.n	80018da <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a8:	4b6c      	ldr	r3, [pc, #432]	; (800185c <HAL_RCC_OscConfig+0x4b0>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0f0      	beq.n	8001696 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d106      	bne.n	80016ca <HAL_RCC_OscConfig+0x31e>
 80016bc:	4b66      	ldr	r3, [pc, #408]	; (8001858 <HAL_RCC_OscConfig+0x4ac>)
 80016be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c0:	4a65      	ldr	r2, [pc, #404]	; (8001858 <HAL_RCC_OscConfig+0x4ac>)
 80016c2:	f043 0301 	orr.w	r3, r3, #1
 80016c6:	6713      	str	r3, [r2, #112]	; 0x70
 80016c8:	e01c      	b.n	8001704 <HAL_RCC_OscConfig+0x358>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	2b05      	cmp	r3, #5
 80016d0:	d10c      	bne.n	80016ec <HAL_RCC_OscConfig+0x340>
 80016d2:	4b61      	ldr	r3, [pc, #388]	; (8001858 <HAL_RCC_OscConfig+0x4ac>)
 80016d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016d6:	4a60      	ldr	r2, [pc, #384]	; (8001858 <HAL_RCC_OscConfig+0x4ac>)
 80016d8:	f043 0304 	orr.w	r3, r3, #4
 80016dc:	6713      	str	r3, [r2, #112]	; 0x70
 80016de:	4b5e      	ldr	r3, [pc, #376]	; (8001858 <HAL_RCC_OscConfig+0x4ac>)
 80016e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016e2:	4a5d      	ldr	r2, [pc, #372]	; (8001858 <HAL_RCC_OscConfig+0x4ac>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	6713      	str	r3, [r2, #112]	; 0x70
 80016ea:	e00b      	b.n	8001704 <HAL_RCC_OscConfig+0x358>
 80016ec:	4b5a      	ldr	r3, [pc, #360]	; (8001858 <HAL_RCC_OscConfig+0x4ac>)
 80016ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f0:	4a59      	ldr	r2, [pc, #356]	; (8001858 <HAL_RCC_OscConfig+0x4ac>)
 80016f2:	f023 0301 	bic.w	r3, r3, #1
 80016f6:	6713      	str	r3, [r2, #112]	; 0x70
 80016f8:	4b57      	ldr	r3, [pc, #348]	; (8001858 <HAL_RCC_OscConfig+0x4ac>)
 80016fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016fc:	4a56      	ldr	r2, [pc, #344]	; (8001858 <HAL_RCC_OscConfig+0x4ac>)
 80016fe:	f023 0304 	bic.w	r3, r3, #4
 8001702:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d015      	beq.n	8001738 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800170c:	f7ff f9f8 	bl	8000b00 <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001712:	e00a      	b.n	800172a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001714:	f7ff f9f4 	bl	8000b00 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001722:	4293      	cmp	r3, r2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e0d7      	b.n	80018da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800172a:	4b4b      	ldr	r3, [pc, #300]	; (8001858 <HAL_RCC_OscConfig+0x4ac>)
 800172c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d0ee      	beq.n	8001714 <HAL_RCC_OscConfig+0x368>
 8001736:	e014      	b.n	8001762 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001738:	f7ff f9e2 	bl	8000b00 <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800173e:	e00a      	b.n	8001756 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001740:	f7ff f9de 	bl	8000b00 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	f241 3288 	movw	r2, #5000	; 0x1388
 800174e:	4293      	cmp	r3, r2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e0c1      	b.n	80018da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001756:	4b40      	ldr	r3, [pc, #256]	; (8001858 <HAL_RCC_OscConfig+0x4ac>)
 8001758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1ee      	bne.n	8001740 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001762:	7dfb      	ldrb	r3, [r7, #23]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d105      	bne.n	8001774 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001768:	4b3b      	ldr	r3, [pc, #236]	; (8001858 <HAL_RCC_OscConfig+0x4ac>)
 800176a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176c:	4a3a      	ldr	r2, [pc, #232]	; (8001858 <HAL_RCC_OscConfig+0x4ac>)
 800176e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001772:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	2b00      	cmp	r3, #0
 800177a:	f000 80ad 	beq.w	80018d8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800177e:	4b36      	ldr	r3, [pc, #216]	; (8001858 <HAL_RCC_OscConfig+0x4ac>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f003 030c 	and.w	r3, r3, #12
 8001786:	2b08      	cmp	r3, #8
 8001788:	d060      	beq.n	800184c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	2b02      	cmp	r3, #2
 8001790:	d145      	bne.n	800181e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001792:	4b33      	ldr	r3, [pc, #204]	; (8001860 <HAL_RCC_OscConfig+0x4b4>)
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001798:	f7ff f9b2 	bl	8000b00 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017a0:	f7ff f9ae 	bl	8000b00 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e093      	b.n	80018da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017b2:	4b29      	ldr	r3, [pc, #164]	; (8001858 <HAL_RCC_OscConfig+0x4ac>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1f0      	bne.n	80017a0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	69da      	ldr	r2, [r3, #28]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a1b      	ldr	r3, [r3, #32]
 80017c6:	431a      	orrs	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017cc:	019b      	lsls	r3, r3, #6
 80017ce:	431a      	orrs	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d4:	085b      	lsrs	r3, r3, #1
 80017d6:	3b01      	subs	r3, #1
 80017d8:	041b      	lsls	r3, r3, #16
 80017da:	431a      	orrs	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e0:	061b      	lsls	r3, r3, #24
 80017e2:	431a      	orrs	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e8:	071b      	lsls	r3, r3, #28
 80017ea:	491b      	ldr	r1, [pc, #108]	; (8001858 <HAL_RCC_OscConfig+0x4ac>)
 80017ec:	4313      	orrs	r3, r2
 80017ee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017f0:	4b1b      	ldr	r3, [pc, #108]	; (8001860 <HAL_RCC_OscConfig+0x4b4>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f6:	f7ff f983 	bl	8000b00 <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017fc:	e008      	b.n	8001810 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017fe:	f7ff f97f 	bl	8000b00 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e064      	b.n	80018da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001810:	4b11      	ldr	r3, [pc, #68]	; (8001858 <HAL_RCC_OscConfig+0x4ac>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d0f0      	beq.n	80017fe <HAL_RCC_OscConfig+0x452>
 800181c:	e05c      	b.n	80018d8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800181e:	4b10      	ldr	r3, [pc, #64]	; (8001860 <HAL_RCC_OscConfig+0x4b4>)
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001824:	f7ff f96c 	bl	8000b00 <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800182a:	e008      	b.n	800183e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800182c:	f7ff f968 	bl	8000b00 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b02      	cmp	r3, #2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e04d      	b.n	80018da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800183e:	4b06      	ldr	r3, [pc, #24]	; (8001858 <HAL_RCC_OscConfig+0x4ac>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1f0      	bne.n	800182c <HAL_RCC_OscConfig+0x480>
 800184a:	e045      	b.n	80018d8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d107      	bne.n	8001864 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e040      	b.n	80018da <HAL_RCC_OscConfig+0x52e>
 8001858:	40023800 	.word	0x40023800
 800185c:	40007000 	.word	0x40007000
 8001860:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001864:	4b1f      	ldr	r3, [pc, #124]	; (80018e4 <HAL_RCC_OscConfig+0x538>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d030      	beq.n	80018d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800187c:	429a      	cmp	r2, r3
 800187e:	d129      	bne.n	80018d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800188a:	429a      	cmp	r2, r3
 800188c:	d122      	bne.n	80018d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800188e:	68fa      	ldr	r2, [r7, #12]
 8001890:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001894:	4013      	ands	r3, r2
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800189a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800189c:	4293      	cmp	r3, r2
 800189e:	d119      	bne.n	80018d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018aa:	085b      	lsrs	r3, r3, #1
 80018ac:	3b01      	subs	r3, #1
 80018ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d10f      	bne.n	80018d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d107      	bne.n	80018d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d001      	beq.n	80018d8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e000      	b.n	80018da <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3718      	adds	r7, #24
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40023800 	.word	0x40023800

080018e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e041      	b.n	800197e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	d106      	bne.n	8001914 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 f839 	bl	8001986 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2202      	movs	r2, #2
 8001918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3304      	adds	r3, #4
 8001924:	4619      	mov	r1, r3
 8001926:	4610      	mov	r0, r2
 8001928:	f000 f9d8 	bl	8001cdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2201      	movs	r2, #1
 8001940:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2201      	movs	r2, #1
 8001968:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001986:	b480      	push	{r7}
 8001988:	b083      	sub	sp, #12
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
	...

0800199c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d001      	beq.n	80019b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e04e      	b.n	8001a52 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2202      	movs	r2, #2
 80019b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	68da      	ldr	r2, [r3, #12]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f042 0201 	orr.w	r2, r2, #1
 80019ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a23      	ldr	r2, [pc, #140]	; (8001a60 <HAL_TIM_Base_Start_IT+0xc4>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d022      	beq.n	8001a1c <HAL_TIM_Base_Start_IT+0x80>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019de:	d01d      	beq.n	8001a1c <HAL_TIM_Base_Start_IT+0x80>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a1f      	ldr	r2, [pc, #124]	; (8001a64 <HAL_TIM_Base_Start_IT+0xc8>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d018      	beq.n	8001a1c <HAL_TIM_Base_Start_IT+0x80>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a1e      	ldr	r2, [pc, #120]	; (8001a68 <HAL_TIM_Base_Start_IT+0xcc>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d013      	beq.n	8001a1c <HAL_TIM_Base_Start_IT+0x80>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a1c      	ldr	r2, [pc, #112]	; (8001a6c <HAL_TIM_Base_Start_IT+0xd0>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d00e      	beq.n	8001a1c <HAL_TIM_Base_Start_IT+0x80>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a1b      	ldr	r2, [pc, #108]	; (8001a70 <HAL_TIM_Base_Start_IT+0xd4>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d009      	beq.n	8001a1c <HAL_TIM_Base_Start_IT+0x80>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a19      	ldr	r2, [pc, #100]	; (8001a74 <HAL_TIM_Base_Start_IT+0xd8>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d004      	beq.n	8001a1c <HAL_TIM_Base_Start_IT+0x80>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a18      	ldr	r2, [pc, #96]	; (8001a78 <HAL_TIM_Base_Start_IT+0xdc>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d111      	bne.n	8001a40 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2b06      	cmp	r3, #6
 8001a2c:	d010      	beq.n	8001a50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f042 0201 	orr.w	r2, r2, #1
 8001a3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a3e:	e007      	b.n	8001a50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f042 0201 	orr.w	r2, r2, #1
 8001a4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3714      	adds	r7, #20
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	40010000 	.word	0x40010000
 8001a64:	40000400 	.word	0x40000400
 8001a68:	40000800 	.word	0x40000800
 8001a6c:	40000c00 	.word	0x40000c00
 8001a70:	40010400 	.word	0x40010400
 8001a74:	40014000 	.word	0x40014000
 8001a78:	40001800 	.word	0x40001800

08001a7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d122      	bne.n	8001ad8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d11b      	bne.n	8001ad8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f06f 0202 	mvn.w	r2, #2
 8001aa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2201      	movs	r2, #1
 8001aae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	f003 0303 	and.w	r3, r3, #3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 f8ee 	bl	8001ca0 <HAL_TIM_IC_CaptureCallback>
 8001ac4:	e005      	b.n	8001ad2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 f8e0 	bl	8001c8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f000 f8f1 	bl	8001cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	f003 0304 	and.w	r3, r3, #4
 8001ae2:	2b04      	cmp	r3, #4
 8001ae4:	d122      	bne.n	8001b2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	f003 0304 	and.w	r3, r3, #4
 8001af0:	2b04      	cmp	r3, #4
 8001af2:	d11b      	bne.n	8001b2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f06f 0204 	mvn.w	r2, #4
 8001afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2202      	movs	r2, #2
 8001b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 f8c4 	bl	8001ca0 <HAL_TIM_IC_CaptureCallback>
 8001b18:	e005      	b.n	8001b26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 f8b6 	bl	8001c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 f8c7 	bl	8001cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	f003 0308 	and.w	r3, r3, #8
 8001b36:	2b08      	cmp	r3, #8
 8001b38:	d122      	bne.n	8001b80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	f003 0308 	and.w	r3, r3, #8
 8001b44:	2b08      	cmp	r3, #8
 8001b46:	d11b      	bne.n	8001b80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f06f 0208 	mvn.w	r2, #8
 8001b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2204      	movs	r2, #4
 8001b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	f003 0303 	and.w	r3, r3, #3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 f89a 	bl	8001ca0 <HAL_TIM_IC_CaptureCallback>
 8001b6c:	e005      	b.n	8001b7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 f88c 	bl	8001c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f000 f89d 	bl	8001cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	f003 0310 	and.w	r3, r3, #16
 8001b8a:	2b10      	cmp	r3, #16
 8001b8c:	d122      	bne.n	8001bd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	f003 0310 	and.w	r3, r3, #16
 8001b98:	2b10      	cmp	r3, #16
 8001b9a:	d11b      	bne.n	8001bd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f06f 0210 	mvn.w	r2, #16
 8001ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2208      	movs	r2, #8
 8001baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 f870 	bl	8001ca0 <HAL_TIM_IC_CaptureCallback>
 8001bc0:	e005      	b.n	8001bce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 f862 	bl	8001c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 f873 	bl	8001cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d10e      	bne.n	8001c00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d107      	bne.n	8001c00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f06f 0201 	mvn.w	r2, #1
 8001bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7fe fd62 	bl	80006c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c0a:	2b80      	cmp	r3, #128	; 0x80
 8001c0c:	d10e      	bne.n	8001c2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c18:	2b80      	cmp	r3, #128	; 0x80
 8001c1a:	d107      	bne.n	8001c2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 f902 	bl	8001e30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c36:	2b40      	cmp	r3, #64	; 0x40
 8001c38:	d10e      	bne.n	8001c58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c44:	2b40      	cmp	r3, #64	; 0x40
 8001c46:	d107      	bne.n	8001c58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f838 	bl	8001cc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	f003 0320 	and.w	r3, r3, #32
 8001c62:	2b20      	cmp	r3, #32
 8001c64:	d10e      	bne.n	8001c84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	f003 0320 	and.w	r3, r3, #32
 8001c70:	2b20      	cmp	r3, #32
 8001c72:	d107      	bne.n	8001c84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f06f 0220 	mvn.w	r2, #32
 8001c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f8cc 	bl	8001e1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c84:	bf00      	nop
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a40      	ldr	r2, [pc, #256]	; (8001df0 <TIM_Base_SetConfig+0x114>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d013      	beq.n	8001d1c <TIM_Base_SetConfig+0x40>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cfa:	d00f      	beq.n	8001d1c <TIM_Base_SetConfig+0x40>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a3d      	ldr	r2, [pc, #244]	; (8001df4 <TIM_Base_SetConfig+0x118>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d00b      	beq.n	8001d1c <TIM_Base_SetConfig+0x40>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a3c      	ldr	r2, [pc, #240]	; (8001df8 <TIM_Base_SetConfig+0x11c>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d007      	beq.n	8001d1c <TIM_Base_SetConfig+0x40>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a3b      	ldr	r2, [pc, #236]	; (8001dfc <TIM_Base_SetConfig+0x120>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d003      	beq.n	8001d1c <TIM_Base_SetConfig+0x40>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a3a      	ldr	r2, [pc, #232]	; (8001e00 <TIM_Base_SetConfig+0x124>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d108      	bne.n	8001d2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a2f      	ldr	r2, [pc, #188]	; (8001df0 <TIM_Base_SetConfig+0x114>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d02b      	beq.n	8001d8e <TIM_Base_SetConfig+0xb2>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d3c:	d027      	beq.n	8001d8e <TIM_Base_SetConfig+0xb2>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a2c      	ldr	r2, [pc, #176]	; (8001df4 <TIM_Base_SetConfig+0x118>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d023      	beq.n	8001d8e <TIM_Base_SetConfig+0xb2>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a2b      	ldr	r2, [pc, #172]	; (8001df8 <TIM_Base_SetConfig+0x11c>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d01f      	beq.n	8001d8e <TIM_Base_SetConfig+0xb2>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a2a      	ldr	r2, [pc, #168]	; (8001dfc <TIM_Base_SetConfig+0x120>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d01b      	beq.n	8001d8e <TIM_Base_SetConfig+0xb2>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a29      	ldr	r2, [pc, #164]	; (8001e00 <TIM_Base_SetConfig+0x124>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d017      	beq.n	8001d8e <TIM_Base_SetConfig+0xb2>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a28      	ldr	r2, [pc, #160]	; (8001e04 <TIM_Base_SetConfig+0x128>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d013      	beq.n	8001d8e <TIM_Base_SetConfig+0xb2>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a27      	ldr	r2, [pc, #156]	; (8001e08 <TIM_Base_SetConfig+0x12c>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d00f      	beq.n	8001d8e <TIM_Base_SetConfig+0xb2>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a26      	ldr	r2, [pc, #152]	; (8001e0c <TIM_Base_SetConfig+0x130>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d00b      	beq.n	8001d8e <TIM_Base_SetConfig+0xb2>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a25      	ldr	r2, [pc, #148]	; (8001e10 <TIM_Base_SetConfig+0x134>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d007      	beq.n	8001d8e <TIM_Base_SetConfig+0xb2>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a24      	ldr	r2, [pc, #144]	; (8001e14 <TIM_Base_SetConfig+0x138>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d003      	beq.n	8001d8e <TIM_Base_SetConfig+0xb2>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a23      	ldr	r2, [pc, #140]	; (8001e18 <TIM_Base_SetConfig+0x13c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d108      	bne.n	8001da0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a0a      	ldr	r2, [pc, #40]	; (8001df0 <TIM_Base_SetConfig+0x114>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d003      	beq.n	8001dd4 <TIM_Base_SetConfig+0xf8>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a0c      	ldr	r2, [pc, #48]	; (8001e00 <TIM_Base_SetConfig+0x124>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d103      	bne.n	8001ddc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	691a      	ldr	r2, [r3, #16]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	615a      	str	r2, [r3, #20]
}
 8001de2:	bf00      	nop
 8001de4:	3714      	adds	r7, #20
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	40010000 	.word	0x40010000
 8001df4:	40000400 	.word	0x40000400
 8001df8:	40000800 	.word	0x40000800
 8001dfc:	40000c00 	.word	0x40000c00
 8001e00:	40010400 	.word	0x40010400
 8001e04:	40014000 	.word	0x40014000
 8001e08:	40014400 	.word	0x40014400
 8001e0c:	40014800 	.word	0x40014800
 8001e10:	40001800 	.word	0x40001800
 8001e14:	40001c00 	.word	0x40001c00
 8001e18:	40002000 	.word	0x40002000

08001e1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <__NVIC_SetPriority>:
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	6039      	str	r1, [r7, #0]
 8001e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	db0a      	blt.n	8001e6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	490c      	ldr	r1, [pc, #48]	; (8001e90 <__NVIC_SetPriority+0x4c>)
 8001e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e62:	0112      	lsls	r2, r2, #4
 8001e64:	b2d2      	uxtb	r2, r2
 8001e66:	440b      	add	r3, r1
 8001e68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e6c:	e00a      	b.n	8001e84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	4908      	ldr	r1, [pc, #32]	; (8001e94 <__NVIC_SetPriority+0x50>)
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	3b04      	subs	r3, #4
 8001e7c:	0112      	lsls	r2, r2, #4
 8001e7e:	b2d2      	uxtb	r2, r2
 8001e80:	440b      	add	r3, r1
 8001e82:	761a      	strb	r2, [r3, #24]
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	e000e100 	.word	0xe000e100
 8001e94:	e000ed00 	.word	0xe000ed00

08001e98 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001e9c:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <SysTick_Handler+0x1c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001ea0:	f001 fcfe 	bl	80038a0 <xTaskGetSchedulerState>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d001      	beq.n	8001eae <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001eaa:	f002 fae5 	bl	8004478 <xPortSysTickHandler>
  }
}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	e000e010 	.word	0xe000e010

08001eb8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	f06f 0004 	mvn.w	r0, #4
 8001ec2:	f7ff ffbf 	bl	8001e44 <__NVIC_SetPriority>
#endif
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ed2:	f3ef 8305 	mrs	r3, IPSR
 8001ed6:	603b      	str	r3, [r7, #0]
  return(result);
 8001ed8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001ede:	f06f 0305 	mvn.w	r3, #5
 8001ee2:	607b      	str	r3, [r7, #4]
 8001ee4:	e00c      	b.n	8001f00 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <osKernelInitialize+0x44>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d105      	bne.n	8001efa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001eee:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <osKernelInitialize+0x44>)
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	607b      	str	r3, [r7, #4]
 8001ef8:	e002      	b.n	8001f00 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001efa:	f04f 33ff 	mov.w	r3, #4294967295
 8001efe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001f00:	687b      	ldr	r3, [r7, #4]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	200000e0 	.word	0x200000e0

08001f14 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f1a:	f3ef 8305 	mrs	r3, IPSR
 8001f1e:	603b      	str	r3, [r7, #0]
  return(result);
 8001f20:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <osKernelStart+0x1a>
    stat = osErrorISR;
 8001f26:	f06f 0305 	mvn.w	r3, #5
 8001f2a:	607b      	str	r3, [r7, #4]
 8001f2c:	e010      	b.n	8001f50 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001f2e:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <osKernelStart+0x48>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d109      	bne.n	8001f4a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001f36:	f7ff ffbf 	bl	8001eb8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001f3a:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <osKernelStart+0x48>)
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001f40:	f001 f866 	bl	8003010 <vTaskStartScheduler>
      stat = osOK;
 8001f44:	2300      	movs	r3, #0
 8001f46:	607b      	str	r3, [r7, #4]
 8001f48:	e002      	b.n	8001f50 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001f50:	687b      	ldr	r3, [r7, #4]
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	200000e0 	.word	0x200000e0

08001f60 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08e      	sub	sp, #56	; 0x38
 8001f64:	af04      	add	r7, sp, #16
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f70:	f3ef 8305 	mrs	r3, IPSR
 8001f74:	617b      	str	r3, [r7, #20]
  return(result);
 8001f76:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d17e      	bne.n	800207a <osThreadNew+0x11a>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d07b      	beq.n	800207a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001f82:	2380      	movs	r3, #128	; 0x80
 8001f84:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001f86:	2318      	movs	r3, #24
 8001f88:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8001f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f92:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d045      	beq.n	8002026 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d002      	beq.n	8001fa8 <osThreadNew+0x48>
        name = attr->name;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d002      	beq.n	8001fb6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d008      	beq.n	8001fce <osThreadNew+0x6e>
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	2b38      	cmp	r3, #56	; 0x38
 8001fc0:	d805      	bhi.n	8001fce <osThreadNew+0x6e>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <osThreadNew+0x72>
        return (NULL);
 8001fce:	2300      	movs	r3, #0
 8001fd0:	e054      	b.n	800207c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	089b      	lsrs	r3, r3, #2
 8001fe0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00e      	beq.n	8002008 <osThreadNew+0xa8>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	2b5b      	cmp	r3, #91	; 0x5b
 8001ff0:	d90a      	bls.n	8002008 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d006      	beq.n	8002008 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d002      	beq.n	8002008 <osThreadNew+0xa8>
        mem = 1;
 8002002:	2301      	movs	r3, #1
 8002004:	61bb      	str	r3, [r7, #24]
 8002006:	e010      	b.n	800202a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d10c      	bne.n	800202a <osThreadNew+0xca>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d108      	bne.n	800202a <osThreadNew+0xca>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d104      	bne.n	800202a <osThreadNew+0xca>
          mem = 0;
 8002020:	2300      	movs	r3, #0
 8002022:	61bb      	str	r3, [r7, #24]
 8002024:	e001      	b.n	800202a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d110      	bne.n	8002052 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002038:	9202      	str	r2, [sp, #8]
 800203a:	9301      	str	r3, [sp, #4]
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	9300      	str	r3, [sp, #0]
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	6a3a      	ldr	r2, [r7, #32]
 8002044:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f000 fe0c 	bl	8002c64 <xTaskCreateStatic>
 800204c:	4603      	mov	r3, r0
 800204e:	613b      	str	r3, [r7, #16]
 8002050:	e013      	b.n	800207a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d110      	bne.n	800207a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002058:	6a3b      	ldr	r3, [r7, #32]
 800205a:	b29a      	uxth	r2, r3
 800205c:	f107 0310 	add.w	r3, r7, #16
 8002060:	9301      	str	r3, [sp, #4]
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800206a:	68f8      	ldr	r0, [r7, #12]
 800206c:	f000 fe57 	bl	8002d1e <xTaskCreate>
 8002070:	4603      	mov	r3, r0
 8002072:	2b01      	cmp	r3, #1
 8002074:	d001      	beq.n	800207a <osThreadNew+0x11a>
            hTask = NULL;
 8002076:	2300      	movs	r3, #0
 8002078:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800207a:	693b      	ldr	r3, [r7, #16]
}
 800207c:	4618      	mov	r0, r3
 800207e:	3728      	adds	r7, #40	; 0x28
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800208c:	f3ef 8305 	mrs	r3, IPSR
 8002090:	60bb      	str	r3, [r7, #8]
  return(result);
 8002092:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002094:	2b00      	cmp	r3, #0
 8002096:	d003      	beq.n	80020a0 <osDelay+0x1c>
    stat = osErrorISR;
 8002098:	f06f 0305 	mvn.w	r3, #5
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	e007      	b.n	80020b0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80020a0:	2300      	movs	r3, #0
 80020a2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d002      	beq.n	80020b0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 ff7c 	bl	8002fa8 <vTaskDelay>
    }
  }

  return (stat);
 80020b0:	68fb      	ldr	r3, [r7, #12]
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
	...

080020bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	4a07      	ldr	r2, [pc, #28]	; (80020e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80020cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	4a06      	ldr	r2, [pc, #24]	; (80020ec <vApplicationGetIdleTaskMemory+0x30>)
 80020d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2280      	movs	r2, #128	; 0x80
 80020d8:	601a      	str	r2, [r3, #0]
}
 80020da:	bf00      	nop
 80020dc:	3714      	adds	r7, #20
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	200000e4 	.word	0x200000e4
 80020ec:	20000140 	.word	0x20000140

080020f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	4a07      	ldr	r2, [pc, #28]	; (800211c <vApplicationGetTimerTaskMemory+0x2c>)
 8002100:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	4a06      	ldr	r2, [pc, #24]	; (8002120 <vApplicationGetTimerTaskMemory+0x30>)
 8002106:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800210e:	601a      	str	r2, [r3, #0]
}
 8002110:	bf00      	nop
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	20000340 	.word	0x20000340
 8002120:	2000039c 	.word	0x2000039c

08002124 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f103 0208 	add.w	r2, r3, #8
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f04f 32ff 	mov.w	r2, #4294967295
 800213c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f103 0208 	add.w	r2, r3, #8
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f103 0208 	add.w	r2, r3, #8
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800217e:	b480      	push	{r7}
 8002180:	b085      	sub	sp, #20
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
 8002186:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	1c5a      	adds	r2, r3, #1
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	601a      	str	r2, [r3, #0]
}
 80021ba:	bf00      	nop
 80021bc:	3714      	adds	r7, #20
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80021c6:	b480      	push	{r7}
 80021c8:	b085      	sub	sp, #20
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021dc:	d103      	bne.n	80021e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	e00c      	b.n	8002200 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	3308      	adds	r3, #8
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	e002      	b.n	80021f4 <vListInsert+0x2e>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d2f6      	bcs.n	80021ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	1c5a      	adds	r2, r3, #1
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	601a      	str	r2, [r3, #0]
}
 800222c:	bf00      	nop
 800222e:	3714      	adds	r7, #20
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	6892      	ldr	r2, [r2, #8]
 800224e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	6852      	ldr	r2, [r2, #4]
 8002258:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	429a      	cmp	r2, r3
 8002262:	d103      	bne.n	800226c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	1e5a      	subs	r2, r3, #1
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
}
 8002280:	4618      	mov	r0, r3
 8002282:	3714      	adds	r7, #20
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d10a      	bne.n	80022b6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80022a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022a4:	f383 8811 	msr	BASEPRI, r3
 80022a8:	f3bf 8f6f 	isb	sy
 80022ac:	f3bf 8f4f 	dsb	sy
 80022b0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80022b2:	bf00      	nop
 80022b4:	e7fe      	b.n	80022b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80022b6:	f002 f84d 	bl	8004354 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c2:	68f9      	ldr	r1, [r7, #12]
 80022c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022c6:	fb01 f303 	mul.w	r3, r1, r3
 80022ca:	441a      	add	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2200      	movs	r2, #0
 80022d4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e6:	3b01      	subs	r3, #1
 80022e8:	68f9      	ldr	r1, [r7, #12]
 80022ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022ec:	fb01 f303 	mul.w	r3, r1, r3
 80022f0:	441a      	add	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	22ff      	movs	r2, #255	; 0xff
 80022fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	22ff      	movs	r2, #255	; 0xff
 8002302:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d114      	bne.n	8002336 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d01a      	beq.n	800234a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	3310      	adds	r3, #16
 8002318:	4618      	mov	r0, r3
 800231a:	f001 f903 	bl	8003524 <xTaskRemoveFromEventList>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d012      	beq.n	800234a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002324:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <xQueueGenericReset+0xcc>)
 8002326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	f3bf 8f4f 	dsb	sy
 8002330:	f3bf 8f6f 	isb	sy
 8002334:	e009      	b.n	800234a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	3310      	adds	r3, #16
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff fef2 	bl	8002124 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	3324      	adds	r3, #36	; 0x24
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff feed 	bl	8002124 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800234a:	f002 f833 	bl	80043b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800234e:	2301      	movs	r3, #1
}
 8002350:	4618      	mov	r0, r3
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	e000ed04 	.word	0xe000ed04

0800235c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800235c:	b580      	push	{r7, lr}
 800235e:	b08e      	sub	sp, #56	; 0x38
 8002360:	af02      	add	r7, sp, #8
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
 8002368:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d10a      	bne.n	8002386 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002374:	f383 8811 	msr	BASEPRI, r3
 8002378:	f3bf 8f6f 	isb	sy
 800237c:	f3bf 8f4f 	dsb	sy
 8002380:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002382:	bf00      	nop
 8002384:	e7fe      	b.n	8002384 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d10a      	bne.n	80023a2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800238c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002390:	f383 8811 	msr	BASEPRI, r3
 8002394:	f3bf 8f6f 	isb	sy
 8002398:	f3bf 8f4f 	dsb	sy
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800239e:	bf00      	nop
 80023a0:	e7fe      	b.n	80023a0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d002      	beq.n	80023ae <xQueueGenericCreateStatic+0x52>
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <xQueueGenericCreateStatic+0x56>
 80023ae:	2301      	movs	r3, #1
 80023b0:	e000      	b.n	80023b4 <xQueueGenericCreateStatic+0x58>
 80023b2:	2300      	movs	r3, #0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d10a      	bne.n	80023ce <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80023b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023bc:	f383 8811 	msr	BASEPRI, r3
 80023c0:	f3bf 8f6f 	isb	sy
 80023c4:	f3bf 8f4f 	dsb	sy
 80023c8:	623b      	str	r3, [r7, #32]
}
 80023ca:	bf00      	nop
 80023cc:	e7fe      	b.n	80023cc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d102      	bne.n	80023da <xQueueGenericCreateStatic+0x7e>
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <xQueueGenericCreateStatic+0x82>
 80023da:	2301      	movs	r3, #1
 80023dc:	e000      	b.n	80023e0 <xQueueGenericCreateStatic+0x84>
 80023de:	2300      	movs	r3, #0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d10a      	bne.n	80023fa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80023e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023e8:	f383 8811 	msr	BASEPRI, r3
 80023ec:	f3bf 8f6f 	isb	sy
 80023f0:	f3bf 8f4f 	dsb	sy
 80023f4:	61fb      	str	r3, [r7, #28]
}
 80023f6:	bf00      	nop
 80023f8:	e7fe      	b.n	80023f8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80023fa:	2350      	movs	r3, #80	; 0x50
 80023fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	2b50      	cmp	r3, #80	; 0x50
 8002402:	d00a      	beq.n	800241a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002408:	f383 8811 	msr	BASEPRI, r3
 800240c:	f3bf 8f6f 	isb	sy
 8002410:	f3bf 8f4f 	dsb	sy
 8002414:	61bb      	str	r3, [r7, #24]
}
 8002416:	bf00      	nop
 8002418:	e7fe      	b.n	8002418 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800241a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00d      	beq.n	8002442 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002428:	2201      	movs	r2, #1
 800242a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800242e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002434:	9300      	str	r3, [sp, #0]
 8002436:	4613      	mov	r3, r2
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	68b9      	ldr	r1, [r7, #8]
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f000 f805 	bl	800244c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002444:	4618      	mov	r0, r3
 8002446:	3730      	adds	r7, #48	; 0x30
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
 8002458:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d103      	bne.n	8002468 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	601a      	str	r2, [r3, #0]
 8002466:	e002      	b.n	800246e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800247a:	2101      	movs	r1, #1
 800247c:	69b8      	ldr	r0, [r7, #24]
 800247e:	f7ff ff05 	bl	800228c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	78fa      	ldrb	r2, [r7, #3]
 8002486:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800248a:	bf00      	nop
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
	...

08002494 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b08e      	sub	sp, #56	; 0x38
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
 80024a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80024a2:	2300      	movs	r3, #0
 80024a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80024aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d10a      	bne.n	80024c6 <xQueueGenericSend+0x32>
	__asm volatile
 80024b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b4:	f383 8811 	msr	BASEPRI, r3
 80024b8:	f3bf 8f6f 	isb	sy
 80024bc:	f3bf 8f4f 	dsb	sy
 80024c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80024c2:	bf00      	nop
 80024c4:	e7fe      	b.n	80024c4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d103      	bne.n	80024d4 <xQueueGenericSend+0x40>
 80024cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d101      	bne.n	80024d8 <xQueueGenericSend+0x44>
 80024d4:	2301      	movs	r3, #1
 80024d6:	e000      	b.n	80024da <xQueueGenericSend+0x46>
 80024d8:	2300      	movs	r3, #0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d10a      	bne.n	80024f4 <xQueueGenericSend+0x60>
	__asm volatile
 80024de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024e2:	f383 8811 	msr	BASEPRI, r3
 80024e6:	f3bf 8f6f 	isb	sy
 80024ea:	f3bf 8f4f 	dsb	sy
 80024ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 80024f0:	bf00      	nop
 80024f2:	e7fe      	b.n	80024f2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d103      	bne.n	8002502 <xQueueGenericSend+0x6e>
 80024fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d101      	bne.n	8002506 <xQueueGenericSend+0x72>
 8002502:	2301      	movs	r3, #1
 8002504:	e000      	b.n	8002508 <xQueueGenericSend+0x74>
 8002506:	2300      	movs	r3, #0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d10a      	bne.n	8002522 <xQueueGenericSend+0x8e>
	__asm volatile
 800250c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002510:	f383 8811 	msr	BASEPRI, r3
 8002514:	f3bf 8f6f 	isb	sy
 8002518:	f3bf 8f4f 	dsb	sy
 800251c:	623b      	str	r3, [r7, #32]
}
 800251e:	bf00      	nop
 8002520:	e7fe      	b.n	8002520 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002522:	f001 f9bd 	bl	80038a0 <xTaskGetSchedulerState>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d102      	bne.n	8002532 <xQueueGenericSend+0x9e>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <xQueueGenericSend+0xa2>
 8002532:	2301      	movs	r3, #1
 8002534:	e000      	b.n	8002538 <xQueueGenericSend+0xa4>
 8002536:	2300      	movs	r3, #0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10a      	bne.n	8002552 <xQueueGenericSend+0xbe>
	__asm volatile
 800253c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002540:	f383 8811 	msr	BASEPRI, r3
 8002544:	f3bf 8f6f 	isb	sy
 8002548:	f3bf 8f4f 	dsb	sy
 800254c:	61fb      	str	r3, [r7, #28]
}
 800254e:	bf00      	nop
 8002550:	e7fe      	b.n	8002550 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002552:	f001 feff 	bl	8004354 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002558:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800255a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800255e:	429a      	cmp	r2, r3
 8002560:	d302      	bcc.n	8002568 <xQueueGenericSend+0xd4>
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	2b02      	cmp	r3, #2
 8002566:	d129      	bne.n	80025bc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	68b9      	ldr	r1, [r7, #8]
 800256c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800256e:	f000 fa0b 	bl	8002988 <prvCopyDataToQueue>
 8002572:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002578:	2b00      	cmp	r3, #0
 800257a:	d010      	beq.n	800259e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800257c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800257e:	3324      	adds	r3, #36	; 0x24
 8002580:	4618      	mov	r0, r3
 8002582:	f000 ffcf 	bl	8003524 <xTaskRemoveFromEventList>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d013      	beq.n	80025b4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800258c:	4b3f      	ldr	r3, [pc, #252]	; (800268c <xQueueGenericSend+0x1f8>)
 800258e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	f3bf 8f4f 	dsb	sy
 8002598:	f3bf 8f6f 	isb	sy
 800259c:	e00a      	b.n	80025b4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800259e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d007      	beq.n	80025b4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80025a4:	4b39      	ldr	r3, [pc, #228]	; (800268c <xQueueGenericSend+0x1f8>)
 80025a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	f3bf 8f4f 	dsb	sy
 80025b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80025b4:	f001 fefe 	bl	80043b4 <vPortExitCritical>
				return pdPASS;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e063      	b.n	8002684 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d103      	bne.n	80025ca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80025c2:	f001 fef7 	bl	80043b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80025c6:	2300      	movs	r3, #0
 80025c8:	e05c      	b.n	8002684 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80025ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d106      	bne.n	80025de <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80025d0:	f107 0314 	add.w	r3, r7, #20
 80025d4:	4618      	mov	r0, r3
 80025d6:	f001 f809 	bl	80035ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80025da:	2301      	movs	r3, #1
 80025dc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80025de:	f001 fee9 	bl	80043b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80025e2:	f000 fd7b 	bl	80030dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80025e6:	f001 feb5 	bl	8004354 <vPortEnterCritical>
 80025ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025f0:	b25b      	sxtb	r3, r3
 80025f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f6:	d103      	bne.n	8002600 <xQueueGenericSend+0x16c>
 80025f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002602:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002606:	b25b      	sxtb	r3, r3
 8002608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260c:	d103      	bne.n	8002616 <xQueueGenericSend+0x182>
 800260e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002616:	f001 fecd 	bl	80043b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800261a:	1d3a      	adds	r2, r7, #4
 800261c:	f107 0314 	add.w	r3, r7, #20
 8002620:	4611      	mov	r1, r2
 8002622:	4618      	mov	r0, r3
 8002624:	f000 fff8 	bl	8003618 <xTaskCheckForTimeOut>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d124      	bne.n	8002678 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800262e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002630:	f000 faa2 	bl	8002b78 <prvIsQueueFull>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d018      	beq.n	800266c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800263a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800263c:	3310      	adds	r3, #16
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	4611      	mov	r1, r2
 8002642:	4618      	mov	r0, r3
 8002644:	f000 ff1e 	bl	8003484 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002648:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800264a:	f000 fa2d 	bl	8002aa8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800264e:	f000 fd53 	bl	80030f8 <xTaskResumeAll>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	f47f af7c 	bne.w	8002552 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800265a:	4b0c      	ldr	r3, [pc, #48]	; (800268c <xQueueGenericSend+0x1f8>)
 800265c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	f3bf 8f4f 	dsb	sy
 8002666:	f3bf 8f6f 	isb	sy
 800266a:	e772      	b.n	8002552 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800266c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800266e:	f000 fa1b 	bl	8002aa8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002672:	f000 fd41 	bl	80030f8 <xTaskResumeAll>
 8002676:	e76c      	b.n	8002552 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002678:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800267a:	f000 fa15 	bl	8002aa8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800267e:	f000 fd3b 	bl	80030f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002682:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002684:	4618      	mov	r0, r3
 8002686:	3738      	adds	r7, #56	; 0x38
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	e000ed04 	.word	0xe000ed04

08002690 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b090      	sub	sp, #64	; 0x40
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
 800269c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80026a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d10a      	bne.n	80026be <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80026a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ac:	f383 8811 	msr	BASEPRI, r3
 80026b0:	f3bf 8f6f 	isb	sy
 80026b4:	f3bf 8f4f 	dsb	sy
 80026b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80026ba:	bf00      	nop
 80026bc:	e7fe      	b.n	80026bc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d103      	bne.n	80026cc <xQueueGenericSendFromISR+0x3c>
 80026c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d101      	bne.n	80026d0 <xQueueGenericSendFromISR+0x40>
 80026cc:	2301      	movs	r3, #1
 80026ce:	e000      	b.n	80026d2 <xQueueGenericSendFromISR+0x42>
 80026d0:	2300      	movs	r3, #0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10a      	bne.n	80026ec <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80026d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026da:	f383 8811 	msr	BASEPRI, r3
 80026de:	f3bf 8f6f 	isb	sy
 80026e2:	f3bf 8f4f 	dsb	sy
 80026e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80026e8:	bf00      	nop
 80026ea:	e7fe      	b.n	80026ea <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d103      	bne.n	80026fa <xQueueGenericSendFromISR+0x6a>
 80026f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d101      	bne.n	80026fe <xQueueGenericSendFromISR+0x6e>
 80026fa:	2301      	movs	r3, #1
 80026fc:	e000      	b.n	8002700 <xQueueGenericSendFromISR+0x70>
 80026fe:	2300      	movs	r3, #0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d10a      	bne.n	800271a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002708:	f383 8811 	msr	BASEPRI, r3
 800270c:	f3bf 8f6f 	isb	sy
 8002710:	f3bf 8f4f 	dsb	sy
 8002714:	623b      	str	r3, [r7, #32]
}
 8002716:	bf00      	nop
 8002718:	e7fe      	b.n	8002718 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800271a:	f001 fefd 	bl	8004518 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800271e:	f3ef 8211 	mrs	r2, BASEPRI
 8002722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002726:	f383 8811 	msr	BASEPRI, r3
 800272a:	f3bf 8f6f 	isb	sy
 800272e:	f3bf 8f4f 	dsb	sy
 8002732:	61fa      	str	r2, [r7, #28]
 8002734:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002736:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002738:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800273a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800273e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002742:	429a      	cmp	r2, r3
 8002744:	d302      	bcc.n	800274c <xQueueGenericSendFromISR+0xbc>
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	2b02      	cmp	r3, #2
 800274a:	d12f      	bne.n	80027ac <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800274c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800274e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800275a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	68b9      	ldr	r1, [r7, #8]
 8002760:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002762:	f000 f911 	bl	8002988 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002766:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800276a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800276e:	d112      	bne.n	8002796 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002774:	2b00      	cmp	r3, #0
 8002776:	d016      	beq.n	80027a6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800277a:	3324      	adds	r3, #36	; 0x24
 800277c:	4618      	mov	r0, r3
 800277e:	f000 fed1 	bl	8003524 <xTaskRemoveFromEventList>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00e      	beq.n	80027a6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00b      	beq.n	80027a6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	e007      	b.n	80027a6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002796:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800279a:	3301      	adds	r3, #1
 800279c:	b2db      	uxtb	r3, r3
 800279e:	b25a      	sxtb	r2, r3
 80027a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80027a6:	2301      	movs	r3, #1
 80027a8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80027aa:	e001      	b.n	80027b0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027b2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80027ba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80027bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3740      	adds	r7, #64	; 0x40
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
	...

080027c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b08c      	sub	sp, #48	; 0x30
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80027d4:	2300      	movs	r3, #0
 80027d6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80027dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d10a      	bne.n	80027f8 <xQueueReceive+0x30>
	__asm volatile
 80027e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e6:	f383 8811 	msr	BASEPRI, r3
 80027ea:	f3bf 8f6f 	isb	sy
 80027ee:	f3bf 8f4f 	dsb	sy
 80027f2:	623b      	str	r3, [r7, #32]
}
 80027f4:	bf00      	nop
 80027f6:	e7fe      	b.n	80027f6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d103      	bne.n	8002806 <xQueueReceive+0x3e>
 80027fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <xQueueReceive+0x42>
 8002806:	2301      	movs	r3, #1
 8002808:	e000      	b.n	800280c <xQueueReceive+0x44>
 800280a:	2300      	movs	r3, #0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10a      	bne.n	8002826 <xQueueReceive+0x5e>
	__asm volatile
 8002810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002814:	f383 8811 	msr	BASEPRI, r3
 8002818:	f3bf 8f6f 	isb	sy
 800281c:	f3bf 8f4f 	dsb	sy
 8002820:	61fb      	str	r3, [r7, #28]
}
 8002822:	bf00      	nop
 8002824:	e7fe      	b.n	8002824 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002826:	f001 f83b 	bl	80038a0 <xTaskGetSchedulerState>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d102      	bne.n	8002836 <xQueueReceive+0x6e>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <xQueueReceive+0x72>
 8002836:	2301      	movs	r3, #1
 8002838:	e000      	b.n	800283c <xQueueReceive+0x74>
 800283a:	2300      	movs	r3, #0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d10a      	bne.n	8002856 <xQueueReceive+0x8e>
	__asm volatile
 8002840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002844:	f383 8811 	msr	BASEPRI, r3
 8002848:	f3bf 8f6f 	isb	sy
 800284c:	f3bf 8f4f 	dsb	sy
 8002850:	61bb      	str	r3, [r7, #24]
}
 8002852:	bf00      	nop
 8002854:	e7fe      	b.n	8002854 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002856:	f001 fd7d 	bl	8004354 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800285a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800285e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	2b00      	cmp	r3, #0
 8002864:	d01f      	beq.n	80028a6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002866:	68b9      	ldr	r1, [r7, #8]
 8002868:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800286a:	f000 f8f7 	bl	8002a5c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	1e5a      	subs	r2, r3, #1
 8002872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002874:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00f      	beq.n	800289e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800287e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002880:	3310      	adds	r3, #16
 8002882:	4618      	mov	r0, r3
 8002884:	f000 fe4e 	bl	8003524 <xTaskRemoveFromEventList>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d007      	beq.n	800289e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800288e:	4b3d      	ldr	r3, [pc, #244]	; (8002984 <xQueueReceive+0x1bc>)
 8002890:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	f3bf 8f4f 	dsb	sy
 800289a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800289e:	f001 fd89 	bl	80043b4 <vPortExitCritical>
				return pdPASS;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e069      	b.n	800297a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d103      	bne.n	80028b4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80028ac:	f001 fd82 	bl	80043b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80028b0:	2300      	movs	r3, #0
 80028b2:	e062      	b.n	800297a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80028b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d106      	bne.n	80028c8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80028ba:	f107 0310 	add.w	r3, r7, #16
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 fe94 	bl	80035ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80028c4:	2301      	movs	r3, #1
 80028c6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80028c8:	f001 fd74 	bl	80043b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80028cc:	f000 fc06 	bl	80030dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80028d0:	f001 fd40 	bl	8004354 <vPortEnterCritical>
 80028d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028da:	b25b      	sxtb	r3, r3
 80028dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e0:	d103      	bne.n	80028ea <xQueueReceive+0x122>
 80028e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028f0:	b25b      	sxtb	r3, r3
 80028f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f6:	d103      	bne.n	8002900 <xQueueReceive+0x138>
 80028f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002900:	f001 fd58 	bl	80043b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002904:	1d3a      	adds	r2, r7, #4
 8002906:	f107 0310 	add.w	r3, r7, #16
 800290a:	4611      	mov	r1, r2
 800290c:	4618      	mov	r0, r3
 800290e:	f000 fe83 	bl	8003618 <xTaskCheckForTimeOut>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d123      	bne.n	8002960 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002918:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800291a:	f000 f917 	bl	8002b4c <prvIsQueueEmpty>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d017      	beq.n	8002954 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002926:	3324      	adds	r3, #36	; 0x24
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	4611      	mov	r1, r2
 800292c:	4618      	mov	r0, r3
 800292e:	f000 fda9 	bl	8003484 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002932:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002934:	f000 f8b8 	bl	8002aa8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002938:	f000 fbde 	bl	80030f8 <xTaskResumeAll>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d189      	bne.n	8002856 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002942:	4b10      	ldr	r3, [pc, #64]	; (8002984 <xQueueReceive+0x1bc>)
 8002944:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	f3bf 8f4f 	dsb	sy
 800294e:	f3bf 8f6f 	isb	sy
 8002952:	e780      	b.n	8002856 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002954:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002956:	f000 f8a7 	bl	8002aa8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800295a:	f000 fbcd 	bl	80030f8 <xTaskResumeAll>
 800295e:	e77a      	b.n	8002856 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002960:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002962:	f000 f8a1 	bl	8002aa8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002966:	f000 fbc7 	bl	80030f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800296a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800296c:	f000 f8ee 	bl	8002b4c <prvIsQueueEmpty>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	f43f af6f 	beq.w	8002856 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002978:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800297a:	4618      	mov	r0, r3
 800297c:	3730      	adds	r7, #48	; 0x30
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	e000ed04 	.word	0xe000ed04

08002988 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002994:	2300      	movs	r3, #0
 8002996:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800299c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10d      	bne.n	80029c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d14d      	bne.n	8002a4a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f000 ff92 	bl	80038dc <xTaskPriorityDisinherit>
 80029b8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	609a      	str	r2, [r3, #8]
 80029c0:	e043      	b.n	8002a4a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d119      	bne.n	80029fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6858      	ldr	r0, [r3, #4]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d0:	461a      	mov	r2, r3
 80029d2:	68b9      	ldr	r1, [r7, #8]
 80029d4:	f002 fa3b 	bl	8004e4e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e0:	441a      	add	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	685a      	ldr	r2, [r3, #4]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d32b      	bcc.n	8002a4a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	605a      	str	r2, [r3, #4]
 80029fa:	e026      	b.n	8002a4a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	68d8      	ldr	r0, [r3, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a04:	461a      	mov	r2, r3
 8002a06:	68b9      	ldr	r1, [r7, #8]
 8002a08:	f002 fa21 	bl	8004e4e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	68da      	ldr	r2, [r3, #12]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a14:	425b      	negs	r3, r3
 8002a16:	441a      	add	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	68da      	ldr	r2, [r3, #12]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d207      	bcs.n	8002a38 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	425b      	negs	r3, r3
 8002a32:	441a      	add	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d105      	bne.n	8002a4a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d002      	beq.n	8002a4a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	3b01      	subs	r3, #1
 8002a48:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1c5a      	adds	r2, r3, #1
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002a52:	697b      	ldr	r3, [r7, #20]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3718      	adds	r7, #24
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d018      	beq.n	8002aa0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68da      	ldr	r2, [r3, #12]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	441a      	add	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	68da      	ldr	r2, [r3, #12]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d303      	bcc.n	8002a90 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	68d9      	ldr	r1, [r3, #12]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a98:	461a      	mov	r2, r3
 8002a9a:	6838      	ldr	r0, [r7, #0]
 8002a9c:	f002 f9d7 	bl	8004e4e <memcpy>
	}
}
 8002aa0:	bf00      	nop
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002ab0:	f001 fc50 	bl	8004354 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002aba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002abc:	e011      	b.n	8002ae2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d012      	beq.n	8002aec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	3324      	adds	r3, #36	; 0x24
 8002aca:	4618      	mov	r0, r3
 8002acc:	f000 fd2a 	bl	8003524 <xTaskRemoveFromEventList>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002ad6:	f000 fe01 	bl	80036dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002ada:	7bfb      	ldrb	r3, [r7, #15]
 8002adc:	3b01      	subs	r3, #1
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	dce9      	bgt.n	8002abe <prvUnlockQueue+0x16>
 8002aea:	e000      	b.n	8002aee <prvUnlockQueue+0x46>
					break;
 8002aec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	22ff      	movs	r2, #255	; 0xff
 8002af2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002af6:	f001 fc5d 	bl	80043b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002afa:	f001 fc2b 	bl	8004354 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b04:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b06:	e011      	b.n	8002b2c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d012      	beq.n	8002b36 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3310      	adds	r3, #16
 8002b14:	4618      	mov	r0, r3
 8002b16:	f000 fd05 	bl	8003524 <xTaskRemoveFromEventList>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002b20:	f000 fddc 	bl	80036dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002b24:	7bbb      	ldrb	r3, [r7, #14]
 8002b26:	3b01      	subs	r3, #1
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	dce9      	bgt.n	8002b08 <prvUnlockQueue+0x60>
 8002b34:	e000      	b.n	8002b38 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002b36:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	22ff      	movs	r2, #255	; 0xff
 8002b3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002b40:	f001 fc38 	bl	80043b4 <vPortExitCritical>
}
 8002b44:	bf00      	nop
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002b54:	f001 fbfe 	bl	8004354 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d102      	bne.n	8002b66 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002b60:	2301      	movs	r3, #1
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	e001      	b.n	8002b6a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002b66:	2300      	movs	r3, #0
 8002b68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002b6a:	f001 fc23 	bl	80043b4 <vPortExitCritical>

	return xReturn;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002b80:	f001 fbe8 	bl	8004354 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d102      	bne.n	8002b96 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002b90:	2301      	movs	r3, #1
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	e001      	b.n	8002b9a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002b96:	2300      	movs	r3, #0
 8002b98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002b9a:	f001 fc0b 	bl	80043b4 <vPortExitCritical>

	return xReturn;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	e014      	b.n	8002be2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002bb8:	4a0f      	ldr	r2, [pc, #60]	; (8002bf8 <vQueueAddToRegistry+0x50>)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d10b      	bne.n	8002bdc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002bc4:	490c      	ldr	r1, [pc, #48]	; (8002bf8 <vQueueAddToRegistry+0x50>)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002bce:	4a0a      	ldr	r2, [pc, #40]	; (8002bf8 <vQueueAddToRegistry+0x50>)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	4413      	add	r3, r2
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002bda:	e006      	b.n	8002bea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	3301      	adds	r3, #1
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2b07      	cmp	r3, #7
 8002be6:	d9e7      	bls.n	8002bb8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002be8:	bf00      	nop
 8002bea:	bf00      	nop
 8002bec:	3714      	adds	r7, #20
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	2000079c 	.word	0x2000079c

08002bfc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002c0c:	f001 fba2 	bl	8004354 <vPortEnterCritical>
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c16:	b25b      	sxtb	r3, r3
 8002c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c1c:	d103      	bne.n	8002c26 <vQueueWaitForMessageRestricted+0x2a>
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c2c:	b25b      	sxtb	r3, r3
 8002c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c32:	d103      	bne.n	8002c3c <vQueueWaitForMessageRestricted+0x40>
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c3c:	f001 fbba 	bl	80043b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d106      	bne.n	8002c56 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	3324      	adds	r3, #36	; 0x24
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	68b9      	ldr	r1, [r7, #8]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f000 fc3b 	bl	80034cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002c56:	6978      	ldr	r0, [r7, #20]
 8002c58:	f7ff ff26 	bl	8002aa8 <prvUnlockQueue>
	}
 8002c5c:	bf00      	nop
 8002c5e:	3718      	adds	r7, #24
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b08e      	sub	sp, #56	; 0x38
 8002c68:	af04      	add	r7, sp, #16
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
 8002c70:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d10a      	bne.n	8002c8e <xTaskCreateStatic+0x2a>
	__asm volatile
 8002c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c7c:	f383 8811 	msr	BASEPRI, r3
 8002c80:	f3bf 8f6f 	isb	sy
 8002c84:	f3bf 8f4f 	dsb	sy
 8002c88:	623b      	str	r3, [r7, #32]
}
 8002c8a:	bf00      	nop
 8002c8c:	e7fe      	b.n	8002c8c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d10a      	bne.n	8002caa <xTaskCreateStatic+0x46>
	__asm volatile
 8002c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c98:	f383 8811 	msr	BASEPRI, r3
 8002c9c:	f3bf 8f6f 	isb	sy
 8002ca0:	f3bf 8f4f 	dsb	sy
 8002ca4:	61fb      	str	r3, [r7, #28]
}
 8002ca6:	bf00      	nop
 8002ca8:	e7fe      	b.n	8002ca8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002caa:	235c      	movs	r3, #92	; 0x5c
 8002cac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	2b5c      	cmp	r3, #92	; 0x5c
 8002cb2:	d00a      	beq.n	8002cca <xTaskCreateStatic+0x66>
	__asm volatile
 8002cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb8:	f383 8811 	msr	BASEPRI, r3
 8002cbc:	f3bf 8f6f 	isb	sy
 8002cc0:	f3bf 8f4f 	dsb	sy
 8002cc4:	61bb      	str	r3, [r7, #24]
}
 8002cc6:	bf00      	nop
 8002cc8:	e7fe      	b.n	8002cc8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002cca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d01e      	beq.n	8002d10 <xTaskCreateStatic+0xac>
 8002cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d01b      	beq.n	8002d10 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cda:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ce0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	2202      	movs	r2, #2
 8002ce6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002cea:	2300      	movs	r3, #0
 8002cec:	9303      	str	r3, [sp, #12]
 8002cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf0:	9302      	str	r3, [sp, #8]
 8002cf2:	f107 0314 	add.w	r3, r7, #20
 8002cf6:	9301      	str	r3, [sp, #4]
 8002cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	68b9      	ldr	r1, [r7, #8]
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f000 f850 	bl	8002da8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d0a:	f000 f8dd 	bl	8002ec8 <prvAddNewTaskToReadyList>
 8002d0e:	e001      	b.n	8002d14 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002d10:	2300      	movs	r3, #0
 8002d12:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002d14:	697b      	ldr	r3, [r7, #20]
	}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3728      	adds	r7, #40	; 0x28
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b08c      	sub	sp, #48	; 0x30
 8002d22:	af04      	add	r7, sp, #16
 8002d24:	60f8      	str	r0, [r7, #12]
 8002d26:	60b9      	str	r1, [r7, #8]
 8002d28:	603b      	str	r3, [r7, #0]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002d2e:	88fb      	ldrh	r3, [r7, #6]
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	4618      	mov	r0, r3
 8002d34:	f001 fc30 	bl	8004598 <pvPortMalloc>
 8002d38:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00e      	beq.n	8002d5e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002d40:	205c      	movs	r0, #92	; 0x5c
 8002d42:	f001 fc29 	bl	8004598 <pvPortMalloc>
 8002d46:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	631a      	str	r2, [r3, #48]	; 0x30
 8002d54:	e005      	b.n	8002d62 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002d56:	6978      	ldr	r0, [r7, #20]
 8002d58:	f001 fcea 	bl	8004730 <vPortFree>
 8002d5c:	e001      	b.n	8002d62 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d017      	beq.n	8002d98 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002d70:	88fa      	ldrh	r2, [r7, #6]
 8002d72:	2300      	movs	r3, #0
 8002d74:	9303      	str	r3, [sp, #12]
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	9302      	str	r3, [sp, #8]
 8002d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d7c:	9301      	str	r3, [sp, #4]
 8002d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d80:	9300      	str	r3, [sp, #0]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	68b9      	ldr	r1, [r7, #8]
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f000 f80e 	bl	8002da8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d8c:	69f8      	ldr	r0, [r7, #28]
 8002d8e:	f000 f89b 	bl	8002ec8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002d92:	2301      	movs	r3, #1
 8002d94:	61bb      	str	r3, [r7, #24]
 8002d96:	e002      	b.n	8002d9e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d98:	f04f 33ff 	mov.w	r3, #4294967295
 8002d9c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002d9e:	69bb      	ldr	r3, [r7, #24]
	}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3720      	adds	r7, #32
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b088      	sub	sp, #32
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
 8002db4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	21a5      	movs	r1, #165	; 0xa5
 8002dc2:	f001 ffc9 	bl	8004d58 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4413      	add	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	f023 0307 	bic.w	r3, r3, #7
 8002dde:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	f003 0307 	and.w	r3, r3, #7
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00a      	beq.n	8002e00 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dee:	f383 8811 	msr	BASEPRI, r3
 8002df2:	f3bf 8f6f 	isb	sy
 8002df6:	f3bf 8f4f 	dsb	sy
 8002dfa:	617b      	str	r3, [r7, #20]
}
 8002dfc:	bf00      	nop
 8002dfe:	e7fe      	b.n	8002dfe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d01f      	beq.n	8002e46 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e06:	2300      	movs	r3, #0
 8002e08:	61fb      	str	r3, [r7, #28]
 8002e0a:	e012      	b.n	8002e32 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e0c:	68ba      	ldr	r2, [r7, #8]
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	4413      	add	r3, r2
 8002e12:	7819      	ldrb	r1, [r3, #0]
 8002e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	4413      	add	r3, r2
 8002e1a:	3334      	adds	r3, #52	; 0x34
 8002e1c:	460a      	mov	r2, r1
 8002e1e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002e20:	68ba      	ldr	r2, [r7, #8]
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	4413      	add	r3, r2
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d006      	beq.n	8002e3a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	61fb      	str	r3, [r7, #28]
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	2b0f      	cmp	r3, #15
 8002e36:	d9e9      	bls.n	8002e0c <prvInitialiseNewTask+0x64>
 8002e38:	e000      	b.n	8002e3c <prvInitialiseNewTask+0x94>
			{
				break;
 8002e3a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e44:	e003      	b.n	8002e4e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e50:	2b37      	cmp	r3, #55	; 0x37
 8002e52:	d901      	bls.n	8002e58 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002e54:	2337      	movs	r3, #55	; 0x37
 8002e56:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e5c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e62:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e66:	2200      	movs	r2, #0
 8002e68:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7ff f978 	bl	8002164 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e76:	3318      	adds	r3, #24
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff f973 	bl	8002164 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e82:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e86:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e92:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e96:	2200      	movs	r2, #0
 8002e98:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	68f9      	ldr	r1, [r7, #12]
 8002ea6:	69b8      	ldr	r0, [r7, #24]
 8002ea8:	f001 f928 	bl	80040fc <pxPortInitialiseStack>
 8002eac:	4602      	mov	r2, r0
 8002eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d002      	beq.n	8002ebe <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ebc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ebe:	bf00      	nop
 8002ec0:	3720      	adds	r7, #32
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
	...

08002ec8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002ed0:	f001 fa40 	bl	8004354 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002ed4:	4b2d      	ldr	r3, [pc, #180]	; (8002f8c <prvAddNewTaskToReadyList+0xc4>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	4a2c      	ldr	r2, [pc, #176]	; (8002f8c <prvAddNewTaskToReadyList+0xc4>)
 8002edc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002ede:	4b2c      	ldr	r3, [pc, #176]	; (8002f90 <prvAddNewTaskToReadyList+0xc8>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d109      	bne.n	8002efa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002ee6:	4a2a      	ldr	r2, [pc, #168]	; (8002f90 <prvAddNewTaskToReadyList+0xc8>)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002eec:	4b27      	ldr	r3, [pc, #156]	; (8002f8c <prvAddNewTaskToReadyList+0xc4>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d110      	bne.n	8002f16 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002ef4:	f000 fc16 	bl	8003724 <prvInitialiseTaskLists>
 8002ef8:	e00d      	b.n	8002f16 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002efa:	4b26      	ldr	r3, [pc, #152]	; (8002f94 <prvAddNewTaskToReadyList+0xcc>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d109      	bne.n	8002f16 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002f02:	4b23      	ldr	r3, [pc, #140]	; (8002f90 <prvAddNewTaskToReadyList+0xc8>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d802      	bhi.n	8002f16 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002f10:	4a1f      	ldr	r2, [pc, #124]	; (8002f90 <prvAddNewTaskToReadyList+0xc8>)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002f16:	4b20      	ldr	r3, [pc, #128]	; (8002f98 <prvAddNewTaskToReadyList+0xd0>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	4a1e      	ldr	r2, [pc, #120]	; (8002f98 <prvAddNewTaskToReadyList+0xd0>)
 8002f1e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002f20:	4b1d      	ldr	r3, [pc, #116]	; (8002f98 <prvAddNewTaskToReadyList+0xd0>)
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f2c:	4b1b      	ldr	r3, [pc, #108]	; (8002f9c <prvAddNewTaskToReadyList+0xd4>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d903      	bls.n	8002f3c <prvAddNewTaskToReadyList+0x74>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f38:	4a18      	ldr	r2, [pc, #96]	; (8002f9c <prvAddNewTaskToReadyList+0xd4>)
 8002f3a:	6013      	str	r3, [r2, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f40:	4613      	mov	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4a15      	ldr	r2, [pc, #84]	; (8002fa0 <prvAddNewTaskToReadyList+0xd8>)
 8002f4a:	441a      	add	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	3304      	adds	r3, #4
 8002f50:	4619      	mov	r1, r3
 8002f52:	4610      	mov	r0, r2
 8002f54:	f7ff f913 	bl	800217e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002f58:	f001 fa2c 	bl	80043b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002f5c:	4b0d      	ldr	r3, [pc, #52]	; (8002f94 <prvAddNewTaskToReadyList+0xcc>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00e      	beq.n	8002f82 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002f64:	4b0a      	ldr	r3, [pc, #40]	; (8002f90 <prvAddNewTaskToReadyList+0xc8>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d207      	bcs.n	8002f82 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002f72:	4b0c      	ldr	r3, [pc, #48]	; (8002fa4 <prvAddNewTaskToReadyList+0xdc>)
 8002f74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	f3bf 8f4f 	dsb	sy
 8002f7e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f82:	bf00      	nop
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	20000cb0 	.word	0x20000cb0
 8002f90:	200007dc 	.word	0x200007dc
 8002f94:	20000cbc 	.word	0x20000cbc
 8002f98:	20000ccc 	.word	0x20000ccc
 8002f9c:	20000cb8 	.word	0x20000cb8
 8002fa0:	200007e0 	.word	0x200007e0
 8002fa4:	e000ed04 	.word	0xe000ed04

08002fa8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d017      	beq.n	8002fea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002fba:	4b13      	ldr	r3, [pc, #76]	; (8003008 <vTaskDelay+0x60>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00a      	beq.n	8002fd8 <vTaskDelay+0x30>
	__asm volatile
 8002fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc6:	f383 8811 	msr	BASEPRI, r3
 8002fca:	f3bf 8f6f 	isb	sy
 8002fce:	f3bf 8f4f 	dsb	sy
 8002fd2:	60bb      	str	r3, [r7, #8]
}
 8002fd4:	bf00      	nop
 8002fd6:	e7fe      	b.n	8002fd6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002fd8:	f000 f880 	bl	80030dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002fdc:	2100      	movs	r1, #0
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 fcea 	bl	80039b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002fe4:	f000 f888 	bl	80030f8 <xTaskResumeAll>
 8002fe8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d107      	bne.n	8003000 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002ff0:	4b06      	ldr	r3, [pc, #24]	; (800300c <vTaskDelay+0x64>)
 8002ff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	f3bf 8f4f 	dsb	sy
 8002ffc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003000:	bf00      	nop
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	20000cd8 	.word	0x20000cd8
 800300c:	e000ed04 	.word	0xe000ed04

08003010 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b08a      	sub	sp, #40	; 0x28
 8003014:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003016:	2300      	movs	r3, #0
 8003018:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800301a:	2300      	movs	r3, #0
 800301c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800301e:	463a      	mov	r2, r7
 8003020:	1d39      	adds	r1, r7, #4
 8003022:	f107 0308 	add.w	r3, r7, #8
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff f848 	bl	80020bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800302c:	6839      	ldr	r1, [r7, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68ba      	ldr	r2, [r7, #8]
 8003032:	9202      	str	r2, [sp, #8]
 8003034:	9301      	str	r3, [sp, #4]
 8003036:	2300      	movs	r3, #0
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	2300      	movs	r3, #0
 800303c:	460a      	mov	r2, r1
 800303e:	4921      	ldr	r1, [pc, #132]	; (80030c4 <vTaskStartScheduler+0xb4>)
 8003040:	4821      	ldr	r0, [pc, #132]	; (80030c8 <vTaskStartScheduler+0xb8>)
 8003042:	f7ff fe0f 	bl	8002c64 <xTaskCreateStatic>
 8003046:	4603      	mov	r3, r0
 8003048:	4a20      	ldr	r2, [pc, #128]	; (80030cc <vTaskStartScheduler+0xbc>)
 800304a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800304c:	4b1f      	ldr	r3, [pc, #124]	; (80030cc <vTaskStartScheduler+0xbc>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d002      	beq.n	800305a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003054:	2301      	movs	r3, #1
 8003056:	617b      	str	r3, [r7, #20]
 8003058:	e001      	b.n	800305e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800305a:	2300      	movs	r3, #0
 800305c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d102      	bne.n	800306a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003064:	f000 fcfc 	bl	8003a60 <xTimerCreateTimerTask>
 8003068:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d116      	bne.n	800309e <vTaskStartScheduler+0x8e>
	__asm volatile
 8003070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003074:	f383 8811 	msr	BASEPRI, r3
 8003078:	f3bf 8f6f 	isb	sy
 800307c:	f3bf 8f4f 	dsb	sy
 8003080:	613b      	str	r3, [r7, #16]
}
 8003082:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003084:	4b12      	ldr	r3, [pc, #72]	; (80030d0 <vTaskStartScheduler+0xc0>)
 8003086:	f04f 32ff 	mov.w	r2, #4294967295
 800308a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800308c:	4b11      	ldr	r3, [pc, #68]	; (80030d4 <vTaskStartScheduler+0xc4>)
 800308e:	2201      	movs	r2, #1
 8003090:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003092:	4b11      	ldr	r3, [pc, #68]	; (80030d8 <vTaskStartScheduler+0xc8>)
 8003094:	2200      	movs	r2, #0
 8003096:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003098:	f001 f8ba 	bl	8004210 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800309c:	e00e      	b.n	80030bc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a4:	d10a      	bne.n	80030bc <vTaskStartScheduler+0xac>
	__asm volatile
 80030a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030aa:	f383 8811 	msr	BASEPRI, r3
 80030ae:	f3bf 8f6f 	isb	sy
 80030b2:	f3bf 8f4f 	dsb	sy
 80030b6:	60fb      	str	r3, [r7, #12]
}
 80030b8:	bf00      	nop
 80030ba:	e7fe      	b.n	80030ba <vTaskStartScheduler+0xaa>
}
 80030bc:	bf00      	nop
 80030be:	3718      	adds	r7, #24
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	08005318 	.word	0x08005318
 80030c8:	080036f5 	.word	0x080036f5
 80030cc:	20000cd4 	.word	0x20000cd4
 80030d0:	20000cd0 	.word	0x20000cd0
 80030d4:	20000cbc 	.word	0x20000cbc
 80030d8:	20000cb4 	.word	0x20000cb4

080030dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80030e0:	4b04      	ldr	r3, [pc, #16]	; (80030f4 <vTaskSuspendAll+0x18>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	3301      	adds	r3, #1
 80030e6:	4a03      	ldr	r2, [pc, #12]	; (80030f4 <vTaskSuspendAll+0x18>)
 80030e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80030ea:	bf00      	nop
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	20000cd8 	.word	0x20000cd8

080030f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80030fe:	2300      	movs	r3, #0
 8003100:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003102:	2300      	movs	r3, #0
 8003104:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003106:	4b42      	ldr	r3, [pc, #264]	; (8003210 <xTaskResumeAll+0x118>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10a      	bne.n	8003124 <xTaskResumeAll+0x2c>
	__asm volatile
 800310e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003112:	f383 8811 	msr	BASEPRI, r3
 8003116:	f3bf 8f6f 	isb	sy
 800311a:	f3bf 8f4f 	dsb	sy
 800311e:	603b      	str	r3, [r7, #0]
}
 8003120:	bf00      	nop
 8003122:	e7fe      	b.n	8003122 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003124:	f001 f916 	bl	8004354 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003128:	4b39      	ldr	r3, [pc, #228]	; (8003210 <xTaskResumeAll+0x118>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	3b01      	subs	r3, #1
 800312e:	4a38      	ldr	r2, [pc, #224]	; (8003210 <xTaskResumeAll+0x118>)
 8003130:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003132:	4b37      	ldr	r3, [pc, #220]	; (8003210 <xTaskResumeAll+0x118>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d162      	bne.n	8003200 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800313a:	4b36      	ldr	r3, [pc, #216]	; (8003214 <xTaskResumeAll+0x11c>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d05e      	beq.n	8003200 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003142:	e02f      	b.n	80031a4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003144:	4b34      	ldr	r3, [pc, #208]	; (8003218 <xTaskResumeAll+0x120>)
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	3318      	adds	r3, #24
 8003150:	4618      	mov	r0, r3
 8003152:	f7ff f871 	bl	8002238 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	3304      	adds	r3, #4
 800315a:	4618      	mov	r0, r3
 800315c:	f7ff f86c 	bl	8002238 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003164:	4b2d      	ldr	r3, [pc, #180]	; (800321c <xTaskResumeAll+0x124>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	429a      	cmp	r2, r3
 800316a:	d903      	bls.n	8003174 <xTaskResumeAll+0x7c>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003170:	4a2a      	ldr	r2, [pc, #168]	; (800321c <xTaskResumeAll+0x124>)
 8003172:	6013      	str	r3, [r2, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003178:	4613      	mov	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4413      	add	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4a27      	ldr	r2, [pc, #156]	; (8003220 <xTaskResumeAll+0x128>)
 8003182:	441a      	add	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	3304      	adds	r3, #4
 8003188:	4619      	mov	r1, r3
 800318a:	4610      	mov	r0, r2
 800318c:	f7fe fff7 	bl	800217e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003194:	4b23      	ldr	r3, [pc, #140]	; (8003224 <xTaskResumeAll+0x12c>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319a:	429a      	cmp	r2, r3
 800319c:	d302      	bcc.n	80031a4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800319e:	4b22      	ldr	r3, [pc, #136]	; (8003228 <xTaskResumeAll+0x130>)
 80031a0:	2201      	movs	r2, #1
 80031a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031a4:	4b1c      	ldr	r3, [pc, #112]	; (8003218 <xTaskResumeAll+0x120>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1cb      	bne.n	8003144 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80031b2:	f000 fb55 	bl	8003860 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80031b6:	4b1d      	ldr	r3, [pc, #116]	; (800322c <xTaskResumeAll+0x134>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d010      	beq.n	80031e4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80031c2:	f000 f847 	bl	8003254 <xTaskIncrementTick>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d002      	beq.n	80031d2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80031cc:	4b16      	ldr	r3, [pc, #88]	; (8003228 <xTaskResumeAll+0x130>)
 80031ce:	2201      	movs	r2, #1
 80031d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	3b01      	subs	r3, #1
 80031d6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1f1      	bne.n	80031c2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80031de:	4b13      	ldr	r3, [pc, #76]	; (800322c <xTaskResumeAll+0x134>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80031e4:	4b10      	ldr	r3, [pc, #64]	; (8003228 <xTaskResumeAll+0x130>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d009      	beq.n	8003200 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80031ec:	2301      	movs	r3, #1
 80031ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80031f0:	4b0f      	ldr	r3, [pc, #60]	; (8003230 <xTaskResumeAll+0x138>)
 80031f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	f3bf 8f4f 	dsb	sy
 80031fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003200:	f001 f8d8 	bl	80043b4 <vPortExitCritical>

	return xAlreadyYielded;
 8003204:	68bb      	ldr	r3, [r7, #8]
}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	20000cd8 	.word	0x20000cd8
 8003214:	20000cb0 	.word	0x20000cb0
 8003218:	20000c70 	.word	0x20000c70
 800321c:	20000cb8 	.word	0x20000cb8
 8003220:	200007e0 	.word	0x200007e0
 8003224:	200007dc 	.word	0x200007dc
 8003228:	20000cc4 	.word	0x20000cc4
 800322c:	20000cc0 	.word	0x20000cc0
 8003230:	e000ed04 	.word	0xe000ed04

08003234 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800323a:	4b05      	ldr	r3, [pc, #20]	; (8003250 <xTaskGetTickCount+0x1c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003240:	687b      	ldr	r3, [r7, #4]
}
 8003242:	4618      	mov	r0, r3
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	20000cb4 	.word	0x20000cb4

08003254 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800325a:	2300      	movs	r3, #0
 800325c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800325e:	4b4f      	ldr	r3, [pc, #316]	; (800339c <xTaskIncrementTick+0x148>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	f040 808f 	bne.w	8003386 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003268:	4b4d      	ldr	r3, [pc, #308]	; (80033a0 <xTaskIncrementTick+0x14c>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	3301      	adds	r3, #1
 800326e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003270:	4a4b      	ldr	r2, [pc, #300]	; (80033a0 <xTaskIncrementTick+0x14c>)
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d120      	bne.n	80032be <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800327c:	4b49      	ldr	r3, [pc, #292]	; (80033a4 <xTaskIncrementTick+0x150>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00a      	beq.n	800329c <xTaskIncrementTick+0x48>
	__asm volatile
 8003286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328a:	f383 8811 	msr	BASEPRI, r3
 800328e:	f3bf 8f6f 	isb	sy
 8003292:	f3bf 8f4f 	dsb	sy
 8003296:	603b      	str	r3, [r7, #0]
}
 8003298:	bf00      	nop
 800329a:	e7fe      	b.n	800329a <xTaskIncrementTick+0x46>
 800329c:	4b41      	ldr	r3, [pc, #260]	; (80033a4 <xTaskIncrementTick+0x150>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	60fb      	str	r3, [r7, #12]
 80032a2:	4b41      	ldr	r3, [pc, #260]	; (80033a8 <xTaskIncrementTick+0x154>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a3f      	ldr	r2, [pc, #252]	; (80033a4 <xTaskIncrementTick+0x150>)
 80032a8:	6013      	str	r3, [r2, #0]
 80032aa:	4a3f      	ldr	r2, [pc, #252]	; (80033a8 <xTaskIncrementTick+0x154>)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6013      	str	r3, [r2, #0]
 80032b0:	4b3e      	ldr	r3, [pc, #248]	; (80033ac <xTaskIncrementTick+0x158>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	3301      	adds	r3, #1
 80032b6:	4a3d      	ldr	r2, [pc, #244]	; (80033ac <xTaskIncrementTick+0x158>)
 80032b8:	6013      	str	r3, [r2, #0]
 80032ba:	f000 fad1 	bl	8003860 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80032be:	4b3c      	ldr	r3, [pc, #240]	; (80033b0 <xTaskIncrementTick+0x15c>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d349      	bcc.n	800335c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032c8:	4b36      	ldr	r3, [pc, #216]	; (80033a4 <xTaskIncrementTick+0x150>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d104      	bne.n	80032dc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032d2:	4b37      	ldr	r3, [pc, #220]	; (80033b0 <xTaskIncrementTick+0x15c>)
 80032d4:	f04f 32ff 	mov.w	r2, #4294967295
 80032d8:	601a      	str	r2, [r3, #0]
					break;
 80032da:	e03f      	b.n	800335c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032dc:	4b31      	ldr	r3, [pc, #196]	; (80033a4 <xTaskIncrementTick+0x150>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d203      	bcs.n	80032fc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80032f4:	4a2e      	ldr	r2, [pc, #184]	; (80033b0 <xTaskIncrementTick+0x15c>)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80032fa:	e02f      	b.n	800335c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	3304      	adds	r3, #4
 8003300:	4618      	mov	r0, r3
 8003302:	f7fe ff99 	bl	8002238 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330a:	2b00      	cmp	r3, #0
 800330c:	d004      	beq.n	8003318 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	3318      	adds	r3, #24
 8003312:	4618      	mov	r0, r3
 8003314:	f7fe ff90 	bl	8002238 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800331c:	4b25      	ldr	r3, [pc, #148]	; (80033b4 <xTaskIncrementTick+0x160>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	429a      	cmp	r2, r3
 8003322:	d903      	bls.n	800332c <xTaskIncrementTick+0xd8>
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003328:	4a22      	ldr	r2, [pc, #136]	; (80033b4 <xTaskIncrementTick+0x160>)
 800332a:	6013      	str	r3, [r2, #0]
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003330:	4613      	mov	r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	4413      	add	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4a1f      	ldr	r2, [pc, #124]	; (80033b8 <xTaskIncrementTick+0x164>)
 800333a:	441a      	add	r2, r3
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	3304      	adds	r3, #4
 8003340:	4619      	mov	r1, r3
 8003342:	4610      	mov	r0, r2
 8003344:	f7fe ff1b 	bl	800217e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800334c:	4b1b      	ldr	r3, [pc, #108]	; (80033bc <xTaskIncrementTick+0x168>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003352:	429a      	cmp	r2, r3
 8003354:	d3b8      	bcc.n	80032c8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003356:	2301      	movs	r3, #1
 8003358:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800335a:	e7b5      	b.n	80032c8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800335c:	4b17      	ldr	r3, [pc, #92]	; (80033bc <xTaskIncrementTick+0x168>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003362:	4915      	ldr	r1, [pc, #84]	; (80033b8 <xTaskIncrementTick+0x164>)
 8003364:	4613      	mov	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	440b      	add	r3, r1
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d901      	bls.n	8003378 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003374:	2301      	movs	r3, #1
 8003376:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003378:	4b11      	ldr	r3, [pc, #68]	; (80033c0 <xTaskIncrementTick+0x16c>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d007      	beq.n	8003390 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003380:	2301      	movs	r3, #1
 8003382:	617b      	str	r3, [r7, #20]
 8003384:	e004      	b.n	8003390 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003386:	4b0f      	ldr	r3, [pc, #60]	; (80033c4 <xTaskIncrementTick+0x170>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	3301      	adds	r3, #1
 800338c:	4a0d      	ldr	r2, [pc, #52]	; (80033c4 <xTaskIncrementTick+0x170>)
 800338e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003390:	697b      	ldr	r3, [r7, #20]
}
 8003392:	4618      	mov	r0, r3
 8003394:	3718      	adds	r7, #24
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	20000cd8 	.word	0x20000cd8
 80033a0:	20000cb4 	.word	0x20000cb4
 80033a4:	20000c68 	.word	0x20000c68
 80033a8:	20000c6c 	.word	0x20000c6c
 80033ac:	20000cc8 	.word	0x20000cc8
 80033b0:	20000cd0 	.word	0x20000cd0
 80033b4:	20000cb8 	.word	0x20000cb8
 80033b8:	200007e0 	.word	0x200007e0
 80033bc:	200007dc 	.word	0x200007dc
 80033c0:	20000cc4 	.word	0x20000cc4
 80033c4:	20000cc0 	.word	0x20000cc0

080033c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80033ce:	4b28      	ldr	r3, [pc, #160]	; (8003470 <vTaskSwitchContext+0xa8>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d003      	beq.n	80033de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80033d6:	4b27      	ldr	r3, [pc, #156]	; (8003474 <vTaskSwitchContext+0xac>)
 80033d8:	2201      	movs	r2, #1
 80033da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80033dc:	e041      	b.n	8003462 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80033de:	4b25      	ldr	r3, [pc, #148]	; (8003474 <vTaskSwitchContext+0xac>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033e4:	4b24      	ldr	r3, [pc, #144]	; (8003478 <vTaskSwitchContext+0xb0>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	60fb      	str	r3, [r7, #12]
 80033ea:	e010      	b.n	800340e <vTaskSwitchContext+0x46>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10a      	bne.n	8003408 <vTaskSwitchContext+0x40>
	__asm volatile
 80033f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f6:	f383 8811 	msr	BASEPRI, r3
 80033fa:	f3bf 8f6f 	isb	sy
 80033fe:	f3bf 8f4f 	dsb	sy
 8003402:	607b      	str	r3, [r7, #4]
}
 8003404:	bf00      	nop
 8003406:	e7fe      	b.n	8003406 <vTaskSwitchContext+0x3e>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	3b01      	subs	r3, #1
 800340c:	60fb      	str	r3, [r7, #12]
 800340e:	491b      	ldr	r1, [pc, #108]	; (800347c <vTaskSwitchContext+0xb4>)
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	4613      	mov	r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	4413      	add	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	440b      	add	r3, r1
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0e4      	beq.n	80033ec <vTaskSwitchContext+0x24>
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	4613      	mov	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4413      	add	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4a13      	ldr	r2, [pc, #76]	; (800347c <vTaskSwitchContext+0xb4>)
 800342e:	4413      	add	r3, r2
 8003430:	60bb      	str	r3, [r7, #8]
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	605a      	str	r2, [r3, #4]
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	3308      	adds	r3, #8
 8003444:	429a      	cmp	r2, r3
 8003446:	d104      	bne.n	8003452 <vTaskSwitchContext+0x8a>
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	605a      	str	r2, [r3, #4]
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	4a09      	ldr	r2, [pc, #36]	; (8003480 <vTaskSwitchContext+0xb8>)
 800345a:	6013      	str	r3, [r2, #0]
 800345c:	4a06      	ldr	r2, [pc, #24]	; (8003478 <vTaskSwitchContext+0xb0>)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6013      	str	r3, [r2, #0]
}
 8003462:	bf00      	nop
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	20000cd8 	.word	0x20000cd8
 8003474:	20000cc4 	.word	0x20000cc4
 8003478:	20000cb8 	.word	0x20000cb8
 800347c:	200007e0 	.word	0x200007e0
 8003480:	200007dc 	.word	0x200007dc

08003484 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10a      	bne.n	80034aa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003498:	f383 8811 	msr	BASEPRI, r3
 800349c:	f3bf 8f6f 	isb	sy
 80034a0:	f3bf 8f4f 	dsb	sy
 80034a4:	60fb      	str	r3, [r7, #12]
}
 80034a6:	bf00      	nop
 80034a8:	e7fe      	b.n	80034a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80034aa:	4b07      	ldr	r3, [pc, #28]	; (80034c8 <vTaskPlaceOnEventList+0x44>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	3318      	adds	r3, #24
 80034b0:	4619      	mov	r1, r3
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7fe fe87 	bl	80021c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80034b8:	2101      	movs	r1, #1
 80034ba:	6838      	ldr	r0, [r7, #0]
 80034bc:	f000 fa7c 	bl	80039b8 <prvAddCurrentTaskToDelayedList>
}
 80034c0:	bf00      	nop
 80034c2:	3710      	adds	r7, #16
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	200007dc 	.word	0x200007dc

080034cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d10a      	bne.n	80034f4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80034de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e2:	f383 8811 	msr	BASEPRI, r3
 80034e6:	f3bf 8f6f 	isb	sy
 80034ea:	f3bf 8f4f 	dsb	sy
 80034ee:	617b      	str	r3, [r7, #20]
}
 80034f0:	bf00      	nop
 80034f2:	e7fe      	b.n	80034f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80034f4:	4b0a      	ldr	r3, [pc, #40]	; (8003520 <vTaskPlaceOnEventListRestricted+0x54>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	3318      	adds	r3, #24
 80034fa:	4619      	mov	r1, r3
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f7fe fe3e 	bl	800217e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d002      	beq.n	800350e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003508:	f04f 33ff 	mov.w	r3, #4294967295
 800350c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800350e:	6879      	ldr	r1, [r7, #4]
 8003510:	68b8      	ldr	r0, [r7, #8]
 8003512:	f000 fa51 	bl	80039b8 <prvAddCurrentTaskToDelayedList>
	}
 8003516:	bf00      	nop
 8003518:	3718      	adds	r7, #24
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	200007dc 	.word	0x200007dc

08003524 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10a      	bne.n	8003550 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800353a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353e:	f383 8811 	msr	BASEPRI, r3
 8003542:	f3bf 8f6f 	isb	sy
 8003546:	f3bf 8f4f 	dsb	sy
 800354a:	60fb      	str	r3, [r7, #12]
}
 800354c:	bf00      	nop
 800354e:	e7fe      	b.n	800354e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	3318      	adds	r3, #24
 8003554:	4618      	mov	r0, r3
 8003556:	f7fe fe6f 	bl	8002238 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800355a:	4b1e      	ldr	r3, [pc, #120]	; (80035d4 <xTaskRemoveFromEventList+0xb0>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d11d      	bne.n	800359e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	3304      	adds	r3, #4
 8003566:	4618      	mov	r0, r3
 8003568:	f7fe fe66 	bl	8002238 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003570:	4b19      	ldr	r3, [pc, #100]	; (80035d8 <xTaskRemoveFromEventList+0xb4>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	429a      	cmp	r2, r3
 8003576:	d903      	bls.n	8003580 <xTaskRemoveFromEventList+0x5c>
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357c:	4a16      	ldr	r2, [pc, #88]	; (80035d8 <xTaskRemoveFromEventList+0xb4>)
 800357e:	6013      	str	r3, [r2, #0]
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003584:	4613      	mov	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	4a13      	ldr	r2, [pc, #76]	; (80035dc <xTaskRemoveFromEventList+0xb8>)
 800358e:	441a      	add	r2, r3
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	3304      	adds	r3, #4
 8003594:	4619      	mov	r1, r3
 8003596:	4610      	mov	r0, r2
 8003598:	f7fe fdf1 	bl	800217e <vListInsertEnd>
 800359c:	e005      	b.n	80035aa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	3318      	adds	r3, #24
 80035a2:	4619      	mov	r1, r3
 80035a4:	480e      	ldr	r0, [pc, #56]	; (80035e0 <xTaskRemoveFromEventList+0xbc>)
 80035a6:	f7fe fdea 	bl	800217e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ae:	4b0d      	ldr	r3, [pc, #52]	; (80035e4 <xTaskRemoveFromEventList+0xc0>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d905      	bls.n	80035c4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80035b8:	2301      	movs	r3, #1
 80035ba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80035bc:	4b0a      	ldr	r3, [pc, #40]	; (80035e8 <xTaskRemoveFromEventList+0xc4>)
 80035be:	2201      	movs	r2, #1
 80035c0:	601a      	str	r2, [r3, #0]
 80035c2:	e001      	b.n	80035c8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80035c4:	2300      	movs	r3, #0
 80035c6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80035c8:	697b      	ldr	r3, [r7, #20]
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3718      	adds	r7, #24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20000cd8 	.word	0x20000cd8
 80035d8:	20000cb8 	.word	0x20000cb8
 80035dc:	200007e0 	.word	0x200007e0
 80035e0:	20000c70 	.word	0x20000c70
 80035e4:	200007dc 	.word	0x200007dc
 80035e8:	20000cc4 	.word	0x20000cc4

080035ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80035f4:	4b06      	ldr	r3, [pc, #24]	; (8003610 <vTaskInternalSetTimeOutState+0x24>)
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80035fc:	4b05      	ldr	r3, [pc, #20]	; (8003614 <vTaskInternalSetTimeOutState+0x28>)
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	605a      	str	r2, [r3, #4]
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr
 8003610:	20000cc8 	.word	0x20000cc8
 8003614:	20000cb4 	.word	0x20000cb4

08003618 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b088      	sub	sp, #32
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d10a      	bne.n	800363e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800362c:	f383 8811 	msr	BASEPRI, r3
 8003630:	f3bf 8f6f 	isb	sy
 8003634:	f3bf 8f4f 	dsb	sy
 8003638:	613b      	str	r3, [r7, #16]
}
 800363a:	bf00      	nop
 800363c:	e7fe      	b.n	800363c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10a      	bne.n	800365a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003648:	f383 8811 	msr	BASEPRI, r3
 800364c:	f3bf 8f6f 	isb	sy
 8003650:	f3bf 8f4f 	dsb	sy
 8003654:	60fb      	str	r3, [r7, #12]
}
 8003656:	bf00      	nop
 8003658:	e7fe      	b.n	8003658 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800365a:	f000 fe7b 	bl	8004354 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800365e:	4b1d      	ldr	r3, [pc, #116]	; (80036d4 <xTaskCheckForTimeOut+0xbc>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003676:	d102      	bne.n	800367e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003678:	2300      	movs	r3, #0
 800367a:	61fb      	str	r3, [r7, #28]
 800367c:	e023      	b.n	80036c6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	4b15      	ldr	r3, [pc, #84]	; (80036d8 <xTaskCheckForTimeOut+0xc0>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	429a      	cmp	r2, r3
 8003688:	d007      	beq.n	800369a <xTaskCheckForTimeOut+0x82>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	429a      	cmp	r2, r3
 8003692:	d302      	bcc.n	800369a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003694:	2301      	movs	r3, #1
 8003696:	61fb      	str	r3, [r7, #28]
 8003698:	e015      	b.n	80036c6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d20b      	bcs.n	80036bc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	1ad2      	subs	r2, r2, r3
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f7ff ff9b 	bl	80035ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80036b6:	2300      	movs	r3, #0
 80036b8:	61fb      	str	r3, [r7, #28]
 80036ba:	e004      	b.n	80036c6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	2200      	movs	r2, #0
 80036c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80036c2:	2301      	movs	r3, #1
 80036c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80036c6:	f000 fe75 	bl	80043b4 <vPortExitCritical>

	return xReturn;
 80036ca:	69fb      	ldr	r3, [r7, #28]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3720      	adds	r7, #32
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	20000cb4 	.word	0x20000cb4
 80036d8:	20000cc8 	.word	0x20000cc8

080036dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80036e0:	4b03      	ldr	r3, [pc, #12]	; (80036f0 <vTaskMissedYield+0x14>)
 80036e2:	2201      	movs	r2, #1
 80036e4:	601a      	str	r2, [r3, #0]
}
 80036e6:	bf00      	nop
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr
 80036f0:	20000cc4 	.word	0x20000cc4

080036f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80036fc:	f000 f852 	bl	80037a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003700:	4b06      	ldr	r3, [pc, #24]	; (800371c <prvIdleTask+0x28>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d9f9      	bls.n	80036fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8003708:	4b05      	ldr	r3, [pc, #20]	; (8003720 <prvIdleTask+0x2c>)
 800370a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	f3bf 8f4f 	dsb	sy
 8003714:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003718:	e7f0      	b.n	80036fc <prvIdleTask+0x8>
 800371a:	bf00      	nop
 800371c:	200007e0 	.word	0x200007e0
 8003720:	e000ed04 	.word	0xe000ed04

08003724 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800372a:	2300      	movs	r3, #0
 800372c:	607b      	str	r3, [r7, #4]
 800372e:	e00c      	b.n	800374a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	4613      	mov	r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	4413      	add	r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	4a12      	ldr	r2, [pc, #72]	; (8003784 <prvInitialiseTaskLists+0x60>)
 800373c:	4413      	add	r3, r2
 800373e:	4618      	mov	r0, r3
 8003740:	f7fe fcf0 	bl	8002124 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	3301      	adds	r3, #1
 8003748:	607b      	str	r3, [r7, #4]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2b37      	cmp	r3, #55	; 0x37
 800374e:	d9ef      	bls.n	8003730 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003750:	480d      	ldr	r0, [pc, #52]	; (8003788 <prvInitialiseTaskLists+0x64>)
 8003752:	f7fe fce7 	bl	8002124 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003756:	480d      	ldr	r0, [pc, #52]	; (800378c <prvInitialiseTaskLists+0x68>)
 8003758:	f7fe fce4 	bl	8002124 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800375c:	480c      	ldr	r0, [pc, #48]	; (8003790 <prvInitialiseTaskLists+0x6c>)
 800375e:	f7fe fce1 	bl	8002124 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003762:	480c      	ldr	r0, [pc, #48]	; (8003794 <prvInitialiseTaskLists+0x70>)
 8003764:	f7fe fcde 	bl	8002124 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003768:	480b      	ldr	r0, [pc, #44]	; (8003798 <prvInitialiseTaskLists+0x74>)
 800376a:	f7fe fcdb 	bl	8002124 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800376e:	4b0b      	ldr	r3, [pc, #44]	; (800379c <prvInitialiseTaskLists+0x78>)
 8003770:	4a05      	ldr	r2, [pc, #20]	; (8003788 <prvInitialiseTaskLists+0x64>)
 8003772:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003774:	4b0a      	ldr	r3, [pc, #40]	; (80037a0 <prvInitialiseTaskLists+0x7c>)
 8003776:	4a05      	ldr	r2, [pc, #20]	; (800378c <prvInitialiseTaskLists+0x68>)
 8003778:	601a      	str	r2, [r3, #0]
}
 800377a:	bf00      	nop
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	200007e0 	.word	0x200007e0
 8003788:	20000c40 	.word	0x20000c40
 800378c:	20000c54 	.word	0x20000c54
 8003790:	20000c70 	.word	0x20000c70
 8003794:	20000c84 	.word	0x20000c84
 8003798:	20000c9c 	.word	0x20000c9c
 800379c:	20000c68 	.word	0x20000c68
 80037a0:	20000c6c 	.word	0x20000c6c

080037a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037aa:	e019      	b.n	80037e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80037ac:	f000 fdd2 	bl	8004354 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037b0:	4b10      	ldr	r3, [pc, #64]	; (80037f4 <prvCheckTasksWaitingTermination+0x50>)
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3304      	adds	r3, #4
 80037bc:	4618      	mov	r0, r3
 80037be:	f7fe fd3b 	bl	8002238 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80037c2:	4b0d      	ldr	r3, [pc, #52]	; (80037f8 <prvCheckTasksWaitingTermination+0x54>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	3b01      	subs	r3, #1
 80037c8:	4a0b      	ldr	r2, [pc, #44]	; (80037f8 <prvCheckTasksWaitingTermination+0x54>)
 80037ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80037cc:	4b0b      	ldr	r3, [pc, #44]	; (80037fc <prvCheckTasksWaitingTermination+0x58>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	3b01      	subs	r3, #1
 80037d2:	4a0a      	ldr	r2, [pc, #40]	; (80037fc <prvCheckTasksWaitingTermination+0x58>)
 80037d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80037d6:	f000 fded 	bl	80043b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f810 	bl	8003800 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037e0:	4b06      	ldr	r3, [pc, #24]	; (80037fc <prvCheckTasksWaitingTermination+0x58>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1e1      	bne.n	80037ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80037e8:	bf00      	nop
 80037ea:	bf00      	nop
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	20000c84 	.word	0x20000c84
 80037f8:	20000cb0 	.word	0x20000cb0
 80037fc:	20000c98 	.word	0x20000c98

08003800 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800380e:	2b00      	cmp	r3, #0
 8003810:	d108      	bne.n	8003824 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003816:	4618      	mov	r0, r3
 8003818:	f000 ff8a 	bl	8004730 <vPortFree>
				vPortFree( pxTCB );
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 ff87 	bl	8004730 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003822:	e018      	b.n	8003856 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800382a:	2b01      	cmp	r3, #1
 800382c:	d103      	bne.n	8003836 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 ff7e 	bl	8004730 <vPortFree>
	}
 8003834:	e00f      	b.n	8003856 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800383c:	2b02      	cmp	r3, #2
 800383e:	d00a      	beq.n	8003856 <prvDeleteTCB+0x56>
	__asm volatile
 8003840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003844:	f383 8811 	msr	BASEPRI, r3
 8003848:	f3bf 8f6f 	isb	sy
 800384c:	f3bf 8f4f 	dsb	sy
 8003850:	60fb      	str	r3, [r7, #12]
}
 8003852:	bf00      	nop
 8003854:	e7fe      	b.n	8003854 <prvDeleteTCB+0x54>
	}
 8003856:	bf00      	nop
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
	...

08003860 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003866:	4b0c      	ldr	r3, [pc, #48]	; (8003898 <prvResetNextTaskUnblockTime+0x38>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d104      	bne.n	800387a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003870:	4b0a      	ldr	r3, [pc, #40]	; (800389c <prvResetNextTaskUnblockTime+0x3c>)
 8003872:	f04f 32ff 	mov.w	r2, #4294967295
 8003876:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003878:	e008      	b.n	800388c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800387a:	4b07      	ldr	r3, [pc, #28]	; (8003898 <prvResetNextTaskUnblockTime+0x38>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	4a04      	ldr	r2, [pc, #16]	; (800389c <prvResetNextTaskUnblockTime+0x3c>)
 800388a:	6013      	str	r3, [r2, #0]
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr
 8003898:	20000c68 	.word	0x20000c68
 800389c:	20000cd0 	.word	0x20000cd0

080038a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80038a6:	4b0b      	ldr	r3, [pc, #44]	; (80038d4 <xTaskGetSchedulerState+0x34>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d102      	bne.n	80038b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80038ae:	2301      	movs	r3, #1
 80038b0:	607b      	str	r3, [r7, #4]
 80038b2:	e008      	b.n	80038c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038b4:	4b08      	ldr	r3, [pc, #32]	; (80038d8 <xTaskGetSchedulerState+0x38>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d102      	bne.n	80038c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80038bc:	2302      	movs	r3, #2
 80038be:	607b      	str	r3, [r7, #4]
 80038c0:	e001      	b.n	80038c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80038c2:	2300      	movs	r3, #0
 80038c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80038c6:	687b      	ldr	r3, [r7, #4]
	}
 80038c8:	4618      	mov	r0, r3
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr
 80038d4:	20000cbc 	.word	0x20000cbc
 80038d8:	20000cd8 	.word	0x20000cd8

080038dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80038e8:	2300      	movs	r3, #0
 80038ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d056      	beq.n	80039a0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80038f2:	4b2e      	ldr	r3, [pc, #184]	; (80039ac <xTaskPriorityDisinherit+0xd0>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d00a      	beq.n	8003912 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80038fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003900:	f383 8811 	msr	BASEPRI, r3
 8003904:	f3bf 8f6f 	isb	sy
 8003908:	f3bf 8f4f 	dsb	sy
 800390c:	60fb      	str	r3, [r7, #12]
}
 800390e:	bf00      	nop
 8003910:	e7fe      	b.n	8003910 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10a      	bne.n	8003930 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800391a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391e:	f383 8811 	msr	BASEPRI, r3
 8003922:	f3bf 8f6f 	isb	sy
 8003926:	f3bf 8f4f 	dsb	sy
 800392a:	60bb      	str	r3, [r7, #8]
}
 800392c:	bf00      	nop
 800392e:	e7fe      	b.n	800392e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003934:	1e5a      	subs	r2, r3, #1
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003942:	429a      	cmp	r2, r3
 8003944:	d02c      	beq.n	80039a0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800394a:	2b00      	cmp	r3, #0
 800394c:	d128      	bne.n	80039a0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	3304      	adds	r3, #4
 8003952:	4618      	mov	r0, r3
 8003954:	f7fe fc70 	bl	8002238 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003964:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003970:	4b0f      	ldr	r3, [pc, #60]	; (80039b0 <xTaskPriorityDisinherit+0xd4>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	429a      	cmp	r2, r3
 8003976:	d903      	bls.n	8003980 <xTaskPriorityDisinherit+0xa4>
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397c:	4a0c      	ldr	r2, [pc, #48]	; (80039b0 <xTaskPriorityDisinherit+0xd4>)
 800397e:	6013      	str	r3, [r2, #0]
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003984:	4613      	mov	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	4413      	add	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4a09      	ldr	r2, [pc, #36]	; (80039b4 <xTaskPriorityDisinherit+0xd8>)
 800398e:	441a      	add	r2, r3
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	3304      	adds	r3, #4
 8003994:	4619      	mov	r1, r3
 8003996:	4610      	mov	r0, r2
 8003998:	f7fe fbf1 	bl	800217e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800399c:	2301      	movs	r3, #1
 800399e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80039a0:	697b      	ldr	r3, [r7, #20]
	}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3718      	adds	r7, #24
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	200007dc 	.word	0x200007dc
 80039b0:	20000cb8 	.word	0x20000cb8
 80039b4:	200007e0 	.word	0x200007e0

080039b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80039c2:	4b21      	ldr	r3, [pc, #132]	; (8003a48 <prvAddCurrentTaskToDelayedList+0x90>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039c8:	4b20      	ldr	r3, [pc, #128]	; (8003a4c <prvAddCurrentTaskToDelayedList+0x94>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	3304      	adds	r3, #4
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7fe fc32 	bl	8002238 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039da:	d10a      	bne.n	80039f2 <prvAddCurrentTaskToDelayedList+0x3a>
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d007      	beq.n	80039f2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039e2:	4b1a      	ldr	r3, [pc, #104]	; (8003a4c <prvAddCurrentTaskToDelayedList+0x94>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	3304      	adds	r3, #4
 80039e8:	4619      	mov	r1, r3
 80039ea:	4819      	ldr	r0, [pc, #100]	; (8003a50 <prvAddCurrentTaskToDelayedList+0x98>)
 80039ec:	f7fe fbc7 	bl	800217e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80039f0:	e026      	b.n	8003a40 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4413      	add	r3, r2
 80039f8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80039fa:	4b14      	ldr	r3, [pc, #80]	; (8003a4c <prvAddCurrentTaskToDelayedList+0x94>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68ba      	ldr	r2, [r7, #8]
 8003a00:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003a02:	68ba      	ldr	r2, [r7, #8]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d209      	bcs.n	8003a1e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a0a:	4b12      	ldr	r3, [pc, #72]	; (8003a54 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	4b0f      	ldr	r3, [pc, #60]	; (8003a4c <prvAddCurrentTaskToDelayedList+0x94>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	3304      	adds	r3, #4
 8003a14:	4619      	mov	r1, r3
 8003a16:	4610      	mov	r0, r2
 8003a18:	f7fe fbd5 	bl	80021c6 <vListInsert>
}
 8003a1c:	e010      	b.n	8003a40 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a1e:	4b0e      	ldr	r3, [pc, #56]	; (8003a58 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	4b0a      	ldr	r3, [pc, #40]	; (8003a4c <prvAddCurrentTaskToDelayedList+0x94>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	3304      	adds	r3, #4
 8003a28:	4619      	mov	r1, r3
 8003a2a:	4610      	mov	r0, r2
 8003a2c:	f7fe fbcb 	bl	80021c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003a30:	4b0a      	ldr	r3, [pc, #40]	; (8003a5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68ba      	ldr	r2, [r7, #8]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d202      	bcs.n	8003a40 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003a3a:	4a08      	ldr	r2, [pc, #32]	; (8003a5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	6013      	str	r3, [r2, #0]
}
 8003a40:	bf00      	nop
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	20000cb4 	.word	0x20000cb4
 8003a4c:	200007dc 	.word	0x200007dc
 8003a50:	20000c9c 	.word	0x20000c9c
 8003a54:	20000c6c 	.word	0x20000c6c
 8003a58:	20000c68 	.word	0x20000c68
 8003a5c:	20000cd0 	.word	0x20000cd0

08003a60 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b08a      	sub	sp, #40	; 0x28
 8003a64:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003a66:	2300      	movs	r3, #0
 8003a68:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003a6a:	f000 fb07 	bl	800407c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003a6e:	4b1c      	ldr	r3, [pc, #112]	; (8003ae0 <xTimerCreateTimerTask+0x80>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d021      	beq.n	8003aba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003a76:	2300      	movs	r3, #0
 8003a78:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003a7e:	1d3a      	adds	r2, r7, #4
 8003a80:	f107 0108 	add.w	r1, r7, #8
 8003a84:	f107 030c 	add.w	r3, r7, #12
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7fe fb31 	bl	80020f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003a8e:	6879      	ldr	r1, [r7, #4]
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	9202      	str	r2, [sp, #8]
 8003a96:	9301      	str	r3, [sp, #4]
 8003a98:	2302      	movs	r3, #2
 8003a9a:	9300      	str	r3, [sp, #0]
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	460a      	mov	r2, r1
 8003aa0:	4910      	ldr	r1, [pc, #64]	; (8003ae4 <xTimerCreateTimerTask+0x84>)
 8003aa2:	4811      	ldr	r0, [pc, #68]	; (8003ae8 <xTimerCreateTimerTask+0x88>)
 8003aa4:	f7ff f8de 	bl	8002c64 <xTaskCreateStatic>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	4a10      	ldr	r2, [pc, #64]	; (8003aec <xTimerCreateTimerTask+0x8c>)
 8003aac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003aae:	4b0f      	ldr	r3, [pc, #60]	; (8003aec <xTimerCreateTimerTask+0x8c>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d10a      	bne.n	8003ad6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac4:	f383 8811 	msr	BASEPRI, r3
 8003ac8:	f3bf 8f6f 	isb	sy
 8003acc:	f3bf 8f4f 	dsb	sy
 8003ad0:	613b      	str	r3, [r7, #16]
}
 8003ad2:	bf00      	nop
 8003ad4:	e7fe      	b.n	8003ad4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003ad6:	697b      	ldr	r3, [r7, #20]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3718      	adds	r7, #24
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	20000d0c 	.word	0x20000d0c
 8003ae4:	08005320 	.word	0x08005320
 8003ae8:	08003c25 	.word	0x08003c25
 8003aec:	20000d10 	.word	0x20000d10

08003af0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b08a      	sub	sp, #40	; 0x28
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
 8003afc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003afe:	2300      	movs	r3, #0
 8003b00:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d10a      	bne.n	8003b1e <xTimerGenericCommand+0x2e>
	__asm volatile
 8003b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b0c:	f383 8811 	msr	BASEPRI, r3
 8003b10:	f3bf 8f6f 	isb	sy
 8003b14:	f3bf 8f4f 	dsb	sy
 8003b18:	623b      	str	r3, [r7, #32]
}
 8003b1a:	bf00      	nop
 8003b1c:	e7fe      	b.n	8003b1c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003b1e:	4b1a      	ldr	r3, [pc, #104]	; (8003b88 <xTimerGenericCommand+0x98>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d02a      	beq.n	8003b7c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	2b05      	cmp	r3, #5
 8003b36:	dc18      	bgt.n	8003b6a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003b38:	f7ff feb2 	bl	80038a0 <xTaskGetSchedulerState>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d109      	bne.n	8003b56 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003b42:	4b11      	ldr	r3, [pc, #68]	; (8003b88 <xTimerGenericCommand+0x98>)
 8003b44:	6818      	ldr	r0, [r3, #0]
 8003b46:	f107 0110 	add.w	r1, r7, #16
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b4e:	f7fe fca1 	bl	8002494 <xQueueGenericSend>
 8003b52:	6278      	str	r0, [r7, #36]	; 0x24
 8003b54:	e012      	b.n	8003b7c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003b56:	4b0c      	ldr	r3, [pc, #48]	; (8003b88 <xTimerGenericCommand+0x98>)
 8003b58:	6818      	ldr	r0, [r3, #0]
 8003b5a:	f107 0110 	add.w	r1, r7, #16
 8003b5e:	2300      	movs	r3, #0
 8003b60:	2200      	movs	r2, #0
 8003b62:	f7fe fc97 	bl	8002494 <xQueueGenericSend>
 8003b66:	6278      	str	r0, [r7, #36]	; 0x24
 8003b68:	e008      	b.n	8003b7c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003b6a:	4b07      	ldr	r3, [pc, #28]	; (8003b88 <xTimerGenericCommand+0x98>)
 8003b6c:	6818      	ldr	r0, [r3, #0]
 8003b6e:	f107 0110 	add.w	r1, r7, #16
 8003b72:	2300      	movs	r3, #0
 8003b74:	683a      	ldr	r2, [r7, #0]
 8003b76:	f7fe fd8b 	bl	8002690 <xQueueGenericSendFromISR>
 8003b7a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3728      	adds	r7, #40	; 0x28
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	20000d0c 	.word	0x20000d0c

08003b8c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b088      	sub	sp, #32
 8003b90:	af02      	add	r7, sp, #8
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b96:	4b22      	ldr	r3, [pc, #136]	; (8003c20 <prvProcessExpiredTimer+0x94>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	3304      	adds	r3, #4
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7fe fb47 	bl	8002238 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bb0:	f003 0304 	and.w	r3, r3, #4
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d022      	beq.n	8003bfe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	699a      	ldr	r2, [r3, #24]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	18d1      	adds	r1, r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	683a      	ldr	r2, [r7, #0]
 8003bc4:	6978      	ldr	r0, [r7, #20]
 8003bc6:	f000 f8d1 	bl	8003d6c <prvInsertTimerInActiveList>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d01f      	beq.n	8003c10 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	9300      	str	r3, [sp, #0]
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	2100      	movs	r1, #0
 8003bda:	6978      	ldr	r0, [r7, #20]
 8003bdc:	f7ff ff88 	bl	8003af0 <xTimerGenericCommand>
 8003be0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d113      	bne.n	8003c10 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bec:	f383 8811 	msr	BASEPRI, r3
 8003bf0:	f3bf 8f6f 	isb	sy
 8003bf4:	f3bf 8f4f 	dsb	sy
 8003bf8:	60fb      	str	r3, [r7, #12]
}
 8003bfa:	bf00      	nop
 8003bfc:	e7fe      	b.n	8003bfc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c04:	f023 0301 	bic.w	r3, r3, #1
 8003c08:	b2da      	uxtb	r2, r3
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	6978      	ldr	r0, [r7, #20]
 8003c16:	4798      	blx	r3
}
 8003c18:	bf00      	nop
 8003c1a:	3718      	adds	r7, #24
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	20000d04 	.word	0x20000d04

08003c24 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c2c:	f107 0308 	add.w	r3, r7, #8
 8003c30:	4618      	mov	r0, r3
 8003c32:	f000 f857 	bl	8003ce4 <prvGetNextExpireTime>
 8003c36:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f000 f803 	bl	8003c48 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003c42:	f000 f8d5 	bl	8003df0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c46:	e7f1      	b.n	8003c2c <prvTimerTask+0x8>

08003c48 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003c52:	f7ff fa43 	bl	80030dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003c56:	f107 0308 	add.w	r3, r7, #8
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 f866 	bl	8003d2c <prvSampleTimeNow>
 8003c60:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d130      	bne.n	8003cca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10a      	bne.n	8003c84 <prvProcessTimerOrBlockTask+0x3c>
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d806      	bhi.n	8003c84 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003c76:	f7ff fa3f 	bl	80030f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003c7a:	68f9      	ldr	r1, [r7, #12]
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f7ff ff85 	bl	8003b8c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003c82:	e024      	b.n	8003cce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d008      	beq.n	8003c9c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003c8a:	4b13      	ldr	r3, [pc, #76]	; (8003cd8 <prvProcessTimerOrBlockTask+0x90>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d101      	bne.n	8003c98 <prvProcessTimerOrBlockTask+0x50>
 8003c94:	2301      	movs	r3, #1
 8003c96:	e000      	b.n	8003c9a <prvProcessTimerOrBlockTask+0x52>
 8003c98:	2300      	movs	r3, #0
 8003c9a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003c9c:	4b0f      	ldr	r3, [pc, #60]	; (8003cdc <prvProcessTimerOrBlockTask+0x94>)
 8003c9e:	6818      	ldr	r0, [r3, #0]
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	4619      	mov	r1, r3
 8003caa:	f7fe ffa7 	bl	8002bfc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003cae:	f7ff fa23 	bl	80030f8 <xTaskResumeAll>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d10a      	bne.n	8003cce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003cb8:	4b09      	ldr	r3, [pc, #36]	; (8003ce0 <prvProcessTimerOrBlockTask+0x98>)
 8003cba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	f3bf 8f4f 	dsb	sy
 8003cc4:	f3bf 8f6f 	isb	sy
}
 8003cc8:	e001      	b.n	8003cce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003cca:	f7ff fa15 	bl	80030f8 <xTaskResumeAll>
}
 8003cce:	bf00      	nop
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	20000d08 	.word	0x20000d08
 8003cdc:	20000d0c 	.word	0x20000d0c
 8003ce0:	e000ed04 	.word	0xe000ed04

08003ce4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003cec:	4b0e      	ldr	r3, [pc, #56]	; (8003d28 <prvGetNextExpireTime+0x44>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <prvGetNextExpireTime+0x16>
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	e000      	b.n	8003cfc <prvGetNextExpireTime+0x18>
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d105      	bne.n	8003d14 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d08:	4b07      	ldr	r3, [pc, #28]	; (8003d28 <prvGetNextExpireTime+0x44>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	60fb      	str	r3, [r7, #12]
 8003d12:	e001      	b.n	8003d18 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003d14:	2300      	movs	r3, #0
 8003d16:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003d18:	68fb      	ldr	r3, [r7, #12]
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3714      	adds	r7, #20
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	20000d04 	.word	0x20000d04

08003d2c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003d34:	f7ff fa7e 	bl	8003234 <xTaskGetTickCount>
 8003d38:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003d3a:	4b0b      	ldr	r3, [pc, #44]	; (8003d68 <prvSampleTimeNow+0x3c>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d205      	bcs.n	8003d50 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003d44:	f000 f936 	bl	8003fb4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	601a      	str	r2, [r3, #0]
 8003d4e:	e002      	b.n	8003d56 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003d56:	4a04      	ldr	r2, [pc, #16]	; (8003d68 <prvSampleTimeNow+0x3c>)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	20000d14 	.word	0x20000d14

08003d6c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
 8003d78:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	68ba      	ldr	r2, [r7, #8]
 8003d82:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003d8a:	68ba      	ldr	r2, [r7, #8]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d812      	bhi.n	8003db8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	1ad2      	subs	r2, r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d302      	bcc.n	8003da6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003da0:	2301      	movs	r3, #1
 8003da2:	617b      	str	r3, [r7, #20]
 8003da4:	e01b      	b.n	8003dde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003da6:	4b10      	ldr	r3, [pc, #64]	; (8003de8 <prvInsertTimerInActiveList+0x7c>)
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	3304      	adds	r3, #4
 8003dae:	4619      	mov	r1, r3
 8003db0:	4610      	mov	r0, r2
 8003db2:	f7fe fa08 	bl	80021c6 <vListInsert>
 8003db6:	e012      	b.n	8003dde <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d206      	bcs.n	8003dce <prvInsertTimerInActiveList+0x62>
 8003dc0:	68ba      	ldr	r2, [r7, #8]
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d302      	bcc.n	8003dce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	617b      	str	r3, [r7, #20]
 8003dcc:	e007      	b.n	8003dde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003dce:	4b07      	ldr	r3, [pc, #28]	; (8003dec <prvInsertTimerInActiveList+0x80>)
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	3304      	adds	r3, #4
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	4610      	mov	r0, r2
 8003dda:	f7fe f9f4 	bl	80021c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003dde:	697b      	ldr	r3, [r7, #20]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3718      	adds	r7, #24
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	20000d08 	.word	0x20000d08
 8003dec:	20000d04 	.word	0x20000d04

08003df0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b08e      	sub	sp, #56	; 0x38
 8003df4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003df6:	e0ca      	b.n	8003f8e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	da18      	bge.n	8003e30 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003dfe:	1d3b      	adds	r3, r7, #4
 8003e00:	3304      	adds	r3, #4
 8003e02:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10a      	bne.n	8003e20 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e0e:	f383 8811 	msr	BASEPRI, r3
 8003e12:	f3bf 8f6f 	isb	sy
 8003e16:	f3bf 8f4f 	dsb	sy
 8003e1a:	61fb      	str	r3, [r7, #28]
}
 8003e1c:	bf00      	nop
 8003e1e:	e7fe      	b.n	8003e1e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e26:	6850      	ldr	r0, [r2, #4]
 8003e28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e2a:	6892      	ldr	r2, [r2, #8]
 8003e2c:	4611      	mov	r1, r2
 8003e2e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f2c0 80ab 	blt.w	8003f8e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3e:	695b      	ldr	r3, [r3, #20]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d004      	beq.n	8003e4e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e46:	3304      	adds	r3, #4
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7fe f9f5 	bl	8002238 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e4e:	463b      	mov	r3, r7
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7ff ff6b 	bl	8003d2c <prvSampleTimeNow>
 8003e56:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b09      	cmp	r3, #9
 8003e5c:	f200 8096 	bhi.w	8003f8c <prvProcessReceivedCommands+0x19c>
 8003e60:	a201      	add	r2, pc, #4	; (adr r2, 8003e68 <prvProcessReceivedCommands+0x78>)
 8003e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e66:	bf00      	nop
 8003e68:	08003e91 	.word	0x08003e91
 8003e6c:	08003e91 	.word	0x08003e91
 8003e70:	08003e91 	.word	0x08003e91
 8003e74:	08003f05 	.word	0x08003f05
 8003e78:	08003f19 	.word	0x08003f19
 8003e7c:	08003f63 	.word	0x08003f63
 8003e80:	08003e91 	.word	0x08003e91
 8003e84:	08003e91 	.word	0x08003e91
 8003e88:	08003f05 	.word	0x08003f05
 8003e8c:	08003f19 	.word	0x08003f19
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e96:	f043 0301 	orr.w	r3, r3, #1
 8003e9a:	b2da      	uxtb	r2, r3
 8003e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	18d1      	adds	r1, r2, r3
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003eb0:	f7ff ff5c 	bl	8003d6c <prvInsertTimerInActiveList>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d069      	beq.n	8003f8e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ec0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ec8:	f003 0304 	and.w	r3, r3, #4
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d05e      	beq.n	8003f8e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	441a      	add	r2, r3
 8003ed8:	2300      	movs	r3, #0
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	2300      	movs	r3, #0
 8003ede:	2100      	movs	r1, #0
 8003ee0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ee2:	f7ff fe05 	bl	8003af0 <xTimerGenericCommand>
 8003ee6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003ee8:	6a3b      	ldr	r3, [r7, #32]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d14f      	bne.n	8003f8e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8003eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef2:	f383 8811 	msr	BASEPRI, r3
 8003ef6:	f3bf 8f6f 	isb	sy
 8003efa:	f3bf 8f4f 	dsb	sy
 8003efe:	61bb      	str	r3, [r7, #24]
}
 8003f00:	bf00      	nop
 8003f02:	e7fe      	b.n	8003f02 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f0a:	f023 0301 	bic.w	r3, r3, #1
 8003f0e:	b2da      	uxtb	r2, r3
 8003f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003f16:	e03a      	b.n	8003f8e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f1e:	f043 0301 	orr.w	r3, r3, #1
 8003f22:	b2da      	uxtb	r2, r3
 8003f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f2e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10a      	bne.n	8003f4e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8003f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3c:	f383 8811 	msr	BASEPRI, r3
 8003f40:	f3bf 8f6f 	isb	sy
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	617b      	str	r3, [r7, #20]
}
 8003f4a:	bf00      	nop
 8003f4c:	e7fe      	b.n	8003f4c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f50:	699a      	ldr	r2, [r3, #24]
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	18d1      	adds	r1, r2, r3
 8003f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f5c:	f7ff ff06 	bl	8003d6c <prvInsertTimerInActiveList>
					break;
 8003f60:	e015      	b.n	8003f8e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f68:	f003 0302 	and.w	r3, r3, #2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d103      	bne.n	8003f78 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8003f70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f72:	f000 fbdd 	bl	8004730 <vPortFree>
 8003f76:	e00a      	b.n	8003f8e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f7e:	f023 0301 	bic.w	r3, r3, #1
 8003f82:	b2da      	uxtb	r2, r3
 8003f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003f8a:	e000      	b.n	8003f8e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8003f8c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f8e:	4b08      	ldr	r3, [pc, #32]	; (8003fb0 <prvProcessReceivedCommands+0x1c0>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	1d39      	adds	r1, r7, #4
 8003f94:	2200      	movs	r2, #0
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7fe fc16 	bl	80027c8 <xQueueReceive>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f47f af2a 	bne.w	8003df8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003fa4:	bf00      	nop
 8003fa6:	bf00      	nop
 8003fa8:	3730      	adds	r7, #48	; 0x30
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	20000d0c 	.word	0x20000d0c

08003fb4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b088      	sub	sp, #32
 8003fb8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003fba:	e048      	b.n	800404e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003fbc:	4b2d      	ldr	r3, [pc, #180]	; (8004074 <prvSwitchTimerLists+0xc0>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fc6:	4b2b      	ldr	r3, [pc, #172]	; (8004074 <prvSwitchTimerLists+0xc0>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	3304      	adds	r3, #4
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7fe f92f 	bl	8002238 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fe8:	f003 0304 	and.w	r3, r3, #4
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d02e      	beq.n	800404e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003ffa:	68ba      	ldr	r2, [r7, #8]
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d90e      	bls.n	8004020 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800400e:	4b19      	ldr	r3, [pc, #100]	; (8004074 <prvSwitchTimerLists+0xc0>)
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	3304      	adds	r3, #4
 8004016:	4619      	mov	r1, r3
 8004018:	4610      	mov	r0, r2
 800401a:	f7fe f8d4 	bl	80021c6 <vListInsert>
 800401e:	e016      	b.n	800404e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004020:	2300      	movs	r3, #0
 8004022:	9300      	str	r3, [sp, #0]
 8004024:	2300      	movs	r3, #0
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	2100      	movs	r1, #0
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	f7ff fd60 	bl	8003af0 <xTimerGenericCommand>
 8004030:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d10a      	bne.n	800404e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403c:	f383 8811 	msr	BASEPRI, r3
 8004040:	f3bf 8f6f 	isb	sy
 8004044:	f3bf 8f4f 	dsb	sy
 8004048:	603b      	str	r3, [r7, #0]
}
 800404a:	bf00      	nop
 800404c:	e7fe      	b.n	800404c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800404e:	4b09      	ldr	r3, [pc, #36]	; (8004074 <prvSwitchTimerLists+0xc0>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1b1      	bne.n	8003fbc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004058:	4b06      	ldr	r3, [pc, #24]	; (8004074 <prvSwitchTimerLists+0xc0>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800405e:	4b06      	ldr	r3, [pc, #24]	; (8004078 <prvSwitchTimerLists+0xc4>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a04      	ldr	r2, [pc, #16]	; (8004074 <prvSwitchTimerLists+0xc0>)
 8004064:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004066:	4a04      	ldr	r2, [pc, #16]	; (8004078 <prvSwitchTimerLists+0xc4>)
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	6013      	str	r3, [r2, #0]
}
 800406c:	bf00      	nop
 800406e:	3718      	adds	r7, #24
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	20000d04 	.word	0x20000d04
 8004078:	20000d08 	.word	0x20000d08

0800407c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004082:	f000 f967 	bl	8004354 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004086:	4b15      	ldr	r3, [pc, #84]	; (80040dc <prvCheckForValidListAndQueue+0x60>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d120      	bne.n	80040d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800408e:	4814      	ldr	r0, [pc, #80]	; (80040e0 <prvCheckForValidListAndQueue+0x64>)
 8004090:	f7fe f848 	bl	8002124 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004094:	4813      	ldr	r0, [pc, #76]	; (80040e4 <prvCheckForValidListAndQueue+0x68>)
 8004096:	f7fe f845 	bl	8002124 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800409a:	4b13      	ldr	r3, [pc, #76]	; (80040e8 <prvCheckForValidListAndQueue+0x6c>)
 800409c:	4a10      	ldr	r2, [pc, #64]	; (80040e0 <prvCheckForValidListAndQueue+0x64>)
 800409e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80040a0:	4b12      	ldr	r3, [pc, #72]	; (80040ec <prvCheckForValidListAndQueue+0x70>)
 80040a2:	4a10      	ldr	r2, [pc, #64]	; (80040e4 <prvCheckForValidListAndQueue+0x68>)
 80040a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80040a6:	2300      	movs	r3, #0
 80040a8:	9300      	str	r3, [sp, #0]
 80040aa:	4b11      	ldr	r3, [pc, #68]	; (80040f0 <prvCheckForValidListAndQueue+0x74>)
 80040ac:	4a11      	ldr	r2, [pc, #68]	; (80040f4 <prvCheckForValidListAndQueue+0x78>)
 80040ae:	2110      	movs	r1, #16
 80040b0:	200a      	movs	r0, #10
 80040b2:	f7fe f953 	bl	800235c <xQueueGenericCreateStatic>
 80040b6:	4603      	mov	r3, r0
 80040b8:	4a08      	ldr	r2, [pc, #32]	; (80040dc <prvCheckForValidListAndQueue+0x60>)
 80040ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80040bc:	4b07      	ldr	r3, [pc, #28]	; (80040dc <prvCheckForValidListAndQueue+0x60>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d005      	beq.n	80040d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80040c4:	4b05      	ldr	r3, [pc, #20]	; (80040dc <prvCheckForValidListAndQueue+0x60>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	490b      	ldr	r1, [pc, #44]	; (80040f8 <prvCheckForValidListAndQueue+0x7c>)
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7fe fd6c 	bl	8002ba8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80040d0:	f000 f970 	bl	80043b4 <vPortExitCritical>
}
 80040d4:	bf00      	nop
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	20000d0c 	.word	0x20000d0c
 80040e0:	20000cdc 	.word	0x20000cdc
 80040e4:	20000cf0 	.word	0x20000cf0
 80040e8:	20000d04 	.word	0x20000d04
 80040ec:	20000d08 	.word	0x20000d08
 80040f0:	20000db8 	.word	0x20000db8
 80040f4:	20000d18 	.word	0x20000d18
 80040f8:	08005328 	.word	0x08005328

080040fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	3b04      	subs	r3, #4
 800410c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004114:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	3b04      	subs	r3, #4
 800411a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	f023 0201 	bic.w	r2, r3, #1
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	3b04      	subs	r3, #4
 800412a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800412c:	4a0c      	ldr	r2, [pc, #48]	; (8004160 <pxPortInitialiseStack+0x64>)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	3b14      	subs	r3, #20
 8004136:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	3b04      	subs	r3, #4
 8004142:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f06f 0202 	mvn.w	r2, #2
 800414a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	3b20      	subs	r3, #32
 8004150:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004152:	68fb      	ldr	r3, [r7, #12]
}
 8004154:	4618      	mov	r0, r3
 8004156:	3714      	adds	r7, #20
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr
 8004160:	08004165 	.word	0x08004165

08004164 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800416a:	2300      	movs	r3, #0
 800416c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800416e:	4b12      	ldr	r3, [pc, #72]	; (80041b8 <prvTaskExitError+0x54>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004176:	d00a      	beq.n	800418e <prvTaskExitError+0x2a>
	__asm volatile
 8004178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800417c:	f383 8811 	msr	BASEPRI, r3
 8004180:	f3bf 8f6f 	isb	sy
 8004184:	f3bf 8f4f 	dsb	sy
 8004188:	60fb      	str	r3, [r7, #12]
}
 800418a:	bf00      	nop
 800418c:	e7fe      	b.n	800418c <prvTaskExitError+0x28>
	__asm volatile
 800418e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004192:	f383 8811 	msr	BASEPRI, r3
 8004196:	f3bf 8f6f 	isb	sy
 800419a:	f3bf 8f4f 	dsb	sy
 800419e:	60bb      	str	r3, [r7, #8]
}
 80041a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80041a2:	bf00      	nop
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d0fc      	beq.n	80041a4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80041aa:	bf00      	nop
 80041ac:	bf00      	nop
 80041ae:	3714      	adds	r7, #20
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr
 80041b8:	2000000c 	.word	0x2000000c
 80041bc:	00000000 	.word	0x00000000

080041c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80041c0:	4b07      	ldr	r3, [pc, #28]	; (80041e0 <pxCurrentTCBConst2>)
 80041c2:	6819      	ldr	r1, [r3, #0]
 80041c4:	6808      	ldr	r0, [r1, #0]
 80041c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041ca:	f380 8809 	msr	PSP, r0
 80041ce:	f3bf 8f6f 	isb	sy
 80041d2:	f04f 0000 	mov.w	r0, #0
 80041d6:	f380 8811 	msr	BASEPRI, r0
 80041da:	4770      	bx	lr
 80041dc:	f3af 8000 	nop.w

080041e0 <pxCurrentTCBConst2>:
 80041e0:	200007dc 	.word	0x200007dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80041e4:	bf00      	nop
 80041e6:	bf00      	nop

080041e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80041e8:	4808      	ldr	r0, [pc, #32]	; (800420c <prvPortStartFirstTask+0x24>)
 80041ea:	6800      	ldr	r0, [r0, #0]
 80041ec:	6800      	ldr	r0, [r0, #0]
 80041ee:	f380 8808 	msr	MSP, r0
 80041f2:	f04f 0000 	mov.w	r0, #0
 80041f6:	f380 8814 	msr	CONTROL, r0
 80041fa:	b662      	cpsie	i
 80041fc:	b661      	cpsie	f
 80041fe:	f3bf 8f4f 	dsb	sy
 8004202:	f3bf 8f6f 	isb	sy
 8004206:	df00      	svc	0
 8004208:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800420a:	bf00      	nop
 800420c:	e000ed08 	.word	0xe000ed08

08004210 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004216:	4b46      	ldr	r3, [pc, #280]	; (8004330 <xPortStartScheduler+0x120>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a46      	ldr	r2, [pc, #280]	; (8004334 <xPortStartScheduler+0x124>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d10a      	bne.n	8004236 <xPortStartScheduler+0x26>
	__asm volatile
 8004220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004224:	f383 8811 	msr	BASEPRI, r3
 8004228:	f3bf 8f6f 	isb	sy
 800422c:	f3bf 8f4f 	dsb	sy
 8004230:	613b      	str	r3, [r7, #16]
}
 8004232:	bf00      	nop
 8004234:	e7fe      	b.n	8004234 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004236:	4b3e      	ldr	r3, [pc, #248]	; (8004330 <xPortStartScheduler+0x120>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a3f      	ldr	r2, [pc, #252]	; (8004338 <xPortStartScheduler+0x128>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d10a      	bne.n	8004256 <xPortStartScheduler+0x46>
	__asm volatile
 8004240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004244:	f383 8811 	msr	BASEPRI, r3
 8004248:	f3bf 8f6f 	isb	sy
 800424c:	f3bf 8f4f 	dsb	sy
 8004250:	60fb      	str	r3, [r7, #12]
}
 8004252:	bf00      	nop
 8004254:	e7fe      	b.n	8004254 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004256:	4b39      	ldr	r3, [pc, #228]	; (800433c <xPortStartScheduler+0x12c>)
 8004258:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	b2db      	uxtb	r3, r3
 8004260:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	22ff      	movs	r2, #255	; 0xff
 8004266:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	b2db      	uxtb	r3, r3
 800426e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004270:	78fb      	ldrb	r3, [r7, #3]
 8004272:	b2db      	uxtb	r3, r3
 8004274:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004278:	b2da      	uxtb	r2, r3
 800427a:	4b31      	ldr	r3, [pc, #196]	; (8004340 <xPortStartScheduler+0x130>)
 800427c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800427e:	4b31      	ldr	r3, [pc, #196]	; (8004344 <xPortStartScheduler+0x134>)
 8004280:	2207      	movs	r2, #7
 8004282:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004284:	e009      	b.n	800429a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004286:	4b2f      	ldr	r3, [pc, #188]	; (8004344 <xPortStartScheduler+0x134>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	3b01      	subs	r3, #1
 800428c:	4a2d      	ldr	r2, [pc, #180]	; (8004344 <xPortStartScheduler+0x134>)
 800428e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004290:	78fb      	ldrb	r3, [r7, #3]
 8004292:	b2db      	uxtb	r3, r3
 8004294:	005b      	lsls	r3, r3, #1
 8004296:	b2db      	uxtb	r3, r3
 8004298:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800429a:	78fb      	ldrb	r3, [r7, #3]
 800429c:	b2db      	uxtb	r3, r3
 800429e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a2:	2b80      	cmp	r3, #128	; 0x80
 80042a4:	d0ef      	beq.n	8004286 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80042a6:	4b27      	ldr	r3, [pc, #156]	; (8004344 <xPortStartScheduler+0x134>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f1c3 0307 	rsb	r3, r3, #7
 80042ae:	2b04      	cmp	r3, #4
 80042b0:	d00a      	beq.n	80042c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80042b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b6:	f383 8811 	msr	BASEPRI, r3
 80042ba:	f3bf 8f6f 	isb	sy
 80042be:	f3bf 8f4f 	dsb	sy
 80042c2:	60bb      	str	r3, [r7, #8]
}
 80042c4:	bf00      	nop
 80042c6:	e7fe      	b.n	80042c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80042c8:	4b1e      	ldr	r3, [pc, #120]	; (8004344 <xPortStartScheduler+0x134>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	021b      	lsls	r3, r3, #8
 80042ce:	4a1d      	ldr	r2, [pc, #116]	; (8004344 <xPortStartScheduler+0x134>)
 80042d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80042d2:	4b1c      	ldr	r3, [pc, #112]	; (8004344 <xPortStartScheduler+0x134>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80042da:	4a1a      	ldr	r2, [pc, #104]	; (8004344 <xPortStartScheduler+0x134>)
 80042dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	b2da      	uxtb	r2, r3
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80042e6:	4b18      	ldr	r3, [pc, #96]	; (8004348 <xPortStartScheduler+0x138>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a17      	ldr	r2, [pc, #92]	; (8004348 <xPortStartScheduler+0x138>)
 80042ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80042f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80042f2:	4b15      	ldr	r3, [pc, #84]	; (8004348 <xPortStartScheduler+0x138>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a14      	ldr	r2, [pc, #80]	; (8004348 <xPortStartScheduler+0x138>)
 80042f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80042fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80042fe:	f000 f8dd 	bl	80044bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004302:	4b12      	ldr	r3, [pc, #72]	; (800434c <xPortStartScheduler+0x13c>)
 8004304:	2200      	movs	r2, #0
 8004306:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004308:	f000 f8fc 	bl	8004504 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800430c:	4b10      	ldr	r3, [pc, #64]	; (8004350 <xPortStartScheduler+0x140>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a0f      	ldr	r2, [pc, #60]	; (8004350 <xPortStartScheduler+0x140>)
 8004312:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004316:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004318:	f7ff ff66 	bl	80041e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800431c:	f7ff f854 	bl	80033c8 <vTaskSwitchContext>
	prvTaskExitError();
 8004320:	f7ff ff20 	bl	8004164 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3718      	adds	r7, #24
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	e000ed00 	.word	0xe000ed00
 8004334:	410fc271 	.word	0x410fc271
 8004338:	410fc270 	.word	0x410fc270
 800433c:	e000e400 	.word	0xe000e400
 8004340:	20000e08 	.word	0x20000e08
 8004344:	20000e0c 	.word	0x20000e0c
 8004348:	e000ed20 	.word	0xe000ed20
 800434c:	2000000c 	.word	0x2000000c
 8004350:	e000ef34 	.word	0xe000ef34

08004354 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
	__asm volatile
 800435a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435e:	f383 8811 	msr	BASEPRI, r3
 8004362:	f3bf 8f6f 	isb	sy
 8004366:	f3bf 8f4f 	dsb	sy
 800436a:	607b      	str	r3, [r7, #4]
}
 800436c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800436e:	4b0f      	ldr	r3, [pc, #60]	; (80043ac <vPortEnterCritical+0x58>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	3301      	adds	r3, #1
 8004374:	4a0d      	ldr	r2, [pc, #52]	; (80043ac <vPortEnterCritical+0x58>)
 8004376:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004378:	4b0c      	ldr	r3, [pc, #48]	; (80043ac <vPortEnterCritical+0x58>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d10f      	bne.n	80043a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004380:	4b0b      	ldr	r3, [pc, #44]	; (80043b0 <vPortEnterCritical+0x5c>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00a      	beq.n	80043a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800438a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438e:	f383 8811 	msr	BASEPRI, r3
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	f3bf 8f4f 	dsb	sy
 800439a:	603b      	str	r3, [r7, #0]
}
 800439c:	bf00      	nop
 800439e:	e7fe      	b.n	800439e <vPortEnterCritical+0x4a>
	}
}
 80043a0:	bf00      	nop
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr
 80043ac:	2000000c 	.word	0x2000000c
 80043b0:	e000ed04 	.word	0xe000ed04

080043b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80043ba:	4b12      	ldr	r3, [pc, #72]	; (8004404 <vPortExitCritical+0x50>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10a      	bne.n	80043d8 <vPortExitCritical+0x24>
	__asm volatile
 80043c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c6:	f383 8811 	msr	BASEPRI, r3
 80043ca:	f3bf 8f6f 	isb	sy
 80043ce:	f3bf 8f4f 	dsb	sy
 80043d2:	607b      	str	r3, [r7, #4]
}
 80043d4:	bf00      	nop
 80043d6:	e7fe      	b.n	80043d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80043d8:	4b0a      	ldr	r3, [pc, #40]	; (8004404 <vPortExitCritical+0x50>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	3b01      	subs	r3, #1
 80043de:	4a09      	ldr	r2, [pc, #36]	; (8004404 <vPortExitCritical+0x50>)
 80043e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80043e2:	4b08      	ldr	r3, [pc, #32]	; (8004404 <vPortExitCritical+0x50>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d105      	bne.n	80043f6 <vPortExitCritical+0x42>
 80043ea:	2300      	movs	r3, #0
 80043ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	f383 8811 	msr	BASEPRI, r3
}
 80043f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80043f6:	bf00      	nop
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	2000000c 	.word	0x2000000c
	...

08004410 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004410:	f3ef 8009 	mrs	r0, PSP
 8004414:	f3bf 8f6f 	isb	sy
 8004418:	4b15      	ldr	r3, [pc, #84]	; (8004470 <pxCurrentTCBConst>)
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	f01e 0f10 	tst.w	lr, #16
 8004420:	bf08      	it	eq
 8004422:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004426:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800442a:	6010      	str	r0, [r2, #0]
 800442c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004430:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004434:	f380 8811 	msr	BASEPRI, r0
 8004438:	f3bf 8f4f 	dsb	sy
 800443c:	f3bf 8f6f 	isb	sy
 8004440:	f7fe ffc2 	bl	80033c8 <vTaskSwitchContext>
 8004444:	f04f 0000 	mov.w	r0, #0
 8004448:	f380 8811 	msr	BASEPRI, r0
 800444c:	bc09      	pop	{r0, r3}
 800444e:	6819      	ldr	r1, [r3, #0]
 8004450:	6808      	ldr	r0, [r1, #0]
 8004452:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004456:	f01e 0f10 	tst.w	lr, #16
 800445a:	bf08      	it	eq
 800445c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004460:	f380 8809 	msr	PSP, r0
 8004464:	f3bf 8f6f 	isb	sy
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	f3af 8000 	nop.w

08004470 <pxCurrentTCBConst>:
 8004470:	200007dc 	.word	0x200007dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004474:	bf00      	nop
 8004476:	bf00      	nop

08004478 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
	__asm volatile
 800447e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004482:	f383 8811 	msr	BASEPRI, r3
 8004486:	f3bf 8f6f 	isb	sy
 800448a:	f3bf 8f4f 	dsb	sy
 800448e:	607b      	str	r3, [r7, #4]
}
 8004490:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004492:	f7fe fedf 	bl	8003254 <xTaskIncrementTick>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d003      	beq.n	80044a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800449c:	4b06      	ldr	r3, [pc, #24]	; (80044b8 <xPortSysTickHandler+0x40>)
 800449e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044a2:	601a      	str	r2, [r3, #0]
 80044a4:	2300      	movs	r3, #0
 80044a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	f383 8811 	msr	BASEPRI, r3
}
 80044ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80044b0:	bf00      	nop
 80044b2:	3708      	adds	r7, #8
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	e000ed04 	.word	0xe000ed04

080044bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80044bc:	b480      	push	{r7}
 80044be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80044c0:	4b0b      	ldr	r3, [pc, #44]	; (80044f0 <vPortSetupTimerInterrupt+0x34>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80044c6:	4b0b      	ldr	r3, [pc, #44]	; (80044f4 <vPortSetupTimerInterrupt+0x38>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80044cc:	4b0a      	ldr	r3, [pc, #40]	; (80044f8 <vPortSetupTimerInterrupt+0x3c>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a0a      	ldr	r2, [pc, #40]	; (80044fc <vPortSetupTimerInterrupt+0x40>)
 80044d2:	fba2 2303 	umull	r2, r3, r2, r3
 80044d6:	099b      	lsrs	r3, r3, #6
 80044d8:	4a09      	ldr	r2, [pc, #36]	; (8004500 <vPortSetupTimerInterrupt+0x44>)
 80044da:	3b01      	subs	r3, #1
 80044dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80044de:	4b04      	ldr	r3, [pc, #16]	; (80044f0 <vPortSetupTimerInterrupt+0x34>)
 80044e0:	2207      	movs	r2, #7
 80044e2:	601a      	str	r2, [r3, #0]
}
 80044e4:	bf00      	nop
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	e000e010 	.word	0xe000e010
 80044f4:	e000e018 	.word	0xe000e018
 80044f8:	20000000 	.word	0x20000000
 80044fc:	10624dd3 	.word	0x10624dd3
 8004500:	e000e014 	.word	0xe000e014

08004504 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004504:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004514 <vPortEnableVFP+0x10>
 8004508:	6801      	ldr	r1, [r0, #0]
 800450a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800450e:	6001      	str	r1, [r0, #0]
 8004510:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004512:	bf00      	nop
 8004514:	e000ed88 	.word	0xe000ed88

08004518 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800451e:	f3ef 8305 	mrs	r3, IPSR
 8004522:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2b0f      	cmp	r3, #15
 8004528:	d914      	bls.n	8004554 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800452a:	4a17      	ldr	r2, [pc, #92]	; (8004588 <vPortValidateInterruptPriority+0x70>)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4413      	add	r3, r2
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004534:	4b15      	ldr	r3, [pc, #84]	; (800458c <vPortValidateInterruptPriority+0x74>)
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	7afa      	ldrb	r2, [r7, #11]
 800453a:	429a      	cmp	r2, r3
 800453c:	d20a      	bcs.n	8004554 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800453e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004542:	f383 8811 	msr	BASEPRI, r3
 8004546:	f3bf 8f6f 	isb	sy
 800454a:	f3bf 8f4f 	dsb	sy
 800454e:	607b      	str	r3, [r7, #4]
}
 8004550:	bf00      	nop
 8004552:	e7fe      	b.n	8004552 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004554:	4b0e      	ldr	r3, [pc, #56]	; (8004590 <vPortValidateInterruptPriority+0x78>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800455c:	4b0d      	ldr	r3, [pc, #52]	; (8004594 <vPortValidateInterruptPriority+0x7c>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	429a      	cmp	r2, r3
 8004562:	d90a      	bls.n	800457a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004568:	f383 8811 	msr	BASEPRI, r3
 800456c:	f3bf 8f6f 	isb	sy
 8004570:	f3bf 8f4f 	dsb	sy
 8004574:	603b      	str	r3, [r7, #0]
}
 8004576:	bf00      	nop
 8004578:	e7fe      	b.n	8004578 <vPortValidateInterruptPriority+0x60>
	}
 800457a:	bf00      	nop
 800457c:	3714      	adds	r7, #20
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	e000e3f0 	.word	0xe000e3f0
 800458c:	20000e08 	.word	0x20000e08
 8004590:	e000ed0c 	.word	0xe000ed0c
 8004594:	20000e0c 	.word	0x20000e0c

08004598 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b08a      	sub	sp, #40	; 0x28
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80045a0:	2300      	movs	r3, #0
 80045a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80045a4:	f7fe fd9a 	bl	80030dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80045a8:	4b5b      	ldr	r3, [pc, #364]	; (8004718 <pvPortMalloc+0x180>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d101      	bne.n	80045b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80045b0:	f000 f920 	bl	80047f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80045b4:	4b59      	ldr	r3, [pc, #356]	; (800471c <pvPortMalloc+0x184>)
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4013      	ands	r3, r2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f040 8093 	bne.w	80046e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d01d      	beq.n	8004604 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80045c8:	2208      	movs	r2, #8
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4413      	add	r3, r2
 80045ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f003 0307 	and.w	r3, r3, #7
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d014      	beq.n	8004604 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f023 0307 	bic.w	r3, r3, #7
 80045e0:	3308      	adds	r3, #8
 80045e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f003 0307 	and.w	r3, r3, #7
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00a      	beq.n	8004604 <pvPortMalloc+0x6c>
	__asm volatile
 80045ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f2:	f383 8811 	msr	BASEPRI, r3
 80045f6:	f3bf 8f6f 	isb	sy
 80045fa:	f3bf 8f4f 	dsb	sy
 80045fe:	617b      	str	r3, [r7, #20]
}
 8004600:	bf00      	nop
 8004602:	e7fe      	b.n	8004602 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d06e      	beq.n	80046e8 <pvPortMalloc+0x150>
 800460a:	4b45      	ldr	r3, [pc, #276]	; (8004720 <pvPortMalloc+0x188>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	429a      	cmp	r2, r3
 8004612:	d869      	bhi.n	80046e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004614:	4b43      	ldr	r3, [pc, #268]	; (8004724 <pvPortMalloc+0x18c>)
 8004616:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004618:	4b42      	ldr	r3, [pc, #264]	; (8004724 <pvPortMalloc+0x18c>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800461e:	e004      	b.n	800462a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004622:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	429a      	cmp	r2, r3
 8004632:	d903      	bls.n	800463c <pvPortMalloc+0xa4>
 8004634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1f1      	bne.n	8004620 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800463c:	4b36      	ldr	r3, [pc, #216]	; (8004718 <pvPortMalloc+0x180>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004642:	429a      	cmp	r2, r3
 8004644:	d050      	beq.n	80046e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004646:	6a3b      	ldr	r3, [r7, #32]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2208      	movs	r2, #8
 800464c:	4413      	add	r3, r2
 800464e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	6a3b      	ldr	r3, [r7, #32]
 8004656:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	1ad2      	subs	r2, r2, r3
 8004660:	2308      	movs	r3, #8
 8004662:	005b      	lsls	r3, r3, #1
 8004664:	429a      	cmp	r2, r3
 8004666:	d91f      	bls.n	80046a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4413      	add	r3, r2
 800466e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	f003 0307 	and.w	r3, r3, #7
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00a      	beq.n	8004690 <pvPortMalloc+0xf8>
	__asm volatile
 800467a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800467e:	f383 8811 	msr	BASEPRI, r3
 8004682:	f3bf 8f6f 	isb	sy
 8004686:	f3bf 8f4f 	dsb	sy
 800468a:	613b      	str	r3, [r7, #16]
}
 800468c:	bf00      	nop
 800468e:	e7fe      	b.n	800468e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	1ad2      	subs	r2, r2, r3
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80046a2:	69b8      	ldr	r0, [r7, #24]
 80046a4:	f000 f908 	bl	80048b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80046a8:	4b1d      	ldr	r3, [pc, #116]	; (8004720 <pvPortMalloc+0x188>)
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	4a1b      	ldr	r2, [pc, #108]	; (8004720 <pvPortMalloc+0x188>)
 80046b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80046b6:	4b1a      	ldr	r3, [pc, #104]	; (8004720 <pvPortMalloc+0x188>)
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	4b1b      	ldr	r3, [pc, #108]	; (8004728 <pvPortMalloc+0x190>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d203      	bcs.n	80046ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80046c2:	4b17      	ldr	r3, [pc, #92]	; (8004720 <pvPortMalloc+0x188>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a18      	ldr	r2, [pc, #96]	; (8004728 <pvPortMalloc+0x190>)
 80046c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80046ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046cc:	685a      	ldr	r2, [r3, #4]
 80046ce:	4b13      	ldr	r3, [pc, #76]	; (800471c <pvPortMalloc+0x184>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	431a      	orrs	r2, r3
 80046d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80046d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046da:	2200      	movs	r2, #0
 80046dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80046de:	4b13      	ldr	r3, [pc, #76]	; (800472c <pvPortMalloc+0x194>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	3301      	adds	r3, #1
 80046e4:	4a11      	ldr	r2, [pc, #68]	; (800472c <pvPortMalloc+0x194>)
 80046e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80046e8:	f7fe fd06 	bl	80030f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	f003 0307 	and.w	r3, r3, #7
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00a      	beq.n	800470c <pvPortMalloc+0x174>
	__asm volatile
 80046f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fa:	f383 8811 	msr	BASEPRI, r3
 80046fe:	f3bf 8f6f 	isb	sy
 8004702:	f3bf 8f4f 	dsb	sy
 8004706:	60fb      	str	r3, [r7, #12]
}
 8004708:	bf00      	nop
 800470a:	e7fe      	b.n	800470a <pvPortMalloc+0x172>
	return pvReturn;
 800470c:	69fb      	ldr	r3, [r7, #28]
}
 800470e:	4618      	mov	r0, r3
 8004710:	3728      	adds	r7, #40	; 0x28
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	20004a18 	.word	0x20004a18
 800471c:	20004a2c 	.word	0x20004a2c
 8004720:	20004a1c 	.word	0x20004a1c
 8004724:	20004a10 	.word	0x20004a10
 8004728:	20004a20 	.word	0x20004a20
 800472c:	20004a24 	.word	0x20004a24

08004730 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d04d      	beq.n	80047de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004742:	2308      	movs	r3, #8
 8004744:	425b      	negs	r3, r3
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	4413      	add	r3, r2
 800474a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	685a      	ldr	r2, [r3, #4]
 8004754:	4b24      	ldr	r3, [pc, #144]	; (80047e8 <vPortFree+0xb8>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4013      	ands	r3, r2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10a      	bne.n	8004774 <vPortFree+0x44>
	__asm volatile
 800475e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004762:	f383 8811 	msr	BASEPRI, r3
 8004766:	f3bf 8f6f 	isb	sy
 800476a:	f3bf 8f4f 	dsb	sy
 800476e:	60fb      	str	r3, [r7, #12]
}
 8004770:	bf00      	nop
 8004772:	e7fe      	b.n	8004772 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00a      	beq.n	8004792 <vPortFree+0x62>
	__asm volatile
 800477c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004780:	f383 8811 	msr	BASEPRI, r3
 8004784:	f3bf 8f6f 	isb	sy
 8004788:	f3bf 8f4f 	dsb	sy
 800478c:	60bb      	str	r3, [r7, #8]
}
 800478e:	bf00      	nop
 8004790:	e7fe      	b.n	8004790 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	4b14      	ldr	r3, [pc, #80]	; (80047e8 <vPortFree+0xb8>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4013      	ands	r3, r2
 800479c:	2b00      	cmp	r3, #0
 800479e:	d01e      	beq.n	80047de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d11a      	bne.n	80047de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	685a      	ldr	r2, [r3, #4]
 80047ac:	4b0e      	ldr	r3, [pc, #56]	; (80047e8 <vPortFree+0xb8>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	43db      	mvns	r3, r3
 80047b2:	401a      	ands	r2, r3
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80047b8:	f7fe fc90 	bl	80030dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	685a      	ldr	r2, [r3, #4]
 80047c0:	4b0a      	ldr	r3, [pc, #40]	; (80047ec <vPortFree+0xbc>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4413      	add	r3, r2
 80047c6:	4a09      	ldr	r2, [pc, #36]	; (80047ec <vPortFree+0xbc>)
 80047c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80047ca:	6938      	ldr	r0, [r7, #16]
 80047cc:	f000 f874 	bl	80048b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80047d0:	4b07      	ldr	r3, [pc, #28]	; (80047f0 <vPortFree+0xc0>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	3301      	adds	r3, #1
 80047d6:	4a06      	ldr	r2, [pc, #24]	; (80047f0 <vPortFree+0xc0>)
 80047d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80047da:	f7fe fc8d 	bl	80030f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80047de:	bf00      	nop
 80047e0:	3718      	adds	r7, #24
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	20004a2c 	.word	0x20004a2c
 80047ec:	20004a1c 	.word	0x20004a1c
 80047f0:	20004a28 	.word	0x20004a28

080047f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80047fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80047fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004800:	4b27      	ldr	r3, [pc, #156]	; (80048a0 <prvHeapInit+0xac>)
 8004802:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f003 0307 	and.w	r3, r3, #7
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00c      	beq.n	8004828 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	3307      	adds	r3, #7
 8004812:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f023 0307 	bic.w	r3, r3, #7
 800481a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800481c:	68ba      	ldr	r2, [r7, #8]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	4a1f      	ldr	r2, [pc, #124]	; (80048a0 <prvHeapInit+0xac>)
 8004824:	4413      	add	r3, r2
 8004826:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800482c:	4a1d      	ldr	r2, [pc, #116]	; (80048a4 <prvHeapInit+0xb0>)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004832:	4b1c      	ldr	r3, [pc, #112]	; (80048a4 <prvHeapInit+0xb0>)
 8004834:	2200      	movs	r2, #0
 8004836:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	68ba      	ldr	r2, [r7, #8]
 800483c:	4413      	add	r3, r2
 800483e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004840:	2208      	movs	r2, #8
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	1a9b      	subs	r3, r3, r2
 8004846:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f023 0307 	bic.w	r3, r3, #7
 800484e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4a15      	ldr	r2, [pc, #84]	; (80048a8 <prvHeapInit+0xb4>)
 8004854:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004856:	4b14      	ldr	r3, [pc, #80]	; (80048a8 <prvHeapInit+0xb4>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2200      	movs	r2, #0
 800485c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800485e:	4b12      	ldr	r3, [pc, #72]	; (80048a8 <prvHeapInit+0xb4>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2200      	movs	r2, #0
 8004864:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	1ad2      	subs	r2, r2, r3
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004874:	4b0c      	ldr	r3, [pc, #48]	; (80048a8 <prvHeapInit+0xb4>)
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	4a0a      	ldr	r2, [pc, #40]	; (80048ac <prvHeapInit+0xb8>)
 8004882:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	4a09      	ldr	r2, [pc, #36]	; (80048b0 <prvHeapInit+0xbc>)
 800488a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800488c:	4b09      	ldr	r3, [pc, #36]	; (80048b4 <prvHeapInit+0xc0>)
 800488e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004892:	601a      	str	r2, [r3, #0]
}
 8004894:	bf00      	nop
 8004896:	3714      	adds	r7, #20
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr
 80048a0:	20000e10 	.word	0x20000e10
 80048a4:	20004a10 	.word	0x20004a10
 80048a8:	20004a18 	.word	0x20004a18
 80048ac:	20004a20 	.word	0x20004a20
 80048b0:	20004a1c 	.word	0x20004a1c
 80048b4:	20004a2c 	.word	0x20004a2c

080048b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80048c0:	4b28      	ldr	r3, [pc, #160]	; (8004964 <prvInsertBlockIntoFreeList+0xac>)
 80048c2:	60fb      	str	r3, [r7, #12]
 80048c4:	e002      	b.n	80048cc <prvInsertBlockIntoFreeList+0x14>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	60fb      	str	r3, [r7, #12]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d8f7      	bhi.n	80048c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	4413      	add	r3, r2
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d108      	bne.n	80048fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	685a      	ldr	r2, [r3, #4]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	441a      	add	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	441a      	add	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	429a      	cmp	r2, r3
 800490c:	d118      	bne.n	8004940 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	4b15      	ldr	r3, [pc, #84]	; (8004968 <prvInsertBlockIntoFreeList+0xb0>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	429a      	cmp	r2, r3
 8004918:	d00d      	beq.n	8004936 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685a      	ldr	r2, [r3, #4]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	441a      	add	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	601a      	str	r2, [r3, #0]
 8004934:	e008      	b.n	8004948 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004936:	4b0c      	ldr	r3, [pc, #48]	; (8004968 <prvInsertBlockIntoFreeList+0xb0>)
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	601a      	str	r2, [r3, #0]
 800493e:	e003      	b.n	8004948 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	429a      	cmp	r2, r3
 800494e:	d002      	beq.n	8004956 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004956:	bf00      	nop
 8004958:	3714      	adds	r7, #20
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	20004a10 	.word	0x20004a10
 8004968:	20004a18 	.word	0x20004a18

0800496c <std>:
 800496c:	2300      	movs	r3, #0
 800496e:	b510      	push	{r4, lr}
 8004970:	4604      	mov	r4, r0
 8004972:	e9c0 3300 	strd	r3, r3, [r0]
 8004976:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800497a:	6083      	str	r3, [r0, #8]
 800497c:	8181      	strh	r1, [r0, #12]
 800497e:	6643      	str	r3, [r0, #100]	; 0x64
 8004980:	81c2      	strh	r2, [r0, #14]
 8004982:	6183      	str	r3, [r0, #24]
 8004984:	4619      	mov	r1, r3
 8004986:	2208      	movs	r2, #8
 8004988:	305c      	adds	r0, #92	; 0x5c
 800498a:	f000 f9e5 	bl	8004d58 <memset>
 800498e:	4b0d      	ldr	r3, [pc, #52]	; (80049c4 <std+0x58>)
 8004990:	6263      	str	r3, [r4, #36]	; 0x24
 8004992:	4b0d      	ldr	r3, [pc, #52]	; (80049c8 <std+0x5c>)
 8004994:	62a3      	str	r3, [r4, #40]	; 0x28
 8004996:	4b0d      	ldr	r3, [pc, #52]	; (80049cc <std+0x60>)
 8004998:	62e3      	str	r3, [r4, #44]	; 0x2c
 800499a:	4b0d      	ldr	r3, [pc, #52]	; (80049d0 <std+0x64>)
 800499c:	6323      	str	r3, [r4, #48]	; 0x30
 800499e:	4b0d      	ldr	r3, [pc, #52]	; (80049d4 <std+0x68>)
 80049a0:	6224      	str	r4, [r4, #32]
 80049a2:	429c      	cmp	r4, r3
 80049a4:	d006      	beq.n	80049b4 <std+0x48>
 80049a6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80049aa:	4294      	cmp	r4, r2
 80049ac:	d002      	beq.n	80049b4 <std+0x48>
 80049ae:	33d0      	adds	r3, #208	; 0xd0
 80049b0:	429c      	cmp	r4, r3
 80049b2:	d105      	bne.n	80049c0 <std+0x54>
 80049b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80049b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049bc:	f000 ba44 	b.w	8004e48 <__retarget_lock_init_recursive>
 80049c0:	bd10      	pop	{r4, pc}
 80049c2:	bf00      	nop
 80049c4:	08004ba9 	.word	0x08004ba9
 80049c8:	08004bcb 	.word	0x08004bcb
 80049cc:	08004c03 	.word	0x08004c03
 80049d0:	08004c27 	.word	0x08004c27
 80049d4:	20004a30 	.word	0x20004a30

080049d8 <stdio_exit_handler>:
 80049d8:	4a02      	ldr	r2, [pc, #8]	; (80049e4 <stdio_exit_handler+0xc>)
 80049da:	4903      	ldr	r1, [pc, #12]	; (80049e8 <stdio_exit_handler+0x10>)
 80049dc:	4803      	ldr	r0, [pc, #12]	; (80049ec <stdio_exit_handler+0x14>)
 80049de:	f000 b869 	b.w	8004ab4 <_fwalk_sglue>
 80049e2:	bf00      	nop
 80049e4:	20000010 	.word	0x20000010
 80049e8:	08005169 	.word	0x08005169
 80049ec:	2000001c 	.word	0x2000001c

080049f0 <cleanup_stdio>:
 80049f0:	6841      	ldr	r1, [r0, #4]
 80049f2:	4b0c      	ldr	r3, [pc, #48]	; (8004a24 <cleanup_stdio+0x34>)
 80049f4:	4299      	cmp	r1, r3
 80049f6:	b510      	push	{r4, lr}
 80049f8:	4604      	mov	r4, r0
 80049fa:	d001      	beq.n	8004a00 <cleanup_stdio+0x10>
 80049fc:	f000 fbb4 	bl	8005168 <_fflush_r>
 8004a00:	68a1      	ldr	r1, [r4, #8]
 8004a02:	4b09      	ldr	r3, [pc, #36]	; (8004a28 <cleanup_stdio+0x38>)
 8004a04:	4299      	cmp	r1, r3
 8004a06:	d002      	beq.n	8004a0e <cleanup_stdio+0x1e>
 8004a08:	4620      	mov	r0, r4
 8004a0a:	f000 fbad 	bl	8005168 <_fflush_r>
 8004a0e:	68e1      	ldr	r1, [r4, #12]
 8004a10:	4b06      	ldr	r3, [pc, #24]	; (8004a2c <cleanup_stdio+0x3c>)
 8004a12:	4299      	cmp	r1, r3
 8004a14:	d004      	beq.n	8004a20 <cleanup_stdio+0x30>
 8004a16:	4620      	mov	r0, r4
 8004a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a1c:	f000 bba4 	b.w	8005168 <_fflush_r>
 8004a20:	bd10      	pop	{r4, pc}
 8004a22:	bf00      	nop
 8004a24:	20004a30 	.word	0x20004a30
 8004a28:	20004a98 	.word	0x20004a98
 8004a2c:	20004b00 	.word	0x20004b00

08004a30 <global_stdio_init.part.0>:
 8004a30:	b510      	push	{r4, lr}
 8004a32:	4b0b      	ldr	r3, [pc, #44]	; (8004a60 <global_stdio_init.part.0+0x30>)
 8004a34:	4c0b      	ldr	r4, [pc, #44]	; (8004a64 <global_stdio_init.part.0+0x34>)
 8004a36:	4a0c      	ldr	r2, [pc, #48]	; (8004a68 <global_stdio_init.part.0+0x38>)
 8004a38:	601a      	str	r2, [r3, #0]
 8004a3a:	4620      	mov	r0, r4
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	2104      	movs	r1, #4
 8004a40:	f7ff ff94 	bl	800496c <std>
 8004a44:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004a48:	2201      	movs	r2, #1
 8004a4a:	2109      	movs	r1, #9
 8004a4c:	f7ff ff8e 	bl	800496c <std>
 8004a50:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004a54:	2202      	movs	r2, #2
 8004a56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a5a:	2112      	movs	r1, #18
 8004a5c:	f7ff bf86 	b.w	800496c <std>
 8004a60:	20004b68 	.word	0x20004b68
 8004a64:	20004a30 	.word	0x20004a30
 8004a68:	080049d9 	.word	0x080049d9

08004a6c <__sfp_lock_acquire>:
 8004a6c:	4801      	ldr	r0, [pc, #4]	; (8004a74 <__sfp_lock_acquire+0x8>)
 8004a6e:	f000 b9ec 	b.w	8004e4a <__retarget_lock_acquire_recursive>
 8004a72:	bf00      	nop
 8004a74:	20004b71 	.word	0x20004b71

08004a78 <__sfp_lock_release>:
 8004a78:	4801      	ldr	r0, [pc, #4]	; (8004a80 <__sfp_lock_release+0x8>)
 8004a7a:	f000 b9e7 	b.w	8004e4c <__retarget_lock_release_recursive>
 8004a7e:	bf00      	nop
 8004a80:	20004b71 	.word	0x20004b71

08004a84 <__sinit>:
 8004a84:	b510      	push	{r4, lr}
 8004a86:	4604      	mov	r4, r0
 8004a88:	f7ff fff0 	bl	8004a6c <__sfp_lock_acquire>
 8004a8c:	6a23      	ldr	r3, [r4, #32]
 8004a8e:	b11b      	cbz	r3, 8004a98 <__sinit+0x14>
 8004a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a94:	f7ff bff0 	b.w	8004a78 <__sfp_lock_release>
 8004a98:	4b04      	ldr	r3, [pc, #16]	; (8004aac <__sinit+0x28>)
 8004a9a:	6223      	str	r3, [r4, #32]
 8004a9c:	4b04      	ldr	r3, [pc, #16]	; (8004ab0 <__sinit+0x2c>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1f5      	bne.n	8004a90 <__sinit+0xc>
 8004aa4:	f7ff ffc4 	bl	8004a30 <global_stdio_init.part.0>
 8004aa8:	e7f2      	b.n	8004a90 <__sinit+0xc>
 8004aaa:	bf00      	nop
 8004aac:	080049f1 	.word	0x080049f1
 8004ab0:	20004b68 	.word	0x20004b68

08004ab4 <_fwalk_sglue>:
 8004ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ab8:	4607      	mov	r7, r0
 8004aba:	4688      	mov	r8, r1
 8004abc:	4614      	mov	r4, r2
 8004abe:	2600      	movs	r6, #0
 8004ac0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ac4:	f1b9 0901 	subs.w	r9, r9, #1
 8004ac8:	d505      	bpl.n	8004ad6 <_fwalk_sglue+0x22>
 8004aca:	6824      	ldr	r4, [r4, #0]
 8004acc:	2c00      	cmp	r4, #0
 8004ace:	d1f7      	bne.n	8004ac0 <_fwalk_sglue+0xc>
 8004ad0:	4630      	mov	r0, r6
 8004ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ad6:	89ab      	ldrh	r3, [r5, #12]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d907      	bls.n	8004aec <_fwalk_sglue+0x38>
 8004adc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	d003      	beq.n	8004aec <_fwalk_sglue+0x38>
 8004ae4:	4629      	mov	r1, r5
 8004ae6:	4638      	mov	r0, r7
 8004ae8:	47c0      	blx	r8
 8004aea:	4306      	orrs	r6, r0
 8004aec:	3568      	adds	r5, #104	; 0x68
 8004aee:	e7e9      	b.n	8004ac4 <_fwalk_sglue+0x10>

08004af0 <_puts_r>:
 8004af0:	6a03      	ldr	r3, [r0, #32]
 8004af2:	b570      	push	{r4, r5, r6, lr}
 8004af4:	6884      	ldr	r4, [r0, #8]
 8004af6:	4605      	mov	r5, r0
 8004af8:	460e      	mov	r6, r1
 8004afa:	b90b      	cbnz	r3, 8004b00 <_puts_r+0x10>
 8004afc:	f7ff ffc2 	bl	8004a84 <__sinit>
 8004b00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b02:	07db      	lsls	r3, r3, #31
 8004b04:	d405      	bmi.n	8004b12 <_puts_r+0x22>
 8004b06:	89a3      	ldrh	r3, [r4, #12]
 8004b08:	0598      	lsls	r0, r3, #22
 8004b0a:	d402      	bmi.n	8004b12 <_puts_r+0x22>
 8004b0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b0e:	f000 f99c 	bl	8004e4a <__retarget_lock_acquire_recursive>
 8004b12:	89a3      	ldrh	r3, [r4, #12]
 8004b14:	0719      	lsls	r1, r3, #28
 8004b16:	d513      	bpl.n	8004b40 <_puts_r+0x50>
 8004b18:	6923      	ldr	r3, [r4, #16]
 8004b1a:	b18b      	cbz	r3, 8004b40 <_puts_r+0x50>
 8004b1c:	3e01      	subs	r6, #1
 8004b1e:	68a3      	ldr	r3, [r4, #8]
 8004b20:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004b24:	3b01      	subs	r3, #1
 8004b26:	60a3      	str	r3, [r4, #8]
 8004b28:	b9e9      	cbnz	r1, 8004b66 <_puts_r+0x76>
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	da2e      	bge.n	8004b8c <_puts_r+0x9c>
 8004b2e:	4622      	mov	r2, r4
 8004b30:	210a      	movs	r1, #10
 8004b32:	4628      	mov	r0, r5
 8004b34:	f000 f87b 	bl	8004c2e <__swbuf_r>
 8004b38:	3001      	adds	r0, #1
 8004b3a:	d007      	beq.n	8004b4c <_puts_r+0x5c>
 8004b3c:	250a      	movs	r5, #10
 8004b3e:	e007      	b.n	8004b50 <_puts_r+0x60>
 8004b40:	4621      	mov	r1, r4
 8004b42:	4628      	mov	r0, r5
 8004b44:	f000 f8b0 	bl	8004ca8 <__swsetup_r>
 8004b48:	2800      	cmp	r0, #0
 8004b4a:	d0e7      	beq.n	8004b1c <_puts_r+0x2c>
 8004b4c:	f04f 35ff 	mov.w	r5, #4294967295
 8004b50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b52:	07da      	lsls	r2, r3, #31
 8004b54:	d405      	bmi.n	8004b62 <_puts_r+0x72>
 8004b56:	89a3      	ldrh	r3, [r4, #12]
 8004b58:	059b      	lsls	r3, r3, #22
 8004b5a:	d402      	bmi.n	8004b62 <_puts_r+0x72>
 8004b5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b5e:	f000 f975 	bl	8004e4c <__retarget_lock_release_recursive>
 8004b62:	4628      	mov	r0, r5
 8004b64:	bd70      	pop	{r4, r5, r6, pc}
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	da04      	bge.n	8004b74 <_puts_r+0x84>
 8004b6a:	69a2      	ldr	r2, [r4, #24]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	dc06      	bgt.n	8004b7e <_puts_r+0x8e>
 8004b70:	290a      	cmp	r1, #10
 8004b72:	d004      	beq.n	8004b7e <_puts_r+0x8e>
 8004b74:	6823      	ldr	r3, [r4, #0]
 8004b76:	1c5a      	adds	r2, r3, #1
 8004b78:	6022      	str	r2, [r4, #0]
 8004b7a:	7019      	strb	r1, [r3, #0]
 8004b7c:	e7cf      	b.n	8004b1e <_puts_r+0x2e>
 8004b7e:	4622      	mov	r2, r4
 8004b80:	4628      	mov	r0, r5
 8004b82:	f000 f854 	bl	8004c2e <__swbuf_r>
 8004b86:	3001      	adds	r0, #1
 8004b88:	d1c9      	bne.n	8004b1e <_puts_r+0x2e>
 8004b8a:	e7df      	b.n	8004b4c <_puts_r+0x5c>
 8004b8c:	6823      	ldr	r3, [r4, #0]
 8004b8e:	250a      	movs	r5, #10
 8004b90:	1c5a      	adds	r2, r3, #1
 8004b92:	6022      	str	r2, [r4, #0]
 8004b94:	701d      	strb	r5, [r3, #0]
 8004b96:	e7db      	b.n	8004b50 <_puts_r+0x60>

08004b98 <puts>:
 8004b98:	4b02      	ldr	r3, [pc, #8]	; (8004ba4 <puts+0xc>)
 8004b9a:	4601      	mov	r1, r0
 8004b9c:	6818      	ldr	r0, [r3, #0]
 8004b9e:	f7ff bfa7 	b.w	8004af0 <_puts_r>
 8004ba2:	bf00      	nop
 8004ba4:	20000068 	.word	0x20000068

08004ba8 <__sread>:
 8004ba8:	b510      	push	{r4, lr}
 8004baa:	460c      	mov	r4, r1
 8004bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bb0:	f000 f8fc 	bl	8004dac <_read_r>
 8004bb4:	2800      	cmp	r0, #0
 8004bb6:	bfab      	itete	ge
 8004bb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004bba:	89a3      	ldrhlt	r3, [r4, #12]
 8004bbc:	181b      	addge	r3, r3, r0
 8004bbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004bc2:	bfac      	ite	ge
 8004bc4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004bc6:	81a3      	strhlt	r3, [r4, #12]
 8004bc8:	bd10      	pop	{r4, pc}

08004bca <__swrite>:
 8004bca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bce:	461f      	mov	r7, r3
 8004bd0:	898b      	ldrh	r3, [r1, #12]
 8004bd2:	05db      	lsls	r3, r3, #23
 8004bd4:	4605      	mov	r5, r0
 8004bd6:	460c      	mov	r4, r1
 8004bd8:	4616      	mov	r6, r2
 8004bda:	d505      	bpl.n	8004be8 <__swrite+0x1e>
 8004bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004be0:	2302      	movs	r3, #2
 8004be2:	2200      	movs	r2, #0
 8004be4:	f000 f8d0 	bl	8004d88 <_lseek_r>
 8004be8:	89a3      	ldrh	r3, [r4, #12]
 8004bea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bf2:	81a3      	strh	r3, [r4, #12]
 8004bf4:	4632      	mov	r2, r6
 8004bf6:	463b      	mov	r3, r7
 8004bf8:	4628      	mov	r0, r5
 8004bfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004bfe:	f000 b8e7 	b.w	8004dd0 <_write_r>

08004c02 <__sseek>:
 8004c02:	b510      	push	{r4, lr}
 8004c04:	460c      	mov	r4, r1
 8004c06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c0a:	f000 f8bd 	bl	8004d88 <_lseek_r>
 8004c0e:	1c43      	adds	r3, r0, #1
 8004c10:	89a3      	ldrh	r3, [r4, #12]
 8004c12:	bf15      	itete	ne
 8004c14:	6560      	strne	r0, [r4, #84]	; 0x54
 8004c16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c1e:	81a3      	strheq	r3, [r4, #12]
 8004c20:	bf18      	it	ne
 8004c22:	81a3      	strhne	r3, [r4, #12]
 8004c24:	bd10      	pop	{r4, pc}

08004c26 <__sclose>:
 8004c26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c2a:	f000 b89d 	b.w	8004d68 <_close_r>

08004c2e <__swbuf_r>:
 8004c2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c30:	460e      	mov	r6, r1
 8004c32:	4614      	mov	r4, r2
 8004c34:	4605      	mov	r5, r0
 8004c36:	b118      	cbz	r0, 8004c40 <__swbuf_r+0x12>
 8004c38:	6a03      	ldr	r3, [r0, #32]
 8004c3a:	b90b      	cbnz	r3, 8004c40 <__swbuf_r+0x12>
 8004c3c:	f7ff ff22 	bl	8004a84 <__sinit>
 8004c40:	69a3      	ldr	r3, [r4, #24]
 8004c42:	60a3      	str	r3, [r4, #8]
 8004c44:	89a3      	ldrh	r3, [r4, #12]
 8004c46:	071a      	lsls	r2, r3, #28
 8004c48:	d525      	bpl.n	8004c96 <__swbuf_r+0x68>
 8004c4a:	6923      	ldr	r3, [r4, #16]
 8004c4c:	b31b      	cbz	r3, 8004c96 <__swbuf_r+0x68>
 8004c4e:	6823      	ldr	r3, [r4, #0]
 8004c50:	6922      	ldr	r2, [r4, #16]
 8004c52:	1a98      	subs	r0, r3, r2
 8004c54:	6963      	ldr	r3, [r4, #20]
 8004c56:	b2f6      	uxtb	r6, r6
 8004c58:	4283      	cmp	r3, r0
 8004c5a:	4637      	mov	r7, r6
 8004c5c:	dc04      	bgt.n	8004c68 <__swbuf_r+0x3a>
 8004c5e:	4621      	mov	r1, r4
 8004c60:	4628      	mov	r0, r5
 8004c62:	f000 fa81 	bl	8005168 <_fflush_r>
 8004c66:	b9e0      	cbnz	r0, 8004ca2 <__swbuf_r+0x74>
 8004c68:	68a3      	ldr	r3, [r4, #8]
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	60a3      	str	r3, [r4, #8]
 8004c6e:	6823      	ldr	r3, [r4, #0]
 8004c70:	1c5a      	adds	r2, r3, #1
 8004c72:	6022      	str	r2, [r4, #0]
 8004c74:	701e      	strb	r6, [r3, #0]
 8004c76:	6962      	ldr	r2, [r4, #20]
 8004c78:	1c43      	adds	r3, r0, #1
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d004      	beq.n	8004c88 <__swbuf_r+0x5a>
 8004c7e:	89a3      	ldrh	r3, [r4, #12]
 8004c80:	07db      	lsls	r3, r3, #31
 8004c82:	d506      	bpl.n	8004c92 <__swbuf_r+0x64>
 8004c84:	2e0a      	cmp	r6, #10
 8004c86:	d104      	bne.n	8004c92 <__swbuf_r+0x64>
 8004c88:	4621      	mov	r1, r4
 8004c8a:	4628      	mov	r0, r5
 8004c8c:	f000 fa6c 	bl	8005168 <_fflush_r>
 8004c90:	b938      	cbnz	r0, 8004ca2 <__swbuf_r+0x74>
 8004c92:	4638      	mov	r0, r7
 8004c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c96:	4621      	mov	r1, r4
 8004c98:	4628      	mov	r0, r5
 8004c9a:	f000 f805 	bl	8004ca8 <__swsetup_r>
 8004c9e:	2800      	cmp	r0, #0
 8004ca0:	d0d5      	beq.n	8004c4e <__swbuf_r+0x20>
 8004ca2:	f04f 37ff 	mov.w	r7, #4294967295
 8004ca6:	e7f4      	b.n	8004c92 <__swbuf_r+0x64>

08004ca8 <__swsetup_r>:
 8004ca8:	b538      	push	{r3, r4, r5, lr}
 8004caa:	4b2a      	ldr	r3, [pc, #168]	; (8004d54 <__swsetup_r+0xac>)
 8004cac:	4605      	mov	r5, r0
 8004cae:	6818      	ldr	r0, [r3, #0]
 8004cb0:	460c      	mov	r4, r1
 8004cb2:	b118      	cbz	r0, 8004cbc <__swsetup_r+0x14>
 8004cb4:	6a03      	ldr	r3, [r0, #32]
 8004cb6:	b90b      	cbnz	r3, 8004cbc <__swsetup_r+0x14>
 8004cb8:	f7ff fee4 	bl	8004a84 <__sinit>
 8004cbc:	89a3      	ldrh	r3, [r4, #12]
 8004cbe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004cc2:	0718      	lsls	r0, r3, #28
 8004cc4:	d422      	bmi.n	8004d0c <__swsetup_r+0x64>
 8004cc6:	06d9      	lsls	r1, r3, #27
 8004cc8:	d407      	bmi.n	8004cda <__swsetup_r+0x32>
 8004cca:	2309      	movs	r3, #9
 8004ccc:	602b      	str	r3, [r5, #0]
 8004cce:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004cd2:	81a3      	strh	r3, [r4, #12]
 8004cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd8:	e034      	b.n	8004d44 <__swsetup_r+0x9c>
 8004cda:	0758      	lsls	r0, r3, #29
 8004cdc:	d512      	bpl.n	8004d04 <__swsetup_r+0x5c>
 8004cde:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ce0:	b141      	cbz	r1, 8004cf4 <__swsetup_r+0x4c>
 8004ce2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ce6:	4299      	cmp	r1, r3
 8004ce8:	d002      	beq.n	8004cf0 <__swsetup_r+0x48>
 8004cea:	4628      	mov	r0, r5
 8004cec:	f000 f8be 	bl	8004e6c <_free_r>
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	6363      	str	r3, [r4, #52]	; 0x34
 8004cf4:	89a3      	ldrh	r3, [r4, #12]
 8004cf6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004cfa:	81a3      	strh	r3, [r4, #12]
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	6063      	str	r3, [r4, #4]
 8004d00:	6923      	ldr	r3, [r4, #16]
 8004d02:	6023      	str	r3, [r4, #0]
 8004d04:	89a3      	ldrh	r3, [r4, #12]
 8004d06:	f043 0308 	orr.w	r3, r3, #8
 8004d0a:	81a3      	strh	r3, [r4, #12]
 8004d0c:	6923      	ldr	r3, [r4, #16]
 8004d0e:	b94b      	cbnz	r3, 8004d24 <__swsetup_r+0x7c>
 8004d10:	89a3      	ldrh	r3, [r4, #12]
 8004d12:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004d16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d1a:	d003      	beq.n	8004d24 <__swsetup_r+0x7c>
 8004d1c:	4621      	mov	r1, r4
 8004d1e:	4628      	mov	r0, r5
 8004d20:	f000 fa70 	bl	8005204 <__smakebuf_r>
 8004d24:	89a0      	ldrh	r0, [r4, #12]
 8004d26:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d2a:	f010 0301 	ands.w	r3, r0, #1
 8004d2e:	d00a      	beq.n	8004d46 <__swsetup_r+0x9e>
 8004d30:	2300      	movs	r3, #0
 8004d32:	60a3      	str	r3, [r4, #8]
 8004d34:	6963      	ldr	r3, [r4, #20]
 8004d36:	425b      	negs	r3, r3
 8004d38:	61a3      	str	r3, [r4, #24]
 8004d3a:	6923      	ldr	r3, [r4, #16]
 8004d3c:	b943      	cbnz	r3, 8004d50 <__swsetup_r+0xa8>
 8004d3e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004d42:	d1c4      	bne.n	8004cce <__swsetup_r+0x26>
 8004d44:	bd38      	pop	{r3, r4, r5, pc}
 8004d46:	0781      	lsls	r1, r0, #30
 8004d48:	bf58      	it	pl
 8004d4a:	6963      	ldrpl	r3, [r4, #20]
 8004d4c:	60a3      	str	r3, [r4, #8]
 8004d4e:	e7f4      	b.n	8004d3a <__swsetup_r+0x92>
 8004d50:	2000      	movs	r0, #0
 8004d52:	e7f7      	b.n	8004d44 <__swsetup_r+0x9c>
 8004d54:	20000068 	.word	0x20000068

08004d58 <memset>:
 8004d58:	4402      	add	r2, r0
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d100      	bne.n	8004d62 <memset+0xa>
 8004d60:	4770      	bx	lr
 8004d62:	f803 1b01 	strb.w	r1, [r3], #1
 8004d66:	e7f9      	b.n	8004d5c <memset+0x4>

08004d68 <_close_r>:
 8004d68:	b538      	push	{r3, r4, r5, lr}
 8004d6a:	4d06      	ldr	r5, [pc, #24]	; (8004d84 <_close_r+0x1c>)
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	4604      	mov	r4, r0
 8004d70:	4608      	mov	r0, r1
 8004d72:	602b      	str	r3, [r5, #0]
 8004d74:	f7fb fde7 	bl	8000946 <_close>
 8004d78:	1c43      	adds	r3, r0, #1
 8004d7a:	d102      	bne.n	8004d82 <_close_r+0x1a>
 8004d7c:	682b      	ldr	r3, [r5, #0]
 8004d7e:	b103      	cbz	r3, 8004d82 <_close_r+0x1a>
 8004d80:	6023      	str	r3, [r4, #0]
 8004d82:	bd38      	pop	{r3, r4, r5, pc}
 8004d84:	20004b6c 	.word	0x20004b6c

08004d88 <_lseek_r>:
 8004d88:	b538      	push	{r3, r4, r5, lr}
 8004d8a:	4d07      	ldr	r5, [pc, #28]	; (8004da8 <_lseek_r+0x20>)
 8004d8c:	4604      	mov	r4, r0
 8004d8e:	4608      	mov	r0, r1
 8004d90:	4611      	mov	r1, r2
 8004d92:	2200      	movs	r2, #0
 8004d94:	602a      	str	r2, [r5, #0]
 8004d96:	461a      	mov	r2, r3
 8004d98:	f7fb fdfc 	bl	8000994 <_lseek>
 8004d9c:	1c43      	adds	r3, r0, #1
 8004d9e:	d102      	bne.n	8004da6 <_lseek_r+0x1e>
 8004da0:	682b      	ldr	r3, [r5, #0]
 8004da2:	b103      	cbz	r3, 8004da6 <_lseek_r+0x1e>
 8004da4:	6023      	str	r3, [r4, #0]
 8004da6:	bd38      	pop	{r3, r4, r5, pc}
 8004da8:	20004b6c 	.word	0x20004b6c

08004dac <_read_r>:
 8004dac:	b538      	push	{r3, r4, r5, lr}
 8004dae:	4d07      	ldr	r5, [pc, #28]	; (8004dcc <_read_r+0x20>)
 8004db0:	4604      	mov	r4, r0
 8004db2:	4608      	mov	r0, r1
 8004db4:	4611      	mov	r1, r2
 8004db6:	2200      	movs	r2, #0
 8004db8:	602a      	str	r2, [r5, #0]
 8004dba:	461a      	mov	r2, r3
 8004dbc:	f7fb fd8a 	bl	80008d4 <_read>
 8004dc0:	1c43      	adds	r3, r0, #1
 8004dc2:	d102      	bne.n	8004dca <_read_r+0x1e>
 8004dc4:	682b      	ldr	r3, [r5, #0]
 8004dc6:	b103      	cbz	r3, 8004dca <_read_r+0x1e>
 8004dc8:	6023      	str	r3, [r4, #0]
 8004dca:	bd38      	pop	{r3, r4, r5, pc}
 8004dcc:	20004b6c 	.word	0x20004b6c

08004dd0 <_write_r>:
 8004dd0:	b538      	push	{r3, r4, r5, lr}
 8004dd2:	4d07      	ldr	r5, [pc, #28]	; (8004df0 <_write_r+0x20>)
 8004dd4:	4604      	mov	r4, r0
 8004dd6:	4608      	mov	r0, r1
 8004dd8:	4611      	mov	r1, r2
 8004dda:	2200      	movs	r2, #0
 8004ddc:	602a      	str	r2, [r5, #0]
 8004dde:	461a      	mov	r2, r3
 8004de0:	f7fb fd95 	bl	800090e <_write>
 8004de4:	1c43      	adds	r3, r0, #1
 8004de6:	d102      	bne.n	8004dee <_write_r+0x1e>
 8004de8:	682b      	ldr	r3, [r5, #0]
 8004dea:	b103      	cbz	r3, 8004dee <_write_r+0x1e>
 8004dec:	6023      	str	r3, [r4, #0]
 8004dee:	bd38      	pop	{r3, r4, r5, pc}
 8004df0:	20004b6c 	.word	0x20004b6c

08004df4 <__errno>:
 8004df4:	4b01      	ldr	r3, [pc, #4]	; (8004dfc <__errno+0x8>)
 8004df6:	6818      	ldr	r0, [r3, #0]
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	20000068 	.word	0x20000068

08004e00 <__libc_init_array>:
 8004e00:	b570      	push	{r4, r5, r6, lr}
 8004e02:	4d0d      	ldr	r5, [pc, #52]	; (8004e38 <__libc_init_array+0x38>)
 8004e04:	4c0d      	ldr	r4, [pc, #52]	; (8004e3c <__libc_init_array+0x3c>)
 8004e06:	1b64      	subs	r4, r4, r5
 8004e08:	10a4      	asrs	r4, r4, #2
 8004e0a:	2600      	movs	r6, #0
 8004e0c:	42a6      	cmp	r6, r4
 8004e0e:	d109      	bne.n	8004e24 <__libc_init_array+0x24>
 8004e10:	4d0b      	ldr	r5, [pc, #44]	; (8004e40 <__libc_init_array+0x40>)
 8004e12:	4c0c      	ldr	r4, [pc, #48]	; (8004e44 <__libc_init_array+0x44>)
 8004e14:	f000 fa64 	bl	80052e0 <_init>
 8004e18:	1b64      	subs	r4, r4, r5
 8004e1a:	10a4      	asrs	r4, r4, #2
 8004e1c:	2600      	movs	r6, #0
 8004e1e:	42a6      	cmp	r6, r4
 8004e20:	d105      	bne.n	8004e2e <__libc_init_array+0x2e>
 8004e22:	bd70      	pop	{r4, r5, r6, pc}
 8004e24:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e28:	4798      	blx	r3
 8004e2a:	3601      	adds	r6, #1
 8004e2c:	e7ee      	b.n	8004e0c <__libc_init_array+0xc>
 8004e2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e32:	4798      	blx	r3
 8004e34:	3601      	adds	r6, #1
 8004e36:	e7f2      	b.n	8004e1e <__libc_init_array+0x1e>
 8004e38:	08005398 	.word	0x08005398
 8004e3c:	08005398 	.word	0x08005398
 8004e40:	08005398 	.word	0x08005398
 8004e44:	0800539c 	.word	0x0800539c

08004e48 <__retarget_lock_init_recursive>:
 8004e48:	4770      	bx	lr

08004e4a <__retarget_lock_acquire_recursive>:
 8004e4a:	4770      	bx	lr

08004e4c <__retarget_lock_release_recursive>:
 8004e4c:	4770      	bx	lr

08004e4e <memcpy>:
 8004e4e:	440a      	add	r2, r1
 8004e50:	4291      	cmp	r1, r2
 8004e52:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e56:	d100      	bne.n	8004e5a <memcpy+0xc>
 8004e58:	4770      	bx	lr
 8004e5a:	b510      	push	{r4, lr}
 8004e5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e64:	4291      	cmp	r1, r2
 8004e66:	d1f9      	bne.n	8004e5c <memcpy+0xe>
 8004e68:	bd10      	pop	{r4, pc}
	...

08004e6c <_free_r>:
 8004e6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e6e:	2900      	cmp	r1, #0
 8004e70:	d044      	beq.n	8004efc <_free_r+0x90>
 8004e72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e76:	9001      	str	r0, [sp, #4]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	f1a1 0404 	sub.w	r4, r1, #4
 8004e7e:	bfb8      	it	lt
 8004e80:	18e4      	addlt	r4, r4, r3
 8004e82:	f000 f8df 	bl	8005044 <__malloc_lock>
 8004e86:	4a1e      	ldr	r2, [pc, #120]	; (8004f00 <_free_r+0x94>)
 8004e88:	9801      	ldr	r0, [sp, #4]
 8004e8a:	6813      	ldr	r3, [r2, #0]
 8004e8c:	b933      	cbnz	r3, 8004e9c <_free_r+0x30>
 8004e8e:	6063      	str	r3, [r4, #4]
 8004e90:	6014      	str	r4, [r2, #0]
 8004e92:	b003      	add	sp, #12
 8004e94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e98:	f000 b8da 	b.w	8005050 <__malloc_unlock>
 8004e9c:	42a3      	cmp	r3, r4
 8004e9e:	d908      	bls.n	8004eb2 <_free_r+0x46>
 8004ea0:	6825      	ldr	r5, [r4, #0]
 8004ea2:	1961      	adds	r1, r4, r5
 8004ea4:	428b      	cmp	r3, r1
 8004ea6:	bf01      	itttt	eq
 8004ea8:	6819      	ldreq	r1, [r3, #0]
 8004eaa:	685b      	ldreq	r3, [r3, #4]
 8004eac:	1949      	addeq	r1, r1, r5
 8004eae:	6021      	streq	r1, [r4, #0]
 8004eb0:	e7ed      	b.n	8004e8e <_free_r+0x22>
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	b10b      	cbz	r3, 8004ebc <_free_r+0x50>
 8004eb8:	42a3      	cmp	r3, r4
 8004eba:	d9fa      	bls.n	8004eb2 <_free_r+0x46>
 8004ebc:	6811      	ldr	r1, [r2, #0]
 8004ebe:	1855      	adds	r5, r2, r1
 8004ec0:	42a5      	cmp	r5, r4
 8004ec2:	d10b      	bne.n	8004edc <_free_r+0x70>
 8004ec4:	6824      	ldr	r4, [r4, #0]
 8004ec6:	4421      	add	r1, r4
 8004ec8:	1854      	adds	r4, r2, r1
 8004eca:	42a3      	cmp	r3, r4
 8004ecc:	6011      	str	r1, [r2, #0]
 8004ece:	d1e0      	bne.n	8004e92 <_free_r+0x26>
 8004ed0:	681c      	ldr	r4, [r3, #0]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	6053      	str	r3, [r2, #4]
 8004ed6:	440c      	add	r4, r1
 8004ed8:	6014      	str	r4, [r2, #0]
 8004eda:	e7da      	b.n	8004e92 <_free_r+0x26>
 8004edc:	d902      	bls.n	8004ee4 <_free_r+0x78>
 8004ede:	230c      	movs	r3, #12
 8004ee0:	6003      	str	r3, [r0, #0]
 8004ee2:	e7d6      	b.n	8004e92 <_free_r+0x26>
 8004ee4:	6825      	ldr	r5, [r4, #0]
 8004ee6:	1961      	adds	r1, r4, r5
 8004ee8:	428b      	cmp	r3, r1
 8004eea:	bf04      	itt	eq
 8004eec:	6819      	ldreq	r1, [r3, #0]
 8004eee:	685b      	ldreq	r3, [r3, #4]
 8004ef0:	6063      	str	r3, [r4, #4]
 8004ef2:	bf04      	itt	eq
 8004ef4:	1949      	addeq	r1, r1, r5
 8004ef6:	6021      	streq	r1, [r4, #0]
 8004ef8:	6054      	str	r4, [r2, #4]
 8004efa:	e7ca      	b.n	8004e92 <_free_r+0x26>
 8004efc:	b003      	add	sp, #12
 8004efe:	bd30      	pop	{r4, r5, pc}
 8004f00:	20004b74 	.word	0x20004b74

08004f04 <sbrk_aligned>:
 8004f04:	b570      	push	{r4, r5, r6, lr}
 8004f06:	4e0e      	ldr	r6, [pc, #56]	; (8004f40 <sbrk_aligned+0x3c>)
 8004f08:	460c      	mov	r4, r1
 8004f0a:	6831      	ldr	r1, [r6, #0]
 8004f0c:	4605      	mov	r5, r0
 8004f0e:	b911      	cbnz	r1, 8004f16 <sbrk_aligned+0x12>
 8004f10:	f000 f9d6 	bl	80052c0 <_sbrk_r>
 8004f14:	6030      	str	r0, [r6, #0]
 8004f16:	4621      	mov	r1, r4
 8004f18:	4628      	mov	r0, r5
 8004f1a:	f000 f9d1 	bl	80052c0 <_sbrk_r>
 8004f1e:	1c43      	adds	r3, r0, #1
 8004f20:	d00a      	beq.n	8004f38 <sbrk_aligned+0x34>
 8004f22:	1cc4      	adds	r4, r0, #3
 8004f24:	f024 0403 	bic.w	r4, r4, #3
 8004f28:	42a0      	cmp	r0, r4
 8004f2a:	d007      	beq.n	8004f3c <sbrk_aligned+0x38>
 8004f2c:	1a21      	subs	r1, r4, r0
 8004f2e:	4628      	mov	r0, r5
 8004f30:	f000 f9c6 	bl	80052c0 <_sbrk_r>
 8004f34:	3001      	adds	r0, #1
 8004f36:	d101      	bne.n	8004f3c <sbrk_aligned+0x38>
 8004f38:	f04f 34ff 	mov.w	r4, #4294967295
 8004f3c:	4620      	mov	r0, r4
 8004f3e:	bd70      	pop	{r4, r5, r6, pc}
 8004f40:	20004b78 	.word	0x20004b78

08004f44 <_malloc_r>:
 8004f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f48:	1ccd      	adds	r5, r1, #3
 8004f4a:	f025 0503 	bic.w	r5, r5, #3
 8004f4e:	3508      	adds	r5, #8
 8004f50:	2d0c      	cmp	r5, #12
 8004f52:	bf38      	it	cc
 8004f54:	250c      	movcc	r5, #12
 8004f56:	2d00      	cmp	r5, #0
 8004f58:	4607      	mov	r7, r0
 8004f5a:	db01      	blt.n	8004f60 <_malloc_r+0x1c>
 8004f5c:	42a9      	cmp	r1, r5
 8004f5e:	d905      	bls.n	8004f6c <_malloc_r+0x28>
 8004f60:	230c      	movs	r3, #12
 8004f62:	603b      	str	r3, [r7, #0]
 8004f64:	2600      	movs	r6, #0
 8004f66:	4630      	mov	r0, r6
 8004f68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f6c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005040 <_malloc_r+0xfc>
 8004f70:	f000 f868 	bl	8005044 <__malloc_lock>
 8004f74:	f8d8 3000 	ldr.w	r3, [r8]
 8004f78:	461c      	mov	r4, r3
 8004f7a:	bb5c      	cbnz	r4, 8004fd4 <_malloc_r+0x90>
 8004f7c:	4629      	mov	r1, r5
 8004f7e:	4638      	mov	r0, r7
 8004f80:	f7ff ffc0 	bl	8004f04 <sbrk_aligned>
 8004f84:	1c43      	adds	r3, r0, #1
 8004f86:	4604      	mov	r4, r0
 8004f88:	d155      	bne.n	8005036 <_malloc_r+0xf2>
 8004f8a:	f8d8 4000 	ldr.w	r4, [r8]
 8004f8e:	4626      	mov	r6, r4
 8004f90:	2e00      	cmp	r6, #0
 8004f92:	d145      	bne.n	8005020 <_malloc_r+0xdc>
 8004f94:	2c00      	cmp	r4, #0
 8004f96:	d048      	beq.n	800502a <_malloc_r+0xe6>
 8004f98:	6823      	ldr	r3, [r4, #0]
 8004f9a:	4631      	mov	r1, r6
 8004f9c:	4638      	mov	r0, r7
 8004f9e:	eb04 0903 	add.w	r9, r4, r3
 8004fa2:	f000 f98d 	bl	80052c0 <_sbrk_r>
 8004fa6:	4581      	cmp	r9, r0
 8004fa8:	d13f      	bne.n	800502a <_malloc_r+0xe6>
 8004faa:	6821      	ldr	r1, [r4, #0]
 8004fac:	1a6d      	subs	r5, r5, r1
 8004fae:	4629      	mov	r1, r5
 8004fb0:	4638      	mov	r0, r7
 8004fb2:	f7ff ffa7 	bl	8004f04 <sbrk_aligned>
 8004fb6:	3001      	adds	r0, #1
 8004fb8:	d037      	beq.n	800502a <_malloc_r+0xe6>
 8004fba:	6823      	ldr	r3, [r4, #0]
 8004fbc:	442b      	add	r3, r5
 8004fbe:	6023      	str	r3, [r4, #0]
 8004fc0:	f8d8 3000 	ldr.w	r3, [r8]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d038      	beq.n	800503a <_malloc_r+0xf6>
 8004fc8:	685a      	ldr	r2, [r3, #4]
 8004fca:	42a2      	cmp	r2, r4
 8004fcc:	d12b      	bne.n	8005026 <_malloc_r+0xe2>
 8004fce:	2200      	movs	r2, #0
 8004fd0:	605a      	str	r2, [r3, #4]
 8004fd2:	e00f      	b.n	8004ff4 <_malloc_r+0xb0>
 8004fd4:	6822      	ldr	r2, [r4, #0]
 8004fd6:	1b52      	subs	r2, r2, r5
 8004fd8:	d41f      	bmi.n	800501a <_malloc_r+0xd6>
 8004fda:	2a0b      	cmp	r2, #11
 8004fdc:	d917      	bls.n	800500e <_malloc_r+0xca>
 8004fde:	1961      	adds	r1, r4, r5
 8004fe0:	42a3      	cmp	r3, r4
 8004fe2:	6025      	str	r5, [r4, #0]
 8004fe4:	bf18      	it	ne
 8004fe6:	6059      	strne	r1, [r3, #4]
 8004fe8:	6863      	ldr	r3, [r4, #4]
 8004fea:	bf08      	it	eq
 8004fec:	f8c8 1000 	streq.w	r1, [r8]
 8004ff0:	5162      	str	r2, [r4, r5]
 8004ff2:	604b      	str	r3, [r1, #4]
 8004ff4:	4638      	mov	r0, r7
 8004ff6:	f104 060b 	add.w	r6, r4, #11
 8004ffa:	f000 f829 	bl	8005050 <__malloc_unlock>
 8004ffe:	f026 0607 	bic.w	r6, r6, #7
 8005002:	1d23      	adds	r3, r4, #4
 8005004:	1af2      	subs	r2, r6, r3
 8005006:	d0ae      	beq.n	8004f66 <_malloc_r+0x22>
 8005008:	1b9b      	subs	r3, r3, r6
 800500a:	50a3      	str	r3, [r4, r2]
 800500c:	e7ab      	b.n	8004f66 <_malloc_r+0x22>
 800500e:	42a3      	cmp	r3, r4
 8005010:	6862      	ldr	r2, [r4, #4]
 8005012:	d1dd      	bne.n	8004fd0 <_malloc_r+0x8c>
 8005014:	f8c8 2000 	str.w	r2, [r8]
 8005018:	e7ec      	b.n	8004ff4 <_malloc_r+0xb0>
 800501a:	4623      	mov	r3, r4
 800501c:	6864      	ldr	r4, [r4, #4]
 800501e:	e7ac      	b.n	8004f7a <_malloc_r+0x36>
 8005020:	4634      	mov	r4, r6
 8005022:	6876      	ldr	r6, [r6, #4]
 8005024:	e7b4      	b.n	8004f90 <_malloc_r+0x4c>
 8005026:	4613      	mov	r3, r2
 8005028:	e7cc      	b.n	8004fc4 <_malloc_r+0x80>
 800502a:	230c      	movs	r3, #12
 800502c:	603b      	str	r3, [r7, #0]
 800502e:	4638      	mov	r0, r7
 8005030:	f000 f80e 	bl	8005050 <__malloc_unlock>
 8005034:	e797      	b.n	8004f66 <_malloc_r+0x22>
 8005036:	6025      	str	r5, [r4, #0]
 8005038:	e7dc      	b.n	8004ff4 <_malloc_r+0xb0>
 800503a:	605b      	str	r3, [r3, #4]
 800503c:	deff      	udf	#255	; 0xff
 800503e:	bf00      	nop
 8005040:	20004b74 	.word	0x20004b74

08005044 <__malloc_lock>:
 8005044:	4801      	ldr	r0, [pc, #4]	; (800504c <__malloc_lock+0x8>)
 8005046:	f7ff bf00 	b.w	8004e4a <__retarget_lock_acquire_recursive>
 800504a:	bf00      	nop
 800504c:	20004b70 	.word	0x20004b70

08005050 <__malloc_unlock>:
 8005050:	4801      	ldr	r0, [pc, #4]	; (8005058 <__malloc_unlock+0x8>)
 8005052:	f7ff befb 	b.w	8004e4c <__retarget_lock_release_recursive>
 8005056:	bf00      	nop
 8005058:	20004b70 	.word	0x20004b70

0800505c <__sflush_r>:
 800505c:	898a      	ldrh	r2, [r1, #12]
 800505e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005062:	4605      	mov	r5, r0
 8005064:	0710      	lsls	r0, r2, #28
 8005066:	460c      	mov	r4, r1
 8005068:	d458      	bmi.n	800511c <__sflush_r+0xc0>
 800506a:	684b      	ldr	r3, [r1, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	dc05      	bgt.n	800507c <__sflush_r+0x20>
 8005070:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005072:	2b00      	cmp	r3, #0
 8005074:	dc02      	bgt.n	800507c <__sflush_r+0x20>
 8005076:	2000      	movs	r0, #0
 8005078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800507c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800507e:	2e00      	cmp	r6, #0
 8005080:	d0f9      	beq.n	8005076 <__sflush_r+0x1a>
 8005082:	2300      	movs	r3, #0
 8005084:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005088:	682f      	ldr	r7, [r5, #0]
 800508a:	6a21      	ldr	r1, [r4, #32]
 800508c:	602b      	str	r3, [r5, #0]
 800508e:	d032      	beq.n	80050f6 <__sflush_r+0x9a>
 8005090:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005092:	89a3      	ldrh	r3, [r4, #12]
 8005094:	075a      	lsls	r2, r3, #29
 8005096:	d505      	bpl.n	80050a4 <__sflush_r+0x48>
 8005098:	6863      	ldr	r3, [r4, #4]
 800509a:	1ac0      	subs	r0, r0, r3
 800509c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800509e:	b10b      	cbz	r3, 80050a4 <__sflush_r+0x48>
 80050a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80050a2:	1ac0      	subs	r0, r0, r3
 80050a4:	2300      	movs	r3, #0
 80050a6:	4602      	mov	r2, r0
 80050a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80050aa:	6a21      	ldr	r1, [r4, #32]
 80050ac:	4628      	mov	r0, r5
 80050ae:	47b0      	blx	r6
 80050b0:	1c43      	adds	r3, r0, #1
 80050b2:	89a3      	ldrh	r3, [r4, #12]
 80050b4:	d106      	bne.n	80050c4 <__sflush_r+0x68>
 80050b6:	6829      	ldr	r1, [r5, #0]
 80050b8:	291d      	cmp	r1, #29
 80050ba:	d82b      	bhi.n	8005114 <__sflush_r+0xb8>
 80050bc:	4a29      	ldr	r2, [pc, #164]	; (8005164 <__sflush_r+0x108>)
 80050be:	410a      	asrs	r2, r1
 80050c0:	07d6      	lsls	r6, r2, #31
 80050c2:	d427      	bmi.n	8005114 <__sflush_r+0xb8>
 80050c4:	2200      	movs	r2, #0
 80050c6:	6062      	str	r2, [r4, #4]
 80050c8:	04d9      	lsls	r1, r3, #19
 80050ca:	6922      	ldr	r2, [r4, #16]
 80050cc:	6022      	str	r2, [r4, #0]
 80050ce:	d504      	bpl.n	80050da <__sflush_r+0x7e>
 80050d0:	1c42      	adds	r2, r0, #1
 80050d2:	d101      	bne.n	80050d8 <__sflush_r+0x7c>
 80050d4:	682b      	ldr	r3, [r5, #0]
 80050d6:	b903      	cbnz	r3, 80050da <__sflush_r+0x7e>
 80050d8:	6560      	str	r0, [r4, #84]	; 0x54
 80050da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050dc:	602f      	str	r7, [r5, #0]
 80050de:	2900      	cmp	r1, #0
 80050e0:	d0c9      	beq.n	8005076 <__sflush_r+0x1a>
 80050e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050e6:	4299      	cmp	r1, r3
 80050e8:	d002      	beq.n	80050f0 <__sflush_r+0x94>
 80050ea:	4628      	mov	r0, r5
 80050ec:	f7ff febe 	bl	8004e6c <_free_r>
 80050f0:	2000      	movs	r0, #0
 80050f2:	6360      	str	r0, [r4, #52]	; 0x34
 80050f4:	e7c0      	b.n	8005078 <__sflush_r+0x1c>
 80050f6:	2301      	movs	r3, #1
 80050f8:	4628      	mov	r0, r5
 80050fa:	47b0      	blx	r6
 80050fc:	1c41      	adds	r1, r0, #1
 80050fe:	d1c8      	bne.n	8005092 <__sflush_r+0x36>
 8005100:	682b      	ldr	r3, [r5, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d0c5      	beq.n	8005092 <__sflush_r+0x36>
 8005106:	2b1d      	cmp	r3, #29
 8005108:	d001      	beq.n	800510e <__sflush_r+0xb2>
 800510a:	2b16      	cmp	r3, #22
 800510c:	d101      	bne.n	8005112 <__sflush_r+0xb6>
 800510e:	602f      	str	r7, [r5, #0]
 8005110:	e7b1      	b.n	8005076 <__sflush_r+0x1a>
 8005112:	89a3      	ldrh	r3, [r4, #12]
 8005114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005118:	81a3      	strh	r3, [r4, #12]
 800511a:	e7ad      	b.n	8005078 <__sflush_r+0x1c>
 800511c:	690f      	ldr	r7, [r1, #16]
 800511e:	2f00      	cmp	r7, #0
 8005120:	d0a9      	beq.n	8005076 <__sflush_r+0x1a>
 8005122:	0793      	lsls	r3, r2, #30
 8005124:	680e      	ldr	r6, [r1, #0]
 8005126:	bf08      	it	eq
 8005128:	694b      	ldreq	r3, [r1, #20]
 800512a:	600f      	str	r7, [r1, #0]
 800512c:	bf18      	it	ne
 800512e:	2300      	movne	r3, #0
 8005130:	eba6 0807 	sub.w	r8, r6, r7
 8005134:	608b      	str	r3, [r1, #8]
 8005136:	f1b8 0f00 	cmp.w	r8, #0
 800513a:	dd9c      	ble.n	8005076 <__sflush_r+0x1a>
 800513c:	6a21      	ldr	r1, [r4, #32]
 800513e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005140:	4643      	mov	r3, r8
 8005142:	463a      	mov	r2, r7
 8005144:	4628      	mov	r0, r5
 8005146:	47b0      	blx	r6
 8005148:	2800      	cmp	r0, #0
 800514a:	dc06      	bgt.n	800515a <__sflush_r+0xfe>
 800514c:	89a3      	ldrh	r3, [r4, #12]
 800514e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005152:	81a3      	strh	r3, [r4, #12]
 8005154:	f04f 30ff 	mov.w	r0, #4294967295
 8005158:	e78e      	b.n	8005078 <__sflush_r+0x1c>
 800515a:	4407      	add	r7, r0
 800515c:	eba8 0800 	sub.w	r8, r8, r0
 8005160:	e7e9      	b.n	8005136 <__sflush_r+0xda>
 8005162:	bf00      	nop
 8005164:	dfbffffe 	.word	0xdfbffffe

08005168 <_fflush_r>:
 8005168:	b538      	push	{r3, r4, r5, lr}
 800516a:	690b      	ldr	r3, [r1, #16]
 800516c:	4605      	mov	r5, r0
 800516e:	460c      	mov	r4, r1
 8005170:	b913      	cbnz	r3, 8005178 <_fflush_r+0x10>
 8005172:	2500      	movs	r5, #0
 8005174:	4628      	mov	r0, r5
 8005176:	bd38      	pop	{r3, r4, r5, pc}
 8005178:	b118      	cbz	r0, 8005182 <_fflush_r+0x1a>
 800517a:	6a03      	ldr	r3, [r0, #32]
 800517c:	b90b      	cbnz	r3, 8005182 <_fflush_r+0x1a>
 800517e:	f7ff fc81 	bl	8004a84 <__sinit>
 8005182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d0f3      	beq.n	8005172 <_fflush_r+0xa>
 800518a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800518c:	07d0      	lsls	r0, r2, #31
 800518e:	d404      	bmi.n	800519a <_fflush_r+0x32>
 8005190:	0599      	lsls	r1, r3, #22
 8005192:	d402      	bmi.n	800519a <_fflush_r+0x32>
 8005194:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005196:	f7ff fe58 	bl	8004e4a <__retarget_lock_acquire_recursive>
 800519a:	4628      	mov	r0, r5
 800519c:	4621      	mov	r1, r4
 800519e:	f7ff ff5d 	bl	800505c <__sflush_r>
 80051a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051a4:	07da      	lsls	r2, r3, #31
 80051a6:	4605      	mov	r5, r0
 80051a8:	d4e4      	bmi.n	8005174 <_fflush_r+0xc>
 80051aa:	89a3      	ldrh	r3, [r4, #12]
 80051ac:	059b      	lsls	r3, r3, #22
 80051ae:	d4e1      	bmi.n	8005174 <_fflush_r+0xc>
 80051b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051b2:	f7ff fe4b 	bl	8004e4c <__retarget_lock_release_recursive>
 80051b6:	e7dd      	b.n	8005174 <_fflush_r+0xc>

080051b8 <__swhatbuf_r>:
 80051b8:	b570      	push	{r4, r5, r6, lr}
 80051ba:	460c      	mov	r4, r1
 80051bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051c0:	2900      	cmp	r1, #0
 80051c2:	b096      	sub	sp, #88	; 0x58
 80051c4:	4615      	mov	r5, r2
 80051c6:	461e      	mov	r6, r3
 80051c8:	da0d      	bge.n	80051e6 <__swhatbuf_r+0x2e>
 80051ca:	89a3      	ldrh	r3, [r4, #12]
 80051cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80051d0:	f04f 0100 	mov.w	r1, #0
 80051d4:	bf0c      	ite	eq
 80051d6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80051da:	2340      	movne	r3, #64	; 0x40
 80051dc:	2000      	movs	r0, #0
 80051de:	6031      	str	r1, [r6, #0]
 80051e0:	602b      	str	r3, [r5, #0]
 80051e2:	b016      	add	sp, #88	; 0x58
 80051e4:	bd70      	pop	{r4, r5, r6, pc}
 80051e6:	466a      	mov	r2, sp
 80051e8:	f000 f848 	bl	800527c <_fstat_r>
 80051ec:	2800      	cmp	r0, #0
 80051ee:	dbec      	blt.n	80051ca <__swhatbuf_r+0x12>
 80051f0:	9901      	ldr	r1, [sp, #4]
 80051f2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80051f6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80051fa:	4259      	negs	r1, r3
 80051fc:	4159      	adcs	r1, r3
 80051fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005202:	e7eb      	b.n	80051dc <__swhatbuf_r+0x24>

08005204 <__smakebuf_r>:
 8005204:	898b      	ldrh	r3, [r1, #12]
 8005206:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005208:	079d      	lsls	r5, r3, #30
 800520a:	4606      	mov	r6, r0
 800520c:	460c      	mov	r4, r1
 800520e:	d507      	bpl.n	8005220 <__smakebuf_r+0x1c>
 8005210:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005214:	6023      	str	r3, [r4, #0]
 8005216:	6123      	str	r3, [r4, #16]
 8005218:	2301      	movs	r3, #1
 800521a:	6163      	str	r3, [r4, #20]
 800521c:	b002      	add	sp, #8
 800521e:	bd70      	pop	{r4, r5, r6, pc}
 8005220:	ab01      	add	r3, sp, #4
 8005222:	466a      	mov	r2, sp
 8005224:	f7ff ffc8 	bl	80051b8 <__swhatbuf_r>
 8005228:	9900      	ldr	r1, [sp, #0]
 800522a:	4605      	mov	r5, r0
 800522c:	4630      	mov	r0, r6
 800522e:	f7ff fe89 	bl	8004f44 <_malloc_r>
 8005232:	b948      	cbnz	r0, 8005248 <__smakebuf_r+0x44>
 8005234:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005238:	059a      	lsls	r2, r3, #22
 800523a:	d4ef      	bmi.n	800521c <__smakebuf_r+0x18>
 800523c:	f023 0303 	bic.w	r3, r3, #3
 8005240:	f043 0302 	orr.w	r3, r3, #2
 8005244:	81a3      	strh	r3, [r4, #12]
 8005246:	e7e3      	b.n	8005210 <__smakebuf_r+0xc>
 8005248:	89a3      	ldrh	r3, [r4, #12]
 800524a:	6020      	str	r0, [r4, #0]
 800524c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005250:	81a3      	strh	r3, [r4, #12]
 8005252:	9b00      	ldr	r3, [sp, #0]
 8005254:	6163      	str	r3, [r4, #20]
 8005256:	9b01      	ldr	r3, [sp, #4]
 8005258:	6120      	str	r0, [r4, #16]
 800525a:	b15b      	cbz	r3, 8005274 <__smakebuf_r+0x70>
 800525c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005260:	4630      	mov	r0, r6
 8005262:	f000 f81d 	bl	80052a0 <_isatty_r>
 8005266:	b128      	cbz	r0, 8005274 <__smakebuf_r+0x70>
 8005268:	89a3      	ldrh	r3, [r4, #12]
 800526a:	f023 0303 	bic.w	r3, r3, #3
 800526e:	f043 0301 	orr.w	r3, r3, #1
 8005272:	81a3      	strh	r3, [r4, #12]
 8005274:	89a3      	ldrh	r3, [r4, #12]
 8005276:	431d      	orrs	r5, r3
 8005278:	81a5      	strh	r5, [r4, #12]
 800527a:	e7cf      	b.n	800521c <__smakebuf_r+0x18>

0800527c <_fstat_r>:
 800527c:	b538      	push	{r3, r4, r5, lr}
 800527e:	4d07      	ldr	r5, [pc, #28]	; (800529c <_fstat_r+0x20>)
 8005280:	2300      	movs	r3, #0
 8005282:	4604      	mov	r4, r0
 8005284:	4608      	mov	r0, r1
 8005286:	4611      	mov	r1, r2
 8005288:	602b      	str	r3, [r5, #0]
 800528a:	f7fb fb68 	bl	800095e <_fstat>
 800528e:	1c43      	adds	r3, r0, #1
 8005290:	d102      	bne.n	8005298 <_fstat_r+0x1c>
 8005292:	682b      	ldr	r3, [r5, #0]
 8005294:	b103      	cbz	r3, 8005298 <_fstat_r+0x1c>
 8005296:	6023      	str	r3, [r4, #0]
 8005298:	bd38      	pop	{r3, r4, r5, pc}
 800529a:	bf00      	nop
 800529c:	20004b6c 	.word	0x20004b6c

080052a0 <_isatty_r>:
 80052a0:	b538      	push	{r3, r4, r5, lr}
 80052a2:	4d06      	ldr	r5, [pc, #24]	; (80052bc <_isatty_r+0x1c>)
 80052a4:	2300      	movs	r3, #0
 80052a6:	4604      	mov	r4, r0
 80052a8:	4608      	mov	r0, r1
 80052aa:	602b      	str	r3, [r5, #0]
 80052ac:	f7fb fb67 	bl	800097e <_isatty>
 80052b0:	1c43      	adds	r3, r0, #1
 80052b2:	d102      	bne.n	80052ba <_isatty_r+0x1a>
 80052b4:	682b      	ldr	r3, [r5, #0]
 80052b6:	b103      	cbz	r3, 80052ba <_isatty_r+0x1a>
 80052b8:	6023      	str	r3, [r4, #0]
 80052ba:	bd38      	pop	{r3, r4, r5, pc}
 80052bc:	20004b6c 	.word	0x20004b6c

080052c0 <_sbrk_r>:
 80052c0:	b538      	push	{r3, r4, r5, lr}
 80052c2:	4d06      	ldr	r5, [pc, #24]	; (80052dc <_sbrk_r+0x1c>)
 80052c4:	2300      	movs	r3, #0
 80052c6:	4604      	mov	r4, r0
 80052c8:	4608      	mov	r0, r1
 80052ca:	602b      	str	r3, [r5, #0]
 80052cc:	f7fb fb70 	bl	80009b0 <_sbrk>
 80052d0:	1c43      	adds	r3, r0, #1
 80052d2:	d102      	bne.n	80052da <_sbrk_r+0x1a>
 80052d4:	682b      	ldr	r3, [r5, #0]
 80052d6:	b103      	cbz	r3, 80052da <_sbrk_r+0x1a>
 80052d8:	6023      	str	r3, [r4, #0]
 80052da:	bd38      	pop	{r3, r4, r5, pc}
 80052dc:	20004b6c 	.word	0x20004b6c

080052e0 <_init>:
 80052e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052e2:	bf00      	nop
 80052e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052e6:	bc08      	pop	{r3}
 80052e8:	469e      	mov	lr, r3
 80052ea:	4770      	bx	lr

080052ec <_fini>:
 80052ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ee:	bf00      	nop
 80052f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052f2:	bc08      	pop	{r3}
 80052f4:	469e      	mov	lr, r3
 80052f6:	4770      	bx	lr
